<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Flying in the ocean of knowledge</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.xuchunfa.cn/"/>
  <updated>2018-10-08T13:51:34.443Z</updated>
  <id>http://www.xuchunfa.cn/</id>
  
  <author>
    <name>Xu chunfa</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Spring源码分析</title>
    <link href="http://www.xuchunfa.cn/2018/10/07/Spring%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    <id>http://www.xuchunfa.cn/2018/10/07/Spring源码分析/</id>
    <published>2018-10-07T01:05:37.000Z</published>
    <updated>2018-10-08T13:51:34.443Z</updated>
    
    <content type="html"><![CDATA[<p>1.在初始化ClassPathXmlApplicationContext时会调用到一个比较重要的方法，refresh()：</p><pre><code>//AbstractApplicationContext.javapublic void refresh() throws BeansException, IllegalStateException {    synchronized (this.startupShutdownMonitor) {        // 准备工作，记录下容器的启动时间、标记“已启动”状态、处理配置文件中的占位符        prepareRefresh();        //解析XML中的&lt;bean&gt;,将最后得到的beanDefinition注册到DefaultListableBeanFactory中去        ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();        // 设置 BeanFactory 的类加载器，添加几个 BeanPostProcessor，手动注册几个特殊的 bean        prepareBeanFactory(beanFactory);        try {            // 【这里需要知道 BeanFactoryPostProcessor 这个知识点，Bean 如果实现了此接口，             // 那么在容器初始化以后，Spring 会负责调用里面的 postProcessBeanFactory 方法。】            // 这里是提供给子类的扩展点，到这里的时候，所有的 Bean 都加载、注册完成了，但是都还没有初始化             // 具体的子类可以在这步的时候添加一些特殊的 BeanFactoryPostProcessor 的实现类或做点什么事            postProcessBeanFactory(beanFactory);            // 调用 BeanFactoryPostProcessor 各个实现类的 postProcessBeanFactory(factory) 方法            invokeBeanFactoryPostProcessors(beanFactory);            // 注册 BeanPostProcessor 的实现类，注意看和 BeanFactoryPostProcessor 的区别             // 此接口两个方法: postProcessBeforeInitialization 和 postProcessAfterInitialization             // 两个方法分别在 Bean 初始化之前和初始化之后得到执行。注意，到这里 Bean 还没初始化            registerBeanPostProcessors(beanFactory);            // Initialize message source for this context.            initMessageSource();            // Initialize event multicaster for this context.            initApplicationEventMulticaster();            // Initialize other special beans in specific context subclasses.            onRefresh();            // Check for listener beans and register them.            registerListeners();            // 重点，重点，重点             // 初始化所有的 singleton beans             //（lazy-init 的除外）            finishBeanFactoryInitialization(beanFactory);            // Last step: publish corresponding event.            finishRefresh();        }</code></pre><p>里面做了比较重要的事情：注册加载bean的定义信息，这里有两个重要的接口出现了，按先后顺序：</p><pre><code>//加载Bean的定义信息，包括属性啥的，但是此时还没有实例化Beanpublic interface BeanFactoryPostProcessor {void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) throws BeansException;}</code></pre><p>接下来：</p><pre><code>public interface BeanPostProcessor {//Bean 初始化之前执行的方法@Nullabledefault Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException {    return bean;}//Bean 初始化之后执行的方法@Nullabledefault Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException {    return bean;}}</code></pre><p>详细分析一下AbstractApplicationContext中的refresh()方法，按先后顺序挑重点看：</p><p>1.第一个重要方法：</p><pre><code>//AbstractApplicationContext.javaConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();</code></pre><p>里面涉及到了下面过程的分析。</p><p>在里面调用了重要方法：</p><pre><code>//AbstractRefreshableApplicationContext.java它是AbstractApplicationContext的子类refreshBeanFactory(){    DefaultListableBeanFactory beanFactory = createBeanFactory();    beanFactory.setSerializationId(getId());    customizeBeanFactory(beanFactory);    loadBeanDefinitions(beanFactory);}</code></pre><p>在这里容器中出现了比较重要的实例：DefaultListableBeanFactory。先看一下结构图：</p><p><img src="https://i.imgur.com/2mEAJAA.png" alt=""></p><p>然后调用了方法：</p><pre><code>//AbstractXmlApplicationContext.java//根据配置加载各个Bean 到 BeanFactory中去protected void loadBeanDefinitions(DefaultListableBeanFactory beanFactory) throws BeansException, IOException {    XmlBeanDefinitionReader beanDefinitionReader = new XmlBeanDefinitionReader(beanFactory);    beanDefinitionReader.setEnvironment(this.getEnvironment());    beanDefinitionReader.setResourceLoader(this);    beanDefinitionReader.setEntityResolver(new ResourceEntityResolver(this));    //加载XML文件    initBeanDefinitionReader(beanDefinitionReader);    loadBeanDefinitions(beanDefinitionReader);}</code></pre><p>其中加载各个Bean主要通过XmlBeanDefinitionReader实例完成。</p><p>然后经过一系列的巴拉巴拉操作将XML文件中的Bean进行解析，一个Bean解析成一个BeanDefinitionHolder实例：</p><pre><code>//BeanDefinitionHolder.javapublic class BeanDefinitionHolder implements BeanMetadataElement {private final BeanDefinition beanDefinition;private final String beanName;@Nullableprivate final String[] aliases;.....}</code></pre><p>然后开始了注册Bean的重头戏,其实就是将BeanDefinition放到beanDefinitionMap中去。</p><pre><code>//DefaultBeanDefinitionDocumentReader.javaprotected void processBeanDefinition(Element ele, BeanDefinitionParserDelegate delegate) {    BeanDefinitionHolder bdHolder = delegate.parseBeanDefinitionElement(ele);    if (bdHolder != null) {        bdHolder = delegate.decorateBeanDefinitionIfRequired(ele, bdHolder);        try {            //从这里开始注册            BeanDefinitionReaderUtils.registerBeanDefinition(bdHolder, getReaderContext().getRegistry());        }    }}</code></pre><p>接着来到：</p><pre><code>//BeanDefinitionReaderUtils.javapublic static void registerBeanDefinition(        BeanDefinitionHolder definitionHolder, BeanDefinitionRegistry registry)        throws BeanDefinitionStoreException {    String beanName = definitionHolder.getBeanName();    //真正开始注册    registry.registerBeanDefinition(beanName, definitionHolder.getBeanDefinition());    String[] aliases = definitionHolder.getAliases();    if (aliases != null) {        for (String alias : aliases) {            registry.registerAlias(beanName, alias);        }    }}</code></pre><p>最后进入：</p><pre><code>//DefaultListableBeanFactory.javapublic void registerBeanDefinition(String beanName, BeanDefinition beanDefinition)        throws BeanDefinitionStoreException {......    this.beanDefinitionMap.put(beanName, beanDefinition);    this.beanDefinitionNames.add(beanName);    this.manualSingletonNames.remove(beanName);......}</code></pre><p>至此为止，refresh()方法中的第一个方法obtainFreshBeanFactory()分析完毕。</p><hr><p>在执行到第二个重要方法之前已经完成的事：、</p><pre><code>BeanFactory 已经创建完成，并且所有的实现了 BeanFactoryPostProcessor 接口的 Bean 都已经初始化，并且其中的 postProcessBeanFactory(factory) 方法已经得到执行了。所有实现了 BeanPostProcessor 接口的 Bean 也都完成了初始化。剩下的就是初始化其他还没被初始化的 singleton beans 了，我们知道它们是单例的，如果没有设置懒加载，那么 Spring 会在接下来初始化所有的 singleton beans。</code></pre><p>第二个重要的方法：</p><pre><code>//AbstractApplicationContext.javaprotected void finishBeanFactoryInitialization(ConfigurableListableBeanFactory beanFactory) {    // Initialize conversion service for this context.    if (beanFactory.containsBean(CONVERSION_SERVICE_BEAN_NAME) &amp;&amp;            beanFactory.isTypeMatch(CONVERSION_SERVICE_BEAN_NAME, ConversionService.class)) {        beanFactory.setConversionService(                beanFactory.getBean(CONVERSION_SERVICE_BEAN_NAME, ConversionService.class));    }    // Register a default embedded value resolver if no bean post-processor    // (such as a PropertyPlaceholderConfigurer bean) registered any before:    // at this point, primarily for resolution in annotation attribute values.    if (!beanFactory.hasEmbeddedValueResolver()) {        beanFactory.addEmbeddedValueResolver(strVal -&gt; getEnvironment().resolvePlaceholders(strVal));    }    // Initialize LoadTimeWeaverAware beans early to allow for registering their transformers early.    String[] weaverAwareNames = beanFactory.getBeanNamesForType(LoadTimeWeaverAware.class, false, false);    for (String weaverAwareName : weaverAwareNames) {        getBean(weaverAwareName);    }    // Stop using the temporary ClassLoader for type matching.    beanFactory.setTempClassLoader(null);    // Allow for caching all bean definition metadata, not expecting further changes.    beanFactory.freezeConfiguration();    // Instantiate all remaining (non-lazy-init) singletons.    // 开始初始化未设置懒加载的单例Bean    beanFactory.preInstantiateSingletons();}</code></pre><p>一大波准备工作后，进入到初始化的方法：</p><pre><code>//DefaultListableBeanFactory.javapublic void preInstantiateSingletons() throws BeansException {    ......    // 准备实例化单例Bean/FactoryBean    for (String beanName : beanNames) {        RootBeanDefinition bd = getMergedLocalBeanDefinition(beanName);        if (!bd.isAbstract() &amp;&amp; bd.isSingleton() &amp;&amp; !bd.isLazyInit()) {            if (isFactoryBean(beanName)) {                Object bean = getBean(FACTORY_BEAN_PREFIX + beanName);                if (bean instanceof FactoryBean) {                    final FactoryBean&lt;?&gt; factory = (FactoryBean&lt;?&gt;) bean;                    boolean isEagerInit;                    if (System.getSecurityManager() != null &amp;&amp; factory instanceof SmartFactoryBean) {                        isEagerInit = AccessController.doPrivileged((PrivilegedAction&lt;Boolean&gt;)                                        ((SmartFactoryBean&lt;?&gt;) factory)::isEagerInit,                                getAccessControlContext());                    }                    else {                        isEagerInit = (factory instanceof SmartFactoryBean &amp;&amp;                                ((SmartFactoryBean&lt;?&gt;) factory).isEagerInit());                    }                    if (isEagerInit) {                        getBean(beanName);                    }                }            }            else {                //正常的话，创建单例Bean的入口                getBean(beanName);            }        }    ......}</code></pre><p>然后进入getBean方法：</p><pre><code>//AbstractBeanFactory.javapublic Object getBean(String name) throws BeansException {    return doGetBean(name, null, null, false);}</code></pre><p>接下来继续调用：</p><pre><code>//AbstractBeanFactory.javaprotected &lt;T&gt; T doGetBean(final String name, @Nullable final Class&lt;T&gt; requiredType,        @Nullable final Object[] args, boolean typeCheckOnly) throws BeansException {一系列巴拉巴拉：判断是不是sharedInstance、检查Bean是不是已经创建过、注册依赖Bean//创建单例Beanif (mbd.isSingleton()) {            sharedInstance = getSingleton(beanName, () -&gt; {                try {                    //真正创建Bean了                    return createBean(beanName, mbd, args);                }                catch (BeansException ex) {                        destroySingleton(beanName);                        throw ex;                    }                });            bean = getObjectForBeanInstance(sharedInstance, name, beanName, mbd);        }......}</code></pre><p>来看看createBean方法做了哪些事情：</p><pre><code>//AbstractAutowireCapableBeanFactory.javaprotected Object createBean(String beanName, RootBeanDefinition mbd, @Nullable Object[] args)throws BeanCreationException {......try {        //这里好像开始使用BeanPostProcessor接口的方法        Object bean = resolveBeforeInstantiation(beanName, mbdToUse);        if (bean != null) {            return bean;        }    }.....//继续进入创建Bean的方法Object beanInstance = doCreateBean(beanName, mbdToUse, args);.....// Initialize the bean instance.   Object exposedObject = bean;   try {  // 这一步也是非常关键的，这一步负责属性装配，因为前面的实例只是实例化了，并没有设值，这里就是设值  populateBean(beanName, mbd, instanceWrapper);  if (exposedObject != null) {     // 还记得 init-method 吗？还有 InitializingBean 接口？还有 BeanPostProcessor 接口？     // 这里就是处理 bean 初始化完成后的各种回调     exposedObject = initializeBean(beanName, exposedObject, mbd);  }......}</code></pre><p>继续干吧：</p><pre><code>//AbstractAutowireCapableBeanFactory.javarotected Object doCreateBean(final String beanName, final RootBeanDefinition mbd, final @Nullable Object[] args) throws BeanCreationException {if (instanceWrapper == null) {        //终于创建了!!!!        instanceWrapper = createBeanInstance(beanName, mbd, args);    }.....}</code></pre><p>继续进入方法：</p><pre><code>//AbstractAutowireCapableBeanFactory.javaprotected BeanWrapper createBeanInstance(String beanName, RootBeanDefinition mbd, @Nullable Object[] args) {巴拉巴拉的采用工厂方法创建Bean实例......}</code></pre><p>然后里面还可以继续深入到：</p><pre><code>//SimpleInstantiationStrategy.java//这是通过构造方法实例化的，当然也可以使用工厂方法实例化public Object instantiate(RootBeanDefinition bd, String beanName, BeanFactory owner) { //利用构造方法进行实例化BeanUtils.instantiateClass(constructorToUse);}</code></pre><p>到此为止，实例化完成了。。。。。但是属性还没注入。属性是在populateBean方法中注入的：</p><pre><code>//AbstractAutowireCapableBeanFactory.javaprotected void populateBean(String beanName, RootBeanDefinition mbd, BeanWrapper bw) {..... InstantiationAwareBeanPostProcessor ibp = (InstantiationAwareBeanPostProcessor) bp; // 这里有个非常有用的 BeanPostProcessor 进到这里: AutowiredAnnotationBeanPostProcessor // 对采用 @Autowired、@Value 注解的依赖进行设值，这里的内容也是非常丰富的，不过本文不会展开说了，感兴趣的读者请自行研究 pvs = ibp.postProcessPropertyValues(pvs, filteredPds, bw.getWrappedInstance(), beanName); if (pvs == null) {     return; }......}</code></pre><p>最后一步initializeBean，处理各种回调：</p><pre><code>protected Object initializeBean(final String beanName, final Object bean, RootBeanDefinition mbd){else {  // 如果 bean 实现了 BeanNameAware、BeanClassLoaderAware 或 BeanFactoryAware 接口，回调  invokeAwareMethods(beanName, bean);}Object wrappedBean = bean;if (mbd == null || !mbd.isSynthetic()) {  // BeanPostProcessor 的 postProcessBeforeInitialization 回调  wrappedBean = applyBeanPostProcessorsBeforeInitialization(wrappedBean, beanName);}try {  // 处理 bean 中定义的 init-method，  // 或者如果 bean 实现了 InitializingBean 接口，调用 afterPropertiesSet() 方法  invokeInitMethods(beanName, wrappedBean, mbd);}catch (Throwable ex) {  throw new BeanCreationException(        (mbd != null ? mbd.getResourceDescription() : null),        beanName, &quot;Invocation of init method failed&quot;, ex);}if (mbd == null || !mbd.isSynthetic()) {  //BeanPostProcessor 的 postProcessAfterInitialization 回调  wrappedBean = applyBeanPostProcessorsAfterInitialization(wrappedBean, beanName);}return wrappedBean;}</code></pre><p>最后贴一张Spring Bean 的生命周期图：</p><p><img src="https://i.imgur.com/4OETcMX.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1.在初始化ClassPathXmlApplicationContext时会调用到一个比较重要的方法，refresh()：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;//AbstractApplicationContext.java
public void refresh() thro
      
    
    </summary>
    
      <category term="Spring入门" scheme="http://www.xuchunfa.cn/categories/Spring%E5%85%A5%E9%97%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>Spring动态代理</title>
    <link href="http://www.xuchunfa.cn/2018/09/16/Spring%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/"/>
    <id>http://www.xuchunfa.cn/2018/09/16/Spring动态代理/</id>
    <published>2018-09-16T08:24:56.000Z</published>
    <updated>2018-10-10T07:21:38.825Z</updated>
    
    <content type="html"><![CDATA[<p>1.每一个动态代理类都必须要实现InvocationHandler这个接口.</p><pre><code>//该接口中的唯一方法public Object invoke(Object proxy, Method method, Object[] args) throws Throwable;</code></pre><p>2.Proxy代理类的newProxyInstance()方法</p><pre><code>//生成代理实例的三个参数：类加载器（代理类的？？？）、要代理的接口、代理类通过//InvocationHandler实现对外服务public static Object newProxyInstance(ClassLoader loader,Class&lt;?&gt;[] interfaces,InvocationHandler h)</code></pre><p>3.通过代理对象调用目标对象接口的方法，这是会跳转到由这个代理对象关联的 Handler 中的invoke方法去执行，而这个 Handler 对象又接受了一个 HelloServiceImpl 类型的参数，表示代理的就是这个真实对象。</p><p>4.通过 Proxy.newProxyInstance 创建的代理对象是在jvm运行时动态生成的一个对象，它并不是我们InvocationHandler类型，也不是我们定义的那组接口的类型，而是在运行时动态生成的一个对象，并且命名方式都是这样的形式，以$开头proxy为中，最后一个数字表示对象的标号。</p><p>5.代理类和委托类有同样的接口。</p><p>6.动态代理是代理一个接口下的多个实现类。代理的是接口所以代理类必须实现该接口.</p><pre><code>代理模式 = 接口 + 真实实现类 + 代理类。Spring AOP 要做的事情就是生成这个代理类。//AbstractAutoProxyCreator.javaprotected Object createProxy(Class&lt;?&gt; beanClass, @Nullable String beanName,        @Nullable Object[] specificInterceptors, TargetSource targetSource) {....ProxyFactory proxyFactory = new ProxyFactory();return proxyFactory.getProxy(getProxyClassLoader());}</code></pre><p>然后进入了ProxyFactory中：</p><pre><code>//ProxyFactory.javapublic Object getProxy(ClassLoader classLoader) {return createAopProxy().getProxy(classLoader);}</code></pre><p>首先创建一个AopProxy的实例：</p><pre><code>//ProxyCreatorSupport.javaprotected final synchronized AopProxy createAopProxy() {if (!this.active) {  activate();}return getAopProxyFactory().createAopProxy(this);}</code></pre><p>接着来到真正创建Aop代理实例的地方了：</p><pre><code>//DefaultAopProxyFactory.javapublic class DefaultAopProxyFactory implements AopProxyFactory, Serializable {@Overridepublic AopProxy createAopProxy(AdvisedSupport config) throws AopConfigException {  // (我也没用过这个optimize，默认false) || (proxy-target-class=true) || (没有接口)  if (config.isOptimize() || config.isProxyTargetClass() || hasNoUserSuppliedProxyInterfaces(config)) {     Class&lt;?&gt; targetClass = config.getTargetClass();     if (targetClass == null) {        throw new AopConfigException(&quot;TargetSource cannot determine target class: &quot; +              &quot;Either an interface or a target is required for proxy creation.&quot;);     }     // 如果要代理的类本身就是接口，也会用 JDK 动态代理     // 我也没用过这个。。。     if (targetClass.isInterface() || Proxy.isProxyClass(targetClass)) {        return new JdkDynamicAopProxy(config);     }     return new ObjenesisCglibAopProxy(config);  }  else {     // 如果有接口，会跑到这个分支     return new JdkDynamicAopProxy(config);  }}// 判断是否有实现自定义的接口private boolean hasNoUserSuppliedProxyInterfaces(AdvisedSupport config) {  Class&lt;?&gt;[] ifcs = config.getProxiedInterfaces();  return (ifcs.length == 0 || (ifcs.length == 1 &amp;&amp; SpringProxy.class.isAssignableFrom(ifcs[0])));}</code></pre><p>再回到原来通过工厂创建AopProxy代理实例的地方：</p><pre><code>createAopProxy().getProxy(classLoader);</code></pre><p>看看其中一个实现类 JdkDynamicAopProxy 的 getProxy 方法源码：</p><pre><code>public Object getProxy(@Nullable ClassLoader classLoader) {    if (logger.isDebugEnabled()) {        logger.debug(&quot;Creating JDK dynamic proxy: target source is &quot; + this.advised.getTargetSource());    }    Class&lt;?&gt;[] proxiedInterfaces = AopProxyUtils.completeProxiedInterfaces(this.advised, true);    findDefinedEqualsAndHashCodeMethods(proxiedInterfaces);    //this 代表 InvocationHandler 实例，因为 JdkDynamicAopProxy 本身实现了    //InvocationHandler接口    return Proxy.newProxyInstance(classLoader, proxiedInterfaces, this);}</code></pre><p>看一下 JdkDynamicAopProxy 源码的invoke方法：</p><pre><code>public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {    MethodInvocation invocation;    Object oldProxy = null;    boolean setProxyContext = false;    TargetSource targetSource = this.advised.targetSource;    Object target = null;    try {        if (!this.equalsDefined &amp;&amp; AopUtils.isEqualsMethod(method)) {            // The target does not implement the equals(Object) method itself.            //这个方法 equals 和 hashCode方法都不会产生代理内容            return equals(args[0]);        }        else if (!this.hashCodeDefined &amp;&amp; AopUtils.isHashCodeMethod(method)) {            // The target does not implement the hashCode() method itself.            return hashCode();        }        else if (method.getDeclaringClass() == DecoratingProxy.class) {            // There is only getDecoratedClass() declared -&gt; dispatch to proxy config.            return AopProxyUtils.ultimateTargetClass(this.advised);        }        else if (!this.advised.opaque &amp;&amp; method.getDeclaringClass().isInterface() &amp;&amp;                method.getDeclaringClass().isAssignableFrom(Advised.class)) {            // Service invocations on ProxyConfig with the proxy config...            return AopUtils.invokeJoinpointUsingReflection(this.advised, method, args);        }        Object retVal;        if (this.advised.exposeProxy) {            // Make invocation available if necessary.            oldProxy = AopContext.setCurrentProxy(proxy);            setProxyContext = true;        }        // Get as late as possible to minimize the time we &quot;own&quot; the target,        // in case it comes from a pool.        target = targetSource.getTarget();        Class&lt;?&gt; targetClass = (target != null ? target.getClass() : null);        // Get the interception chain for this method.        List&lt;Object&gt; chain = this.advised.getInterceptorsAndDynamicInterceptionAdvice(method, targetClass);        // Check whether we have any advice. If we don&apos;t, we can fallback on direct        // reflective invocation of the target, and avoid creating a MethodInvocation.        if (chain.isEmpty()) {            // We can skip creating a MethodInvocation: just invoke the target directly            // Note that the final invoker must be an InvokerInterceptor so we know it does            // nothing but a reflective operation on the target, and no hot swapping or fancy proxying.            Object[] argsToUse = AopProxyUtils.adaptArgumentsIfNecessary(method, args);            retVal = AopUtils.invokeJoinpointUsingReflection(target, method, argsToUse);        }        else {            invocation = new ReflectiveMethodInvocation(proxy, target, method, args, targetClass, chain);            //进行方法的拦截            retVal = invocation.proceed();        }        // Massage return value if necessary.        Class&lt;?&gt; returnType = method.getReturnType();        if (retVal != null &amp;&amp; retVal == target &amp;&amp;                returnType != Object.class &amp;&amp; returnType.isInstance(proxy) &amp;&amp;                !RawTargetAccess.class.isAssignableFrom(method.getDeclaringClass())) {            // Special case: it returned &quot;this&quot; and the return type of the method            // is type-compatible. Note that we can&apos;t help if the target sets            // a reference to itself in another returned object.            retVal = proxy;        }        else if (retVal == null &amp;&amp; returnType != Void.TYPE &amp;&amp; returnType.isPrimitive()) {            throw new AopInvocationException(                    &quot;Null return value from advice does not match primitive return type for: &quot; + method);        }        return retVal;    }    finally {        if (target != null &amp;&amp; !targetSource.isStatic()) {            // Must have come from TargetSource.            targetSource.releaseTarget(target);        }        if (setProxyContext) {            // Restore old proxy.            AopContext.setCurrentProxy(oldProxy);        }    }}</code></pre><p>7.动态代理类的字节码在程序运行时由Java反射机制动态生成.</p><p>8.代理类可以为委托类进行消息的预处理.</p><blockquote><p>静态代理类</p></blockquote><p>1.代理类和实现类都实现了要代理的接口.</p><p>2.将实现类的对象传到代理类中(通过构造方法),实际上就是调用要代理对象的方法.</p><hr><h4 id="什么叫切面"><a href="#什么叫切面" class="headerlink" title="什么叫切面?"></a>什么叫切面?</h4><pre><code>所谓&quot;切面&quot;，简单说就是那些与业务无关，却为业务模块所共同调用的逻辑或责任封装起来，便于减少系统的重复代码，降低模块之间的耦合度，并有利于未来的可操作性和可维护性。</code></pre><h4 id="多个切面的情况"><a href="#多个切面的情况" class="headerlink" title="多个切面的情况"></a>多个切面的情况</h4><pre><code>&lt;aop:config&gt;    //timeHandler相当于实现 InvocationHandler 接口的调用器,最后调用的是真实对象的方法(invoke方法实现)    &lt;aop:aspect id=&quot;time&quot; ref=&quot;timeHandler&quot; order=&quot;1&quot;&gt;        &lt;aop:pointcut id=&quot;addTime&quot; expression=&quot;execution(* com.xrq.aop.HelloWorld.print*(..))&quot; /&gt;        //抽取出来的业务模块的共同方法        &lt;aop:before method=&quot;printTime&quot; pointcut-ref=&quot;addTime&quot; /&gt;        &lt;aop:after method=&quot;printTime&quot; pointcut-ref=&quot;addTime&quot; /&gt;    &lt;/aop:aspect&gt;    &lt;aop:aspect id=&quot;log&quot; ref=&quot;logHandler&quot; order=&quot;2&quot;&gt;        &lt;aop:pointcut id=&quot;printLog&quot; expression=&quot;execution(* com.xrq.aop.HelloWorld.do*(..))&quot; /&gt;        &lt;aop:before method=&quot;LogBefore&quot; pointcut-ref=&quot;printLog&quot; /&gt;        &lt;aop:after method=&quot;LogAfter&quot; pointcut-ref=&quot;printLog&quot; /&gt;    &lt;/aop:aspect&gt;&lt;/aop:config&gt;</code></pre><p>输出:</p><pre><code>CurrentTime = 1446130273734Log before methodEnter HelloWorldImpl1.printHelloWorld()Log after methodCurrentTime = 1446130273735</code></pre><p>Spring默认以aspect的定义顺序作为织入顺序.order属性可以改变横切点的顺序.</p><hr><p>生成代理的底层原理：</p><pre><code>Bean生成代理的时机：在每个Bean初始化之后,先是AbstractAutowireCapableBeanFactory的initializeBean方法进行初始化。</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1.每一个动态代理类都必须要实现InvocationHandler这个接口.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;//该接口中的唯一方法
public Object invoke(Object proxy, Method method, Object[] args) throws
      
    
    </summary>
    
      <category term="Java设计模式" scheme="http://www.xuchunfa.cn/categories/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>Linux基础</title>
    <link href="http://www.xuchunfa.cn/2018/09/09/Linux%E5%9F%BA%E7%A1%80/"/>
    <id>http://www.xuchunfa.cn/2018/09/09/Linux基础/</id>
    <published>2018-09-09T08:47:26.000Z</published>
    <updated>2018-09-09T08:53:24.522Z</updated>
    
    <content type="html"><![CDATA[<p>1.硬链接和软链接</p><p>硬链接装的是原文件的inode节点，软链接装的是原文件所在的路径。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1.硬链接和软链接&lt;/p&gt;
&lt;p&gt;硬链接装的是原文件的inode节点，软链接装的是原文件所在的路径。&lt;/p&gt;

      
    
    </summary>
    
      <category term="Linux基础" scheme="http://www.xuchunfa.cn/categories/Linux%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
  <entry>
    <title>面试常见Linux指令</title>
    <link href="http://www.xuchunfa.cn/2018/09/08/%E9%9D%A2%E8%AF%95%E5%B8%B8%E8%A7%81Linux%E6%8C%87%E4%BB%A4/"/>
    <id>http://www.xuchunfa.cn/2018/09/08/面试常见Linux指令/</id>
    <published>2018-09-08T08:12:30.000Z</published>
    <updated>2018-09-08T08:12:30.730Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>SpringBoot菜鸡入门</title>
    <link href="http://www.xuchunfa.cn/2018/09/07/SpringBoot%E8%8F%9C%E9%B8%A1%E5%85%A5%E9%97%A8/"/>
    <id>http://www.xuchunfa.cn/2018/09/07/SpringBoot菜鸡入门/</id>
    <published>2018-09-07T14:37:45.000Z</published>
    <updated>2018-10-09T01:21:42.024Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Bean-为什么是单例的？"><a href="#Bean-为什么是单例的？" class="headerlink" title="Bean 为什么是单例的？"></a>Bean 为什么是单例的？</h4><blockquote><p>SpringBoot干货</p></blockquote><p>1.spring-boot-starter-parent：提供相关的Maven依赖。</p><p>2.起步依赖 spring-boot-starter-xx:自动封装好你想要实现的功能的依赖。本质上是一个Maven对象模型。</p><p>3.Spring Boot Maven插件:把项目打包成可执行的JAR,所有的依赖都打进JAR包中。</p><p>4.注解</p><ul><li><p>@SpringBootApplication：开启自动配置。主要依靠的是其中的@EnableAutoConfiguration和@ComponentScan两个注解。</p></li><li><p>@ConfigurationProperties(prefix = “com.dudu”)：绑定一个对象的bean(例子中指的是ConfigBean)，解决在成员属性上一个个加@Value属性的麻烦。</p></li><li><p>@EnableConfigurationProperties(${ConfigBean.Class}):Spring Boot 入口类上的注解，指明要加载那个Bean.</p></li><li><p>@Configuration：代表是一个Java配置文件.用于定义配置类，可替换xml配置文件，被注解的类内部包含有一个或多个被@Bean注解的方法，这些方法将会被AnnotationConfigApplicationContext或者AnnotationConfigWebApplicationContext类进行扫描，并用于构建bean定义，初始化Spring容器</p></li><li><p>@Component:表明是哪个类被扫描进入Spring IoC 容器。相当于XML的配置。</p></li><li><p>@Bean:用在@Configuration注解的类中。</p></li><li><p>@ComponentScan:采用何种策略去扫描装配Bean，告诉 Spring 去哪里找到 bean</p><pre><code>The @ComponentScan annotation is used to automatically create beans for every class annotated with @Component, @Service, @Controller, @RestController, @Repository, ... and adds them to the Spring container (allowing them to be @Autowired).所以以上都是声明Bean的注解。</code></pre></li><li><p>@Autowired:它根据属性的类型找到对应的Bean进行注入。如果对应类型的 Bean 不是唯一的话，那么将属性的名称和Bean的名称进行匹配。还能作用于方法，从Ioc容器中找到对应的Bean进行注入。有个属性required默认为true，即找不到Bean就报错。</p></li><li><p>@ImportResource：如果你必须使用XML的配置，你可以使用@ImportResource来加载指定的XML配置。</p></li><li><p>@Primary:告诉Spring IoC容器，当发现有多个同样类型的Bean时,将优先使用@Primary注解的Bean。</p></li><li><p>@Qualifier:和 @Autowired 一起使用，通过它能够按照名称和类型找到对应的Bean进行注入。</p><pre><code>@Autowired：ByType@Qualifier（&quot;dog&quot;）:ByNameprivate Animal animal = null;</code></pre></li><li><p>@PostConstruct:定义Bean的初始化方法。</p></li><li><p>@PreDestroy:定义Bean的销毁方法。</p></li><li><p>@PropertySource:定义对应的属性文件</p><pre><code>@PropertySource(value = {&quot;classpath:jdbc.properties&quot;})</code></pre></li><li><p>@Conditional:条件装配 Bean,但需要实现Condition接口实现功能。</p><pre><code>@Conditional(DatabaseConditional.class)</code></pre></li><li><p>@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE):定义作用域的类型。</p></li><li><p>@ImportResource(value = {classpath:spring-other.xml}):引入 XML 配置的 Bean。</p></li><li><p>@Aspect:定义切面。</p><p>  约定的流程如下：</p><pre><code>1.@Pointcut(...)public void pointCut(){}2.Before(&quot;pointCut()&quot;)3.After(&quot;pointCut()&quot;)4.AfterReturning(&quot;pointCut()&quot;)5.AfterThrowing(&quot;pointCut()&quot;)</code></pre></li><li><p>@Pointcut:向Spring描述哪些类的哪些方法需要启用AOP编程。</p><pre><code>//Pointcut表达式@Pointcut(&quot;execution(* com.springboot.chapter4.*.*.*.*.print(..)) &amp;&amp; bean(&apos;userServiceImpl&apos;)&quot;)//Point签名public void pointCut()</code></pre><p>  1.*：表示任意返回类型的方法。</p><p>  2.（..）:表示任意参数进行匹配。</p></li><li><p>@RequestMapping():定义类的请求路径。用于读取Request请求的body部分数据，使用系统默认配置的HttpMessageConverter进行解析，然后把相应的数据绑定到要返回的对象上</p></li><li><p>ResponseBody:该注解用于将Controller的方法返回的对象，通过适当HttpMessageConverter转换为指定格式后，写入到Response对象的body数据区。以JSON的格式展现。</p></li><li><p>RequestBody:可以将JSON数据集转换成java对象。通常用来注解参数，从前端输入JSON数据集，数据会自动转换成@RequestBody注解的对象。</p></li><li><p>@DeclareParents:引入新的接口。</p><pre><code>@DeclareParents(value= &quot;com.springboot.chapter4.aspect.service.impl.UserServiceImpl+&quot;, defaultImpl=UserValidatorImpl.class)public UserValidator userValidator;</code></pre></li><li><p>@Order:指定切面的执行顺序。eg:@Order(1)</p></li><li><p>@RestController：就是@Controller+@ResponseBody组合，返回json字符串。使用@RestController这个注解，就不能返回jsp,html页面，视图解析器无法解析jsp,html页面。</p></li><li><p>SpringBootApplication：@SpringBootConfiguration + @EnableAutoConfiguration + @ComponentScan的组合体</p></li></ul><ul><li>@EnableAutoConfiguration：能够自动配置spring的上下文，试图猜测和配置你想要的bean类，通常会自动根据你的类路径和你的bean定义自动配置。</li></ul><ul><li><p>@GetMapping：是@RequestMapping(method = RequestMethod.GET)的缩写,组合注解是方法级别的只能用在方法上。获取数据。</p></li><li><p>@PostMapping：是@RequestMapping(method = RequestMethod.POST)的缩写。创建或更新数据。</p></li><li><p>@PutMapping:更新数据，对象的属性要全。</p></li><li><p>@DeleteMapping：删除数据。</p></li><li><p>@Result:修饰返回的结果集，关联实体类属性和数据库字段一一对应，如果实体类属性和数据库属性名保持一致，就不需要这个属性来修饰。和@Results注解一起使用。</p></li><li><p>@RequestParam：指定HTTP参数与控制器方法参数的映射关系。默认情况下被注解的参数是不允许为空的，可以通过required=false来设置。</p></li><li><p>@PathVariable：从request中接收请求的，用在REST风格中，对应URI.</p></li></ul><p>5.动态代理的方式？</p><p>当需要使用 AOP 的类拥有接口时，它会以 JDK 动态代理的方式运行，否则以CGLIB 运行。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;Bean-为什么是单例的？&quot;&gt;&lt;a href=&quot;#Bean-为什么是单例的？&quot; class=&quot;headerlink&quot; title=&quot;Bean 为什么是单例的？&quot;&gt;&lt;/a&gt;Bean 为什么是单例的？&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;SpringBoot干货&lt;
      
    
    </summary>
    
      <category term="Spring入门" scheme="http://www.xuchunfa.cn/categories/Spring%E5%85%A5%E9%97%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>树算法中好的思想</title>
    <link href="http://www.xuchunfa.cn/2018/09/06/%E6%A0%91%E7%AE%97%E6%B3%95%E4%B8%AD%E5%A5%BD%E7%9A%84%E6%80%9D%E6%83%B3/"/>
    <id>http://www.xuchunfa.cn/2018/09/06/树算法中好的思想/</id>
    <published>2018-09-06T03:16:41.000Z</published>
    <updated>2018-09-06T08:45:30.937Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>遍历直到叶子结点</p></blockquote><pre><code>//处理到达叶子结点时候的情况boolean isLeaf = pRoot.left == null &amp;&amp; pRoot.right == null;//前序遍历if(pRoot.left != null)     sumOfTrace(pRoot.left,sumValue);if(pRoot.right != null)     sumOfTrace(pRoot.right, sumValue);//处理到达叶子结点但未满足条件的情况......</code></pre><blockquote><p>提前结束树的遍历</p></blockquote><pre><code>//如果在左子树中找到结果 结果直接为Trueboolean isExisted = findPath(pRoot.left,node,list);//若不为True,继续遍历右子树if(!isExisted){     isExisted = findPath(pRoot.right,node,list);}</code></pre><blockquote><p>在需要辅助指针的时候可以从另一个函数里面传进去，而不需要定义成员变量</p></blockquote><pre><code>public BinaryTreeNode bstLinkedList(BinaryTreeNode pRoot){    BinaryTreeNode lastVisited = null;    //传入初始化为null的指针    reverse(pRoot,lastVisited);}</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;遍历直到叶子结点&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;//处理到达叶子结点时候的情况
boolean isLeaf = pRoot.left == null &amp;amp;&amp;amp; pRoot.right == null;

/
      
    
    </summary>
    
      <category term="树" scheme="http://www.xuchunfa.cn/categories/%E6%A0%91/"/>
    
    
  </entry>
  
  <entry>
    <title>Mysql笔记</title>
    <link href="http://www.xuchunfa.cn/2018/09/04/Mysql%E7%AC%94%E8%AE%B0/"/>
    <id>http://www.xuchunfa.cn/2018/09/04/Mysql笔记/</id>
    <published>2018-09-04T03:26:20.000Z</published>
    <updated>2018-09-15T13:59:02.540Z</updated>
    
    <content type="html"><![CDATA[<p><strong>1.数据类型理解</strong></p><p>int(M)： M表示的不是数据的最大长度，只是数据宽度，并不影响存储多少位长度的数据；</p><p>varchar(M)： M表示的是varchar类型数据在数据库中存储的最大长度，超过则不存；</p><p>char(N):存放的是字符的个数</p><p><strong>2.关键字的执行顺序</strong></p><p>（8）SELECT（9）DISTINCT (select_list)</p><p>（1）FROM (left_table)</p><p>（3）(join_type) JOIN (right_table)</p><p>（2）ON (join_condition)</p><p>（4）WHERE (where_condition)</p><p>（5）GROUP BY (group_by_list)</p><p>（6）WITH {CUTE|ROLLUP}</p><p>（7）HAVING (having_condition)</p><p>（10）ORDER BY (order_by_list)</p><p>（11）LIMIT (limit_number)</p><p><strong>3.LEFT JOIN 和 RIGHT JOIN 的区别</strong></p><ul><li><p>CROSS JOIN: 返回两个表的笛卡儿积。</p><p>  返回结果集的行号：<br>  set @mycnt = 0;<br>  select (@mycnt := @mycnt + 1) as ROWNUM,c.customers_id,o.order_id from customers AS c,orders AS o<br>  WHERE c.customers_id = o.customers_id </p></li></ul><ul><li><p>LEFT JOIN：以左表为基础的，左表的记录将会全部表示出来,而右表只会显示符合搜索条件的记录(例子中为: A.aID = B.bID).右表记录不足的地方均为NULL.（必须指定 ON 子句）</p></li><li><p>RIGHT JOIN：与上面的情况相反。</p></li><li><p>INNER JOIN: INNER可以省略，直接写成 JOIN 。并不以谁为基础,它只显示符合条件的记录.产生A和B的交集。INNER JOIN中的 WHERE 的过滤条件可以写在 ON 子句中。</p><pre><code>select c.customers_id,o.order_id,c.city from customers AS c JOIN orders AS o ON c.customers_id = o.customers_id AND c.customers_id = &apos;14&apos;或者使用 USING 关键字来简化 ON 子句：select c.customers_id,o.order_id,c.city from customers AS c JOIN orders AS o USING(customers_id) WHERE c.customers_id = &apos;14&apos;</code></pre></li></ul><p>当没有ON语句的时候会将 INNER JOIN 理解成 CROSS JOIN</p><p><strong>4.WHERE过滤器常见错误</strong></p><ul><li><p>在ON条件过滤器后还是会添加保留表中被ON过滤掉的记录,而WHERE条件是永久的过滤。</p></li><li><p>在WHERE条件中使用列别名,不能使用Select中的列别名，因为Select比 Where 晚执行，但是可以使用 From中列别名。</p><pre><code>错误：SELECT customers_id AS c,order_id AS o FROM orders WHERE c = &apos;aa&apos;</code></pre></li><li><p>在WHERE条件中使用统计的过滤</p><pre><code>错误：SELECT COUNT(customers_id) ,order_id  FROM orders WHERE COUNT(customers_id) &gt; 1</code></pre></li></ul><p><strong>5.COUNT容易犯的错误</strong></p><ul><li>COUNT(*)会把通过 OUTER JOIN 添加的行统计入内。而 COUNT(column_name) 函数返回指定列的值的数目（NULL 不会计入在内）</li></ul><p><strong>6.ORDER BY </strong></p><ul><li>NULL值在 ORDER BY 中被视为最小。</li></ul><p><strong>8.Having</strong></p><p>1.Having 通常于 Group by 一起使用。</p><p>2.弥补了WHERE关键字不能与聚合函数联合使用的不足。</p><p><strong>7.LIMIT</strong></p><ul><li>LIMIT n,m : 表示从第 n 条记录开始选择 m 条记录。对于数据量非常大的情景该执行语句的效率比较低。n = 0 代表第一行，limit 0,5 等价于 limit 5 都是返回前5行。</li></ul><p><strong>8.IN</strong></p><ul><li>IN引导的子句只能返回一个字段而 EXIST 可以返回多个。</li><li>EXIST 子句不在乎返回什么，而是在乎是不是有结果集返回。用于检查子查询是否至少会返回一行数据，该子查询实际上并不返回任何数据，而是返回值True或False.</li></ul><hr><blockquote><p>Mysql函数总结</p></blockquote><p>1.MOD(N,M)：表示 N 除以 M 的余数。</p><p>2.DATEDIFF(datepart,startdate,enddate)：返回两个日期之间的时间。</p><p>3.DATEADD(datepart,number,date)：在日期中添加或减去指定的时间间隔。</p><pre><code>eg:计算当前月的一天SELECT DATEADD(mm,DATEDIFF(mm,0,getdate()),0)</code></pre><p>4.IFNULL（expr1，expr2）：在 expr1 的值不为 NULL的情况下都返回 expr1，否则返回 expr2。</p><hr><blockquote><p>Mysql索引的数据结构</p></blockquote><p>1.B+树索引只能找到某条记录所在的页，需要根据二分查找法来进一步找到记录所在页的具体位置。</p><blockquote><p>InnoDB（Mysql5.5以后，支持事务，是表锁） B+ 树索引(叶结点的data域保存了完整的数据记录)</p></blockquote><ul><li>聚集索引（每页大小16K）</li></ul><p>1.根据主键创建的一棵 B+ 树。</p><p>2.叶结点的data域是数据记录。</p><ul><li>辅助索引（二级索引）</li></ul><p>1.根据索引键（例如：用户信息表，主键是用户ID，这里可以在名字上面建立索引，即根据名字创建了一棵B+树）创建的一棵 B+ 树。</p><p>2.叶结点的data域存放的是主键值。</p><pre><code>优点：这样行在面临页分裂时,不需要单独维护二级索引.</code></pre><blockquote><p>MyISAM（不支持事务，是表锁） B+ 树索引（索引文件和数据文件实现了分离）</p></blockquote><p>1.叶结点的data域存放的是数据记录的地址。</p><p>2.主索引要求 key 是唯一的，辅助索引的key可以重复。</p><ul><li>联合索引(最左前缀)</li></ul><h4 id="关于回表的理解？"><a href="#关于回表的理解？" class="headerlink" title="关于回表的理解？"></a>关于回表的理解？</h4><pre><code>索引其实也是个表，不过是存放了索引列的列值和主键的Id值rowid的表如果select子句中，只有索引列，只需访问索引对象即可，不应回表。如果select子句中包含非索引列，就要读取索引存放的对应rowid，然后按照rowid去表中访问对应行的非索引列，就是回表了。</code></pre><p>1.对表上多个列进行索引。可以对第二个键值进行排序。</p><p>2.查询条件中出现联合索引第一列,或者全部,则能利用联合索引.即索引不能隔着字段使用。</p><pre><code>create index test_union_k1_k2_k3_k4_k5_indexon test_union (k1, k2, k3, k4, k5)；EXPLAIN SELECT * FROM test_union where k1= 1 AND k3 = 1;//这里只使用到了k1索引</code></pre><p>3.建复合索引时应该将最常用（频率）作限制条件的列放在最左边，依次递减。</p><ul><li>覆盖索引（使用的标识：Using index）</li></ul><p>1.索引包含所有需要查询的字段的值。</p><p>2.它只扫描索引的数据。</p><p>3.覆盖索引对InnoDB表特别有用。InnoDB的二级索引在叶子节点中保存了行的主键值，所以如果二级主键能够覆盖查询，则可以避免对主键索引的二次查询。在所有这些场景中，索引中满足查询的成本一般比查询要小的多。</p><p>4.覆盖索引优化查询的例子</p><pre><code>alter table t1 add index liu(inventory_id,return_date)；select tid,return_date from t1 order by inventory_id limit 50000,10;</code></pre><ul><li>全文索引（存储引擎MyISAM支持，新版本MYSQL5.6的InnoDB支持全文索引）</li></ul><p>1.支持的字段类型：char、varchar和text。</p><pre><code>例如：ALTER TABLE articles ADD FULLTEXT (&apos;title&apos;,&apos;body&apos;);SELECT * FROM articlesWHERE MATCH (title,body) AGAINST (&apos;database&apos;);把 title 和 body 字段里有 database 的数据记录全部查询出来</code></pre><p>2.不支持中文的全文检索,且对英文检索时忽略大小写</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;1.数据类型理解&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;int(M)： M表示的不是数据的最大长度，只是数据宽度，并不影响存储多少位长度的数据；&lt;/p&gt;
&lt;p&gt;varchar(M)： M表示的是varchar类型数据在数据库中存储的最大长度，超过则不存；&lt;/p&gt;

      
    
    </summary>
    
      <category term="Mysql基础" scheme="http://www.xuchunfa.cn/categories/Mysql%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
  <entry>
    <title>结点的最近祖先</title>
    <link href="http://www.xuchunfa.cn/2018/09/03/%E7%BB%93%E7%82%B9%E7%9A%84%E6%9C%80%E8%BF%91%E7%A5%96%E5%85%88/"/>
    <id>http://www.xuchunfa.cn/2018/09/03/结点的最近祖先/</id>
    <published>2018-09-03T11:46:51.000Z</published>
    <updated>2018-09-03T11:49:04.504Z</updated>
    
    <content type="html"><![CDATA[<h4 id="两个结点的最近祖先？"><a href="#两个结点的最近祖先？" class="headerlink" title="两个结点的最近祖先？"></a>两个结点的最近祖先？</h4><pre><code>public class CommonAncestor {//树为二叉搜索树的情况，默认node1 node2已经存在树中public BinaryTreeNode findCommonAncestor(BinaryTreeNode pRoot,int node1,int node2){    if(pRoot.data &gt; node1 &amp;&amp; pRoot.data &lt; node2 || pRoot.data &lt; node1 &amp;&amp; pRoot.data &gt; node2)        return pRoot;    if(node1 &lt; pRoot.data &amp;&amp; node2 &lt; pRoot.data){        return findCommonAncestor(pRoot.left,node1,node2);    }else if(node1 &gt; pRoot.data &amp;&amp; node2 &gt; pRoot.data){        return findCommonAncestor(pRoot.right,node1,node2);    }    return null;}//树为普通二叉树递归解法public BinaryTreeNode findCommonAncestor1(BinaryTreeNode pRoot,int node1,int node2){    //判断两个结点在同一条分支上？？？    if(pRoot == null)        return null;    if(pathIsExisted(pRoot.left,node1)){        if(pathIsExisted(pRoot.right,node2)) {            return pRoot;        }else//两个结点都在左子树中继续向下递归            return findCommonAncestor1(pRoot.left,node1,node2);    }else {        if(pathIsExisted(pRoot.left,node2))            return pRoot;        else//两个结点都在右子树中继续向下递归            return findCommonAncestor1(pRoot.right,node1,node2);    }}//判断路径中是否存在指定结点的值public boolean pathIsExisted(BinaryTreeNode pRoot,int node){    if(pRoot == null)        return false;    if(pRoot.data == node)        return true;    boolean flag = pathIsExisted(pRoot.left,node);    //如果找到了就不用继续递归了    if(!flag){        flag = pathIsExisted(pRoot.right,node);    }    return flag;}//树为普通二叉树非递归解法public BinaryTreeNode findCommonAncestor2(BinaryTreeNode pRoot,int node1,int node2){    //list1和list2保存根节点到目标结点的路径    List&lt;BinaryTreeNode&gt; list1 = new ArrayList&lt;BinaryTreeNode&gt;();    boolean path1 = findPath(pRoot,node1,list1);    List&lt;BinaryTreeNode&gt; list2 = new ArrayList&lt;BinaryTreeNode&gt;();    boolean path2 = findPath(pRoot,node2,list2);    BinaryTreeNode ancestor = null;    Iterator list1Iterator = list1.iterator();    Iterator list2Iterator = list2.iterator();    int diffIndex = -1;//默认没有出现两个不同的节点    int i = 0;    //找到两条路径岔开的那个位置结点，那么前一个结点就是最后一个公共路径上的结点，也就是最近的祖先    if(path1 &amp;&amp; path2){        while (list1Iterator.hasNext() &amp;&amp; list2Iterator.hasNext()){            if(list1Iterator.next() != list2Iterator.next()){                diffIndex = --i;                break;            }            i++;        }    }    if(diffIndex &gt;= 0)        ancestor = list1.get(diffIndex);    //diffIndex = -1 表示node1和node2在同一条路径上    return ancestor;}//保存包含指定节点路径结点的方法public boolean findPath(BinaryTreeNode pRoot, int node, List&lt;BinaryTreeNode&gt; list){    if(pRoot ==  null)        return false;    list.add(pRoot);    if(pRoot.data == node)        return true;    boolean isExisted = findPath(pRoot.left,node,list);    if(!isExisted){        isExisted = findPath(pRoot.right,node,list);    }    if(!isExisted)        list.remove(list.size()-1);    return isExisted;}public static void main(String[] args){    BinaryTree tree = new BinaryTree();    tree.createBinaryTree(tree.getRoot(),8);    tree.createBinaryTree(tree.getRoot(),3);    tree.createBinaryTree(tree.getRoot(),2);    tree.createBinaryTree(tree.getRoot(),5);    tree.createBinaryTree(tree.getRoot(),1);    tree.createBinaryTree(tree.getRoot(),12);    tree.createBinaryTree(tree.getRoot(),9);    CommonAncestor test = new CommonAncestor();    System.out.println(test.findCommonAncestor1(tree.getRoot(),3,2).data);}}</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;两个结点的最近祖先？&quot;&gt;&lt;a href=&quot;#两个结点的最近祖先？&quot; class=&quot;headerlink&quot; title=&quot;两个结点的最近祖先？&quot;&gt;&lt;/a&gt;两个结点的最近祖先？&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;public class CommonAncestor {

      
    
    </summary>
    
      <category term="树" scheme="http://www.xuchunfa.cn/categories/%E6%A0%91/"/>
    
    
  </entry>
  
  <entry>
    <title>丑数</title>
    <link href="http://www.xuchunfa.cn/2018/09/03/%E4%B8%91%E6%95%B0/"/>
    <id>http://www.xuchunfa.cn/2018/09/03/丑数/</id>
    <published>2018-09-03T02:30:46.000Z</published>
    <updated>2018-09-03T02:33:02.339Z</updated>
    
    <content type="html"><![CDATA[<h4 id="求解指定索引的丑数？"><a href="#求解指定索引的丑数？" class="headerlink" title="求解指定索引的丑数？"></a>求解指定索引的丑数？</h4><pre><code>public class UglyNumber {public static int resolve(int index){    if(index &lt;= 0){        throw new RuntimeException(&quot;参数非法&quot;);    }    int[] uglyNumber = new int[index];    uglyNumber[0] = 1;    int indexOf2,indexOf3,indexOf5;    indexOf2 = indexOf3 = indexOf5 = 0;    int uglyNumberIndex = 1;    while (uglyNumberIndex &lt; index){        int min = Min(uglyNumber[indexOf2]*2,uglyNumber[indexOf3]*3,uglyNumber[indexOf5]*5);        uglyNumber[uglyNumberIndex] = min;        //uglyNumber[uglyNumberIndex]代表的是目前数组中最大的丑数        while (uglyNumber[indexOf2]*2 &lt;= uglyNumber[uglyNumberIndex]){            indexOf2++;        }        //下次的uglyNumber[indexOf3]肯定就大于Max uglyNumber        while (uglyNumber[indexOf3]*3 &lt;= uglyNumber[uglyNumberIndex]){            indexOf3++;        }        while (uglyNumber[indexOf5]*5 &lt;= uglyNumber[uglyNumberIndex]){            indexOf5++;        }        uglyNumberIndex++;    }    return uglyNumber[index-1];}private static int Min(int i, int j, int k) {    int min;    return (min = i &lt; j ? i : j) &lt; k ? min : k;}public static void main(String[] args){    System.out.println(UglyNumber.resolve(100));}}</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;求解指定索引的丑数？&quot;&gt;&lt;a href=&quot;#求解指定索引的丑数？&quot; class=&quot;headerlink&quot; title=&quot;求解指定索引的丑数？&quot;&gt;&lt;/a&gt;求解指定索引的丑数？&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;public class UglyNumber {

pub
      
    
    </summary>
    
      <category term="策略类" scheme="http://www.xuchunfa.cn/categories/%E7%AD%96%E7%95%A5%E7%B1%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>逆序对的个数</title>
    <link href="http://www.xuchunfa.cn/2018/09/03/%E9%80%86%E5%BA%8F%E5%AF%B9%E7%9A%84%E4%B8%AA%E6%95%B0/"/>
    <id>http://www.xuchunfa.cn/2018/09/03/逆序对的个数/</id>
    <published>2018-09-03T02:28:22.000Z</published>
    <updated>2018-09-03T02:30:34.090Z</updated>
    
    <content type="html"><![CDATA[<h4 id="逆序对的个数？"><a href="#逆序对的个数？" class="headerlink" title="逆序对的个数？"></a>逆序对的个数？</h4><pre><code>public class InversePairNum {private int count = 0;private int[] temp;//保存排好序的中间结果，再将结果拷贝到原数组public int resolve(int[] num,int length){    temp = new int[length];    divideSort(num,0,length-1);    return count;}private void divideSort(int[] num, int left, int right) {    if(left &lt; right){        int mid = (left + right)/2;        //分成一个一个元素        divideSort(num,left,mid);        divideSort(num,mid+1,right);        mergeSort(num,left,mid,right);    }}private void mergeSort(int[] num, int left, int mid, int right) {    int leftEnd = mid;    int rightEnd = right;    int tempIndex = right;    //指针从后往前移    while (leftEnd &gt;= left &amp;&amp; rightEnd &gt;= mid + 1) {        if (num[leftEnd] &gt; num[rightEnd]) {            temp[tempIndex--] = num[leftEnd--];            //不是 right - mid 右边的指针是往前挪的            count += rightEnd - mid;        } else {            temp[tempIndex--] = num[rightEnd--];        }    }    //剩余元素    while (leftEnd &gt;= left) {        temp[tempIndex--] = num[leftEnd--];    }    while (rightEnd &gt;= mid + 1) {        temp[tempIndex--] = num[rightEnd--];    }    //利用临时数组temp来使得num数组左右两边都是有序的(递增的)    for (int i = left; i &lt;= right; i++) {        num[i] = temp[i];    }}public static void main(String[] args){    InversePairNum test = new InversePairNum();    int[] num = {4,6,3,1,5,7,2};    System.out.println(test.resolve(num,num.length));}}</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;逆序对的个数？&quot;&gt;&lt;a href=&quot;#逆序对的个数？&quot; class=&quot;headerlink&quot; title=&quot;逆序对的个数？&quot;&gt;&lt;/a&gt;逆序对的个数？&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;public class InversePairNum {

private int
      
    
    </summary>
    
      <category term="数组" scheme="http://www.xuchunfa.cn/categories/%E6%95%B0%E7%BB%84/"/>
    
    
  </entry>
  
  <entry>
    <title>Java笔记</title>
    <link href="http://www.xuchunfa.cn/2018/09/02/EffectiveJava%E7%AC%94%E8%AE%B0/"/>
    <id>http://www.xuchunfa.cn/2018/09/02/EffectiveJava笔记/</id>
    <published>2018-09-02T07:34:14.000Z</published>
    <updated>2018-09-06T11:51:08.040Z</updated>
    
    <content type="html"><![CDATA[<p>1.有时可以用静态工厂方法来代替构造器。</p><p>2.带有私有构造函数的类不能被继承。</p><p>3.如果把那些不会修改的对象放在方法里面的话，要是频繁调用这个方法就会每次创建多余的对象,一种好的方法是在 static{…….} 代码块中初始化这些对象。</p><p>4.如果创建对象的代价非常高，那么此时可以创建对象池，目的是为了重用对象，通常情况下重用对象付出的代价要高于创建对象付出的代价。</p><p>5.为什么静态方法只能访问静态域？</p><pre><code>静态域是属于类的，程序在进行编译的时候就会加载到虚拟机内存的方法区，直到程序退出都会一直存在，而非静态域是和对象挂钩的，需要 new 一个对象，实例域才会在堆中分配内存，对象都还没有怎么能访问非静态域呢？</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1.有时可以用静态工厂方法来代替构造器。&lt;/p&gt;
&lt;p&gt;2.带有私有构造函数的类不能被继承。&lt;/p&gt;
&lt;p&gt;3.如果把那些不会修改的对象放在方法里面的话，要是频繁调用这个方法就会每次创建多余的对象,一种好的方法是在 static{…….} 代码块中初始化这些对象。&lt;/p&gt;

      
    
    </summary>
    
      <category term="java语言基础" scheme="http://www.xuchunfa.cn/categories/java%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
  <entry>
    <title>Lock详解</title>
    <link href="http://www.xuchunfa.cn/2018/08/30/Lock%E8%AF%A6%E8%A7%A3/"/>
    <id>http://www.xuchunfa.cn/2018/08/30/Lock详解/</id>
    <published>2018-08-30T01:19:08.000Z</published>
    <updated>2018-08-31T09:14:28.144Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Lock接口</p></blockquote><p>1.lock()：获取锁。</p><p>2.lockInterruptibly():可中断的获取锁，不同于lock(),在锁的获取中可以中断当前线程。</p><p>3.tryLock()：尝试非阻塞的获取锁。</p><p>4.tryLock(long time, TimeUnit unit)：超时获取锁。</p><p>5.unlock()：释放锁。</p><p>6.newCondition()：获取等待通知组件。</p><h4 id="为什么锁的实现中使用组合同步器而不选择继承呢？"><a href="#为什么锁的实现中使用组合同步器而不选择继承呢？" class="headerlink" title="为什么锁的实现中使用组合同步器而不选择继承呢？"></a>为什么锁的实现中使用组合同步器而不选择继承呢？</h4><blockquote><p>队列同步器</p></blockquote><p>1.同步器是实现锁的关键。锁是面象用户的,用户不需要了解其中的底层原理，同步器是面象锁的,是关于锁实现的原理细节。</p><p>2.队列同步器的实现</p><p>独占式同步状态流程图如下：</p><pre><code>//tryAcquire(arg) == false 则获取同步状态失败，线程进入同步队列public final void acquire(int arg) {    if (!tryAcquire(arg) &amp;&amp;        acquireQueued(addWaiter(Node.EXCLUSIVE), arg))        selfInterrupt();}</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Lock接口&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;1.lock()：获取锁。&lt;/p&gt;
&lt;p&gt;2.lockInterruptibly():可中断的获取锁，不同于lock(),在锁的获取中可以中断当前线程。&lt;/p&gt;
&lt;p&gt;3.tryLock()：
      
    
    </summary>
    
      <category term="Java并发编程" scheme="http://www.xuchunfa.cn/categories/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
    
  </entry>
  
  <entry>
    <title>单例模式的不同写法</title>
    <link href="http://www.xuchunfa.cn/2018/08/28/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%E7%9A%84%E4%B8%8D%E5%90%8C%E5%86%99%E6%B3%95/"/>
    <id>http://www.xuchunfa.cn/2018/08/28/单例模式的不同写法/</id>
    <published>2018-08-28T08:41:34.000Z</published>
    <updated>2018-09-10T11:55:41.728Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>饿汉模式（在调用对象之前就已经初始化了）</p><p>  1.基于类加载的机制（是线程安全的！！！）</p><p>  public class Singleton {</p><p>  private static final Singleton INSTANCE = new Singleton();</p><p>  private Singleton(){}</p><p>  public static Singleton getInstance(){</p><pre><code>return INSTANCE;</code></pre><p>  }<br>  }</p></li></ul><p>这里加final的意思这么理解：</p><p>final关键字可以禁止指令重排，防止在 INSTANCE 还没完全赋值的情况下被使用.</p><p>为什么线程安全参考静态内部单例模式。</p><ul><li><p>懒汉模式（线程不安全）</p><pre><code>   public class Singleton {    private static Singleton instance;    private Singleton (){  }     public static Singleton getInstance() {    if (instance == null) {            instance = new Singleton();    }    return instance;    }  }  </code></pre></li></ul><p>这里为什么不能加final:</p><p>1.因为final static 域必须要（直接赋值）或者（通过静态代码块）来赋值，这样就直接初始化了，没有做到延迟初始化。</p><p>2.如果你是final非static成员，必须在构造器、代码块、或者直接定义赋值；</p><ul><li><p>懒汉模式（线程安全）</p><p>  1.同步开销大,效率不高。</p></li></ul><ul><li><p>双重检查模式（DCL）</p><p>  1.还是会在某些情况下出现DCL失效的情况。</p></li></ul><ul><li><p>静态内部单例模式</p><pre><code>public class Singleton { private Singleton(){    }  public static Singleton getInstance(){      return SingletonHolder.sInstance;  }  private static class SingletonHolder {      private static final Singleton sInstance = new Singleton();  }  }</code></pre></li></ul><hr><p>1.第一次加载Singleton类不会实例化对象,只有在调用getInstance()方法时才会引起SingletonHolder类加载的理解？？？</p><p>1.1 外部类 Singleton 加载的时候静态内部类 SingletonHolder 不会加载，内部类的加载不需要依附外部类，在使用时才会加载。所以当调用内部类 SingletonHolder 的静态域 sInstance 才会引起内部类的加载以及初始化。</p><p>1.2 不过当只调用外部类的静态变量，静态方法时，是不会让静态内部类的被加载。</p><p><strong>2.为什么是线程安全的？？？</strong></p><p>2.1 首先解释一下clinit()方法中包含类中的所有类（static）变量的赋值动作和静态语句块。</p><p>2.2 虚拟机会保证一个类的类构造器clinit()在多线程环境中被正确的加锁、同步，如果多个线程同时去初始化一个类，那么只会有一个线程去执行这个类的类构造器clinit()，其他线程都需要阻塞等待，直到活动线程执行clinit()方法完毕。</p><p>特别需要注意的是，在这种情形下，其他线程虽然会被阻塞，但如果执行clinit()方法的那条线程退出后，其他线程在唤醒之后不会再次进入执行clinit()方法，因为 在同一个类加载器下，一个类型只会被初始化一次。如果在一个类的clinit()方法中有耗时很长的操作，就可能造成多个线程阻塞，在实际应用中这种阻塞往往是隐藏的.</p><pre><code>一句话概括：java虚拟机保证在多线程的环境下类能够被正确加载。</code></pre><ul><li><p>枚举单例模式</p><p>  public enum Singleton {</p><pre><code>INSTANCE;private Singleton() {}</code></pre><p>  }</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;p&gt;饿汉模式（在调用对象之前就已经初始化了）&lt;/p&gt;
&lt;p&gt;  1.基于类加载的机制（是线程安全的！！！）&lt;/p&gt;
&lt;p&gt;  public class Singleton {&lt;/p&gt;
&lt;p&gt;  private static final Singleton IN
      
    
    </summary>
    
      <category term="Java设计模式" scheme="http://www.xuchunfa.cn/categories/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>最长不含重复字符的子字符串</title>
    <link href="http://www.xuchunfa.cn/2018/08/27/%E6%9C%80%E9%95%BF%E4%B8%8D%E5%90%AB%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E5%AD%90%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <id>http://www.xuchunfa.cn/2018/08/27/最长不含重复字符的子字符串/</id>
    <published>2018-08-27T08:34:48.000Z</published>
    <updated>2018-08-27T08:35:50.271Z</updated>
    
    <content type="html"><![CDATA[<h4 id="最长不含重复字符的子字符串？"><a href="#最长不含重复字符的子字符串？" class="headerlink" title="最长不含重复字符的子字符串？"></a>最长不含重复字符的子字符串？</h4><pre><code>public class MaxDistinctSubString {//返回字符串长度public static String resolve(String str,int length){    if(str == null || length &lt; 0){        throw new RuntimeException(&quot;参数非法&quot;);    }    int distance = 0;    int currentLen = 0;    int maxLen = 0;    StringBuffer sb = new StringBuffer();    //用来存放字符在字符串中的最近访问的index    int[] judgeExisted = new int[256];    for(int j = 0;j &lt; judgeExisted.length;j++){        judgeExisted[j] = -1;    }     int startIndex = 0;    for(int i = 0;i &lt; length;i++){        //所有字符0~255        int index =str.charAt(i);        //字符没出现过        if(judgeExisted[index] &lt; 0){            currentLen = currentLen + 1;        }else {            distance = i - judgeExisted[index];            if(distance &lt;= currentLen){//字符出现在子串的中间                currentLen = distance;            }else {//d &gt; currentLen                currentLen = currentLen + 1;            }        }        //更新出现字符的坐标        judgeExisted[index] = i;        if(currentLen &gt; maxLen){            maxLen = currentLen;            //如果出现了重复的字符的话,i会一直前进但maxLen不会变,所以满足条件时,startIndex已经跳过了出现重复的字符。            startIndex = i + 1 - maxLen;        }    }    return str.substring(startIndex,startIndex + maxLen);}public static void main(String[] args){    String str = &quot;arabcacfrg&quot;;    System.out.println(MaxDistinctSubString.resolve(str,str.length()));}</code></pre><p>}</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;最长不含重复字符的子字符串？&quot;&gt;&lt;a href=&quot;#最长不含重复字符的子字符串？&quot; class=&quot;headerlink&quot; title=&quot;最长不含重复字符的子字符串？&quot;&gt;&lt;/a&gt;最长不含重复字符的子字符串？&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;public class M
      
    
    </summary>
    
      <category term="动态规划" scheme="http://www.xuchunfa.cn/categories/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
    
  </entry>
  
  <entry>
    <title>最大子数组</title>
    <link href="http://www.xuchunfa.cn/2018/08/27/%E6%9C%80%E5%A4%A7%E5%AD%90%E6%95%B0%E7%BB%84/"/>
    <id>http://www.xuchunfa.cn/2018/08/27/最大子数组/</id>
    <published>2018-08-27T08:30:36.000Z</published>
    <updated>2018-08-27T08:33:04.475Z</updated>
    
    <content type="html"><![CDATA[<h4 id="连续子数组的最大和"><a href="#连续子数组的最大和" class="headerlink" title="连续子数组的最大和?"></a>连续子数组的最大和?</h4><pre><code>public class MaxSubArraySum {public static int resolve(int[] array,int length){    if(array == null || length &lt; 0){        throw new RuntimeException(&quot;参数不合法&quot;);    }    int maxSub = 0;    int currentSum = 0;    //循环的思想解决动态规划问题    for(int i = 0;i&lt;length;i++){        //如果之前的和小于0的话,那么当前和应该从下一个数开始        if(currentSum &lt;= 0){            currentSum = array[i];        }else {            currentSum = currentSum + array[i];        }        //判断子数组的最大值        if(currentSum &gt; maxSub){            maxSub = currentSum;        }    }    return maxSub;}public static void main(String[] args){    int[] arr = {-1,2,3,-4,5,6,-7,9};    System.out.println(MaxSubArraySum.resolve(arr,arr.length));}}</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;连续子数组的最大和&quot;&gt;&lt;a href=&quot;#连续子数组的最大和&quot; class=&quot;headerlink&quot; title=&quot;连续子数组的最大和?&quot;&gt;&lt;/a&gt;连续子数组的最大和?&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;public class MaxSubArraySum {

p
      
    
    </summary>
    
      <category term="动态规划" scheme="http://www.xuchunfa.cn/categories/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
    
  </entry>
  
  <entry>
    <title>1到n的数组中和为m的所有组合</title>
    <link href="http://www.xuchunfa.cn/2018/08/26/1%E5%88%B0n%E7%9A%84%E6%95%B0%E7%BB%84%E4%B8%AD%E5%92%8C%E4%B8%BAm%E7%9A%84%E6%89%80%E6%9C%89%E7%BB%84%E5%90%88/"/>
    <id>http://www.xuchunfa.cn/2018/08/26/1到n的数组中和为m的所有组合/</id>
    <published>2018-08-26T13:18:06.000Z</published>
    <updated>2018-09-06T11:18:06.390Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1到n的数组中和为m的所有组合？"><a href="#1到n的数组中和为m的所有组合？" class="headerlink" title="1到n的数组中和为m的所有组合？"></a>1到n的数组中和为m的所有组合？</h4><pre><code>public class SumOfKnumber {public static void findKNumber(int sum, int n, int[] combine,int index){    //index 最大取到 n    if(index &gt; n || index &gt; sum)        return;    if(index == sum){        combine[index-1] = index;        printResult(combine);        //还可以作为其他组合的元素        combine[index-1] = 0;        return;    }    //选择i    combine[index-1] = index;    findKNumber(sum-index, n, combine, index+1);    //i被放弃    combine[index-1] = 0;    findKNumber(sum,n,combine,index+1);}private static void printResult(int[] combine) {    for(int i = 0;i &lt; combine.length;i++){        if(combine[i] != 0){            System.out.print(combine[i] + &quot; &quot;);        }    }    System.out.println();}public static void main(String[] args){    int[] combine = new int[7];    SumOfKnumber.findKNumber(10,7,combine,1);}}</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;1到n的数组中和为m的所有组合？&quot;&gt;&lt;a href=&quot;#1到n的数组中和为m的所有组合？&quot; class=&quot;headerlink&quot; title=&quot;1到n的数组中和为m的所有组合？&quot;&gt;&lt;/a&gt;1到n的数组中和为m的所有组合？&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;public
      
    
    </summary>
    
      <category term="动态规划" scheme="http://www.xuchunfa.cn/categories/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
    
  </entry>
  
  <entry>
    <title>字符串匹配算法</title>
    <link href="http://www.xuchunfa.cn/2018/08/25/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8C%B9%E9%85%8D%E7%AE%97%E6%B3%95/"/>
    <id>http://www.xuchunfa.cn/2018/08/25/字符串匹配算法/</id>
    <published>2018-08-25T10:26:54.000Z</published>
    <updated>2018-08-25T10:27:47.880Z</updated>
    
    <content type="html"><![CDATA[<ul><li>KMP算法</li></ul><ul><li>BM算法</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;KMP算法&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;BM算法&lt;/li&gt;
&lt;/ul&gt;

      
    
    </summary>
    
      <category term="字符串" scheme="http://www.xuchunfa.cn/categories/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
    
  </entry>
  
  <entry>
    <title>虚拟机字节码执行引擎</title>
    <link href="http://www.xuchunfa.cn/2018/08/24/%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AD%97%E8%8A%82%E7%A0%81%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/"/>
    <id>http://www.xuchunfa.cn/2018/08/24/虚拟机字节码执行引擎/</id>
    <published>2018-08-24T12:48:13.000Z</published>
    <updated>2018-08-28T03:52:34.489Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>栈帧</p></blockquote><ul><li><p>局部变量表</p><p>  1.一个局部变量定义了但没有赋初值是不可以使用的.</p></li><li><p>操作数栈</p></li><li><p>动态连接</p></li><li><p>方法返回地址</p><p>  1.方法退出等效于当前栈帧出栈.如返回果有值的话,则将返回值压入调用者栈帧的操作数栈中.</p></li><li><p>附加信息</p></li></ul><p>其中动态连接,方法返回地址,附加信息统称为<strong>栈帧信息</strong>.</p><blockquote><p>方法调用</p></blockquote><p>一切方法调用在Class文件里面存储的都是符号引用,不是方法在实际运行时内存布局中的入口地址.</p><ul><li><p>解析</p><pre><code>方法在程序真正运行之前就有一个可确定的调用版本, 并且这个方法的调用版本在运行期间不可改变.符合以上条件的方法:1.静态方法2.私有方法3.实例构造器4.父类方法它们在类加载的时候就会把符号引用解析成直接引用.</code></pre></li></ul><ul><li>分派</li></ul><p>1.静态分派(方法重载)</p><p>1.1 java语言中的返回值不参与重载选择。</p><p>重载：“编译期绑定”，也叫编译期多态。方法重载主要是类内部多态性的一个体现。 </p><p>例如:</p><pre><code>public class O{static class A{}static class B extends A{}static class C extends A{}public void a(A a){    System.out.println(&quot;A method&quot;);}public void a(B b){    System.out.println(&quot;B method&quot;);}public void a(C c){    System.out.println(&quot;C method&quot;);}public static void main(String[] args){    O o = new O();    A b = new B();    A c = new C();    o.a(b);    o.a(c);}}</code></pre><p>上述代码的结果:</p><p>A method</p><p>A method</p><p><strong>虚拟机在重载时是通过参数的静态类型而不是实际类型作为判断依据.</strong></p><p>2.动态分派（方法重写）</p><p>重写：“运行期绑定”，也叫运行期多态。方法重写是父类与子类之间多态性的体现。</p><pre><code>在运行期间根据实际类型确定方法执行版本的分派。</code></pre><p>例如：</p><pre><code>class Dog{public void bark(){    System.out.println(&quot;woof &quot;);}}class Hound extends Dog{public void sniff(){    System.out.println(&quot;sniff &quot;);}public void bark(){    System.out.println(&quot;bowl&quot;);}}public class OverridingTest{public static void main(String [] args){    Dog dog = new Hound();    dog.bark();}}    </code></pre><p>输出：bowl</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;栈帧&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;局部变量表&lt;/p&gt;
&lt;p&gt;  1.一个局部变量定义了但没有赋初值是不可以使用的.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;操作数栈&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;动态连接&lt;/p&gt;
&lt;/
      
    
    </summary>
    
      <category term="java虚拟机" scheme="http://www.xuchunfa.cn/categories/java%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
    
  </entry>
  
  <entry>
    <title>数组中和为m的所有组合</title>
    <link href="http://www.xuchunfa.cn/2018/08/24/%E6%95%B0%E7%BB%84%E4%B8%AD%E5%92%8C%E4%B8%BAm%E7%9A%84%E6%89%80%E6%9C%89%E7%BB%84%E5%90%88/"/>
    <id>http://www.xuchunfa.cn/2018/08/24/数组中和为m的所有组合/</id>
    <published>2018-08-24T10:09:40.000Z</published>
    <updated>2018-09-09T08:50:42.720Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="动态规划" scheme="http://www.xuchunfa.cn/categories/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
    
  </entry>
  
  <entry>
    <title>随机版本的快排</title>
    <link href="http://www.xuchunfa.cn/2018/08/24/%E9%9A%8F%E6%9C%BA%E7%89%88%E6%9C%AC%E7%9A%84%E5%BF%AB%E6%8E%92/"/>
    <id>http://www.xuchunfa.cn/2018/08/24/随机版本的快排/</id>
    <published>2018-08-24T04:24:16.000Z</published>
    <updated>2018-08-24T04:25:37.975Z</updated>
    
    <content type="html"><![CDATA[<pre><code>public class QuickSort {public static void swap(int[] a,int i,int j){    int temp;    temp = a[i];    a[i] = a[j];    a[j] = temp;}public static int partition(int[] a,int start,int end){    if(a == null || start &lt; 0 || end &gt; a.length-1){        throw new RuntimeException(&quot;参数不合法&quot;);    }    //轴值在[start,end]区间内随机生成,然后把轴值交换到数组中第一位    rand_pivot(a,start,end);    int i = start;    int j = end;    int pivot = a[start];    while (i &lt; j){        while (i &lt; j &amp;&amp; a[j] &gt;= pivot){            j--;        }        //a[i] = a[j];//这种写法时条件不能为a[j] &gt; pivot必须要 &gt;=        swap(a,i,j);        while (i &lt; j &amp;&amp; a[i] &lt;= pivot){            i++;        }        //a[j] = a[i];        swap(a,j,i);    }    //a[i] 或者 a[j]    //a[i] = pivot;    return i;}//随机化的选择主元private static void rand_pivot(int[] a, int start, int end) {    Random random = new Random();    int rand = start + random.nextInt(end - start + 1);//随机函数生成的整数区间在[0,length)    //交换第一个数和随机选出来的数    int temp = a[start];    a[start] = a[rand];    a[rand] = temp;}public static void quickSort(int[] a,int start,int end){    if(start &gt;= end)        return;    int index = partition(a,start,end);    quickSort(a,start,index-1);    quickSort(a,index+1,end);    /*int index;    if(start &lt; end){        index = partition(a,start,end);        quickSort(a,start,index-1);        quickSort(a,index+1,end);    }*/}public static void main(String[] args){    int[] a = {2,4,5,1,1,2,7,6,3};    QuickSort.quickSort(a,0,a.length-1);    System.out.println(Arrays.toString(a));}}</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;pre&gt;&lt;code&gt;public class QuickSort {

public static void swap(int[] a,int i,int j){
    int temp;
    temp = a[i];
    a[i] = a[j];
    a[j] 
      
    
    </summary>
    
      <category term="排序" scheme="http://www.xuchunfa.cn/categories/%E6%8E%92%E5%BA%8F/"/>
    
    
  </entry>
  
</feed>
