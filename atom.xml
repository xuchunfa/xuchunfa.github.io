<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Flying in the ocean of knowledge</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.xuchunfa.cn/"/>
  <updated>2019-04-01T08:32:56.505Z</updated>
  <id>http://www.xuchunfa.cn/</id>
  
  <author>
    <name>Xu chunfa</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>判断大于n的最小2的n次方的整数</title>
    <link href="http://www.xuchunfa.cn/2019/04/01/%E5%88%A4%E6%96%AD%E5%A4%A7%E4%BA%8En%E7%9A%84%E6%9C%80%E5%B0%8F2%E7%9A%84n%E6%AC%A1%E6%96%B9%E7%9A%84%E6%95%B4%E6%95%B0/"/>
    <id>http://www.xuchunfa.cn/2019/04/01/判断大于n的最小2的n次方的整数/</id>
    <published>2019-04-01T07:33:00.000Z</published>
    <updated>2019-04-01T08:32:56.505Z</updated>
    
    <content type="html"><![CDATA[<pre><code>  //时间复杂度：O(n)public int find(int n){    if(n == 0 || ((n-1)&amp;n) == 0){        return n;    }    int flag = 1;    while (flag &lt; n){        flag &lt;&lt;= 1;    }    return flag;}//最快的办法//时间复杂度：public int find1(int n){    n--;    n |= n &gt;&gt; 1;//右移优先于或    n |= n &gt;&gt; 2;    n |= n &gt;&gt; 4;    n |= n &gt;&gt; 8;    n |= n &gt;&gt; 16;    n++;    return n;}</code></pre><p><strong>小于n的最小2的n次方的整数</strong></p><pre><code>//小于n的最小2的n次方的整数public int small(int n){    int result = 0;    for(int i = n;i &gt;= 0;i--){        if(((i-1) &amp; i) == 0){            result = i;            break;        }    }    return result;}    </code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;pre&gt;&lt;code&gt;  //时间复杂度：O(n)
public int find(int n){
    if(n == 0 || ((n-1)&amp;amp;n) == 0){
        return n;
    }
    int flag = 1;
    while 
      
    
    </summary>
    
      <category term="位运算" scheme="http://www.xuchunfa.cn/categories/%E4%BD%8D%E8%BF%90%E7%AE%97/"/>
    
    
  </entry>
  
  <entry>
    <title>判断整数是否是2的整数次方</title>
    <link href="http://www.xuchunfa.cn/2019/04/01/%E5%88%A4%E6%96%AD%E6%95%B4%E6%95%B0%E6%98%AF%E5%90%A6%E6%98%AF2%E7%9A%84%E6%95%B4%E6%95%B0%E6%AC%A1%E6%96%B9/"/>
    <id>http://www.xuchunfa.cn/2019/04/01/判断整数是否是2的整数次方/</id>
    <published>2019-04-01T07:03:02.000Z</published>
    <updated>2019-04-01T07:04:53.038Z</updated>
    
    <content type="html"><![CDATA[<pre><code>//整数为0返回falseclass Solution {    public boolean checkPowerOf2(int n) {        if (n &lt; 1) {            return false;        } else {            return (n &amp; (n - 1)) == 0;    }}};</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;pre&gt;&lt;code&gt;//整数为0返回false
class Solution {
    public boolean checkPowerOf2(int n) {
        if (n &amp;lt; 1) {
            return false;
      
      
    
    </summary>
    
      <category term="位运算" scheme="http://www.xuchunfa.cn/categories/%E4%BD%8D%E8%BF%90%E7%AE%97/"/>
    
    
  </entry>
  
  <entry>
    <title>计算机网络基础</title>
    <link href="http://www.xuchunfa.cn/2019/03/28/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/"/>
    <id>http://www.xuchunfa.cn/2019/03/28/计算机网络基础/</id>
    <published>2019-03-28T01:07:05.000Z</published>
    <updated>2019-03-29T08:28:53.920Z</updated>
    
    <content type="html"><![CDATA[<p>1.TCP/IP vs OSI模型？</p><p><img src="https://i.imgur.com/6Lm1zUA.png" alt=""></p><p><img src="https://i.imgur.com/qDA1cTG.png" alt=""></p><pre><code>OSI:    1.清楚的区分服务、接口和协议，但实现起来困难；    2.网络层支持无连接和面向连接，传输层只支持面向连接的通信；TCP/IP:    1.网络层只支持无连接的通信，传输层同时支持连接和无连接；</code></pre><p>2.传输层</p><pre><code>2.1 传输层为应用进程之间提供了端对端的逻辑通信;网络层为主机之间提供逻辑通信；</code></pre><p>2.可靠传输的原理？</p><p>重传机制：</p><pre><code>1.发送完一个分组后要暂时保存已发送分组的副本；2.分组和确认分组需要进行编号；3.重传时间应当比数据在分组传输的平均往返时间更长一些；</code></pre><p>确认丢失和确认迟到：</p><pre><code>1.接收方丢弃重复的M1，重传确认M1;2.发送方丢弃收到的重复确认；</code></pre><p>3.UDP和TCP的报文段？</p><p><img src="https://i.imgur.com/SrXYECp.png" alt=""></p><p>字段解释：</p><pre><code>1.序号：本报文段的字节流数据中一个字节的序号；2.确认号：期望收到对方下一个报文段的第一个数据字节的序号；3.数据偏移：TCP报文段的首部字段；4.控制位    4.1 ACK:ACK=1确认字段才有效；    4.2 RST:RST=1拒绝一个非法的报文段或拒绝打开一个连接；    4.3 SYN:SYN=1 ACK=0表示连接请求报文段，SYN=1 ACK=1表示同意建立连接；    4.4 FIN:FIN=1表示此报文段发送发送方的数据已发送完毕，要求释放连接；5.窗口：允许发送方发送的数据量；</code></pre><p>4.滑动窗口模型</p><p>发送缓存VS发送窗口VS接收缓存VS接收窗口？</p><pre><code>1.对接收窗口中不按序到达的数据，接收方只能对按序收到了的数据中的最高序号给出确认；2.TCP要求接受方必须有累积确认功能，确认推迟的时间不应超过0.5秒；</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1.TCP/IP vs OSI模型？&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/6Lm1zUA.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/qDA1cTG.png&quot; alt=&quot;&quot;&gt;&lt;/p
      
    
    </summary>
    
      <category term="面试总结" scheme="http://www.xuchunfa.cn/categories/%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/"/>
    
      <category term="计算机网络" scheme="http://www.xuchunfa.cn/categories/%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
  </entry>
  
  <entry>
    <title>S型打印二叉树</title>
    <link href="http://www.xuchunfa.cn/2019/03/27/S%E5%9E%8B%E6%89%93%E5%8D%B0%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <id>http://www.xuchunfa.cn/2019/03/27/S型打印二叉树/</id>
    <published>2019-03-27T13:36:02.000Z</published>
    <updated>2019-03-27T13:39:30.982Z</updated>
    
    <content type="html"><![CDATA[<h2 id="S型打印二叉树？"><a href="#S型打印二叉树？" class="headerlink" title="S型打印二叉树？"></a>S型打印二叉树？</h2><pre><code>//S型层次遍历public void levelSOrder(BinaryTreeNode p){    Stack&lt;BinaryTreeNode&gt; stack1 = new Stack&lt;&gt;();    Stack&lt;BinaryTreeNode&gt; stack2 = new Stack&lt;&gt;();    int currentLevel = 1;    if(p != null){        stack1.push(p);    }    while(!stack1.isEmpty() || !stack2.isEmpty()){        int levelNumber = !stack1.isEmpty()?stack1.size():stack2.size();        for(int i = 0;i &lt; levelNumber;i++){            if((currentLevel &amp; 1) == 1){                p = stack1.pop();                System.out.print(p.data + &quot; &quot;);                if(p.right != null){                    stack2.push(p.right);                }                if(p.left != null){                    stack2.push(p.left);                }                if(stack1.empty()){                    currentLevel++;                }            }else {                p = stack2.pop();                System.out.print(p.data + &quot; &quot;);                if(p.left != null){                    stack1.push(p.left);                }                if(p.right != null){                    stack1.push(p.right);                }                if(stack2.empty()){                    currentLevel++;                }            }        }        System.out.println();    }}</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;S型打印二叉树？&quot;&gt;&lt;a href=&quot;#S型打印二叉树？&quot; class=&quot;headerlink&quot; title=&quot;S型打印二叉树？&quot;&gt;&lt;/a&gt;S型打印二叉树？&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;//S型层次遍历
public void levelSOrder(Binar
      
    
    </summary>
    
      <category term="树" scheme="http://www.xuchunfa.cn/categories/%E6%A0%91/"/>
    
    
  </entry>
  
  <entry>
    <title>未优化快排</title>
    <link href="http://www.xuchunfa.cn/2019/03/24/%E6%9C%AA%E4%BC%98%E5%8C%96%E5%BF%AB%E6%8E%92/"/>
    <id>http://www.xuchunfa.cn/2019/03/24/未优化快排/</id>
    <published>2019-03-24T12:10:30.000Z</published>
    <updated>2019-03-24T12:13:22.888Z</updated>
    
    <content type="html"><![CDATA[<pre><code>//有序数组直接选择第一个元素作轴效果不理想public class NormalQuickSort {public int partion(int[] a,int start,int end){    int pivot = a[start];    int i = start;    int j = end;    while (i &lt; j){        while (i &lt; j &amp;&amp; a[j] &gt;= pivot){            j--;        }        a[i] = a[j];        while (i &lt; j &amp;&amp; a[i] &lt;= pivot){            i++;        }        a[j] = a[i];    }    a[i] = pivot;    return i;}public void sort(int[] a,int start,int end){    if(start &lt; end){        int partition = partion(a,start,end);        sort(a,start,partition-1);        sort(a,partition+1,end);    }}@Testpublic void test(){    int[] a = {6,4,3,3,1,2,9,5};    sort(a,0,a.length-1);    System.out.println(Arrays.toString(a));}}    </code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;pre&gt;&lt;code&gt;//有序数组直接选择第一个元素作轴效果不理想
public class NormalQuickSort {

public int partion(int[] a,int start,int end){
    int pivot = a[start];
 
      
    
    </summary>
    
      <category term="排序" scheme="http://www.xuchunfa.cn/categories/%E6%8E%92%E5%BA%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>面试总结--计算机网络</title>
    <link href="http://www.xuchunfa.cn/2019/02/23/%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    <id>http://www.xuchunfa.cn/2019/02/23/面试总结-计算机网络/</id>
    <published>2019-02-23T01:57:49.000Z</published>
    <updated>2019-03-31T07:26:00.902Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>TCP和UDP的区别？</p><pre><code>1.TCP面向连接的，UDP无连接的。2.TCP传输可靠，UDP尽最大努力交付；TCP是全双工的可靠信道，UDP不可靠信道；通过TCP连接传送的数据，无差错，不丢失，不重复，且按序到达3.TCP面向字节流，UDP面向报文。UDP不对报文作处理，一次交付一个完整的报文；4.TCP连接是点对点的，UDP支持一对一、一对多、多对一和多对多。&quot;点&quot;代表的是socket(IP:PORT)；5.TCP首部20个字节，UDP是8个字节；</code></pre><p> TCP的特点：</p><pre><code>可靠、稳定、慢、效率低、占用系统资源高。</code></pre><p> UDP的特点：</p><pre><code>1.传递数据快、不可靠丢包、快速递交比精准递交更重要，例如：视频语音；</code></pre><p> 相关问题解释：</p><pre><code>1.TCP连接的发送方和接收方都有缓存，TCP不关心发送到TCP发送方缓存的报文长度，它会根据对方的窗口值和网络拥塞情况来决定一个报文段包含有多少字节。2.TCP发送方发送4个数据块，接收方可能2个数据块就能把字节流传到应用层；</code></pre></li><li><p>TCP如何保证可靠性，拥塞控制如何实现？</p><pre><code>1.确认和重传；2.数据校验；3.数据合理分片；4.流量控制：    1.当接收方来不及处理发送方的数据，能通过滑动窗口，提示发送方降低发送的速率，防止包丢失。    2.利用可变窗口rwnd值的变化来进行流量控制；5.拥塞控制；    5.1 慢开始和拥塞避免        1.慢开始（指数）：由小到大增加拥塞窗口的值，每经过一个传输轮次，拥塞窗口加倍；        2.拥塞避免（线性）：cwnd缓慢增大，每经过一个往返时间RRT就把发送方的拥塞窗口cwnd值加1；        3.加法增大乘法减小（AIMD）:&quot;乘法减小&quot;即不论在慢开始阶段还是在拥塞避免阶段，只要出现超时就把满开始门限ssthresh减半；        &quot;加法增大&quot;即执行拥塞避免算法使cwnd缓慢增大；    5.2 快重传和快恢复        1.快重传：接收方每收到一个失序的报文段后就立即发出重复确认，当发送方一连收到3个重复确认就立即重传对方尚未接收到的报文段。        2.快恢复：收到3个重复确认后，ssthresh减半，把cwnd的值设为ssthresh减半后的值；</code></pre></li></ol><ol start="3"><li><p>输入URL浏览器发生了什么？</p><pre><code>1.DNS域名解析找到IP地址；    1.1 解析顺序：本地域名服务器、根域名服务器、顶级域名服务器、权限域名服务器;    1.2 主机向本地域名服务器的查询采用的是递归查询，即替该主机继续查询，本地域名服务器向根域名服务器的查询采用的是迭代查询；    1.3 根域名服务器的作用：告诉本地域名服务器下一步去哪一个顶级域名服务器查询；2.TCP连接服务端和客户端；3.发送HTTP请求；4.服务器处理请求；5.返回响应结果；6.关闭TCP连接（长连接的时候不关闭）；7.浏览器解析HTML;8.浏览器布局渲染。</code></pre><p> 3.HTTP协议和TCP/IP协议区别？</p><pre><code>1.HTTP协议是应用层协议，主要解决如何包装数据；TCP/IP协议是运输层协议解决数据如何在网络中传输。</code></pre></li></ol><ol start="4"><li><p>进程和线程的区别？</p><pre><code>1.进程是资源（CPU、内存、磁盘等等）分配的基本单位，线程是调度（程序执行的）的基本单位。进程是是实实在在看得见的，Ctrl+Shift+Esc显示进程。2.同一进程的各个线程共享该进程的内存资源。但是当一个线程使用某些共享内存时，其他线程必须等待。3.进程有自己的独立地址空间，同一进程里的线程享有相同的地址空间；进程切换代价昂贵，线程切换代价小。4.多进程程序更强壮，多线程程序只要有一个线程挂了，进程就死掉了，但不会影响其他进程。</code></pre></li></ol><ol start="5"><li><p>进程的通信方式？</p><pre><code>1.管道：半双工、数据单向流动、具有亲缘关系（父子进程）的进程间。其中命名管道允许不具有亲缘关系的进程通信。2.信号量：计数器、控制多个进程访问共享资源。3.消息队列：克服了信号承载信号量小，管道只能承载无格式字节流以及缓冲区大小受限的缺点。4.信号：通知接受事件发生。5.共享内存：最快IPC通信、结合信号量使用。6.套接字（socket）：可用于不同机器间的进程通信。</code></pre></li><li><p>TCP的三次握手和四次挥手以及为什么是四次挥手？</p><p> 总结：</p><pre><code>1.第一次握手：标志位SYN=1 ACK=0,client_sequence=i,客户端SYN_SEND状态；2.第二次握手：检查并设置标志位ACK=1 SYN=1和发送确认序号ack number=i+1 server_sequence=j,服务端SYN_RECV状态；3.第三次握手：检查标志位ACK=1和发送确认序号ack=j+1和client_sequence=i+1,（有序）客户端进入ESTABLISH状态.(这里要是出现ack丢失的情况不会重传没有数据的ack,而是重传第二次握手时的数据)当服务端收到确认号以后，服务端进入到ESTABLISH状态，此时TCP连接才正式建立起来。</code></pre><p> 三次握手注意地方：</p><pre><code>1.ACK=1时ack number才有效；2.SYN(SYN=1)报文段不能携带数据；3.为什么最后一次还要发送确认？  主要是为了防止已经失效的连接请求报文段突然又传到服务端；第一次的连接请求因为网络原因延迟达到，服务器会认为是新的连接请求，  于是发出确认报文段建立连接，但客户端不会理会发过来的确认，所以建立的TCP连接浪费了，而如果有了最后一次确认，  客户端就不会向服务端发出确认，服务端就能知道客户端根本没有请求建立连接。4.几个状态？  客户端：SYN_SEND、ESTABLISHED.  服务端：SYN_RECV、ESTABLISHED.</code></pre></li></ol><pre><code>四次挥手：    4.第一次挥手: FIN=1,seq=u,客户端FIN_WAIT1状态；    5.第二次挥手：ACK=1 seq=v,ack=u+1,服务端CLOSED_WAIT状态（关闭服务器读通道）；客户端收到ACK进入FIN_WAIT2状态（关闭客户端写通道）；    6.第三次挥手：服务端发送完数据以后，向客户端发送FIN=1 ACK=1 seq=w ack=u+1,服务端进入到LAST_ACK状态；    7.第四次挥手：ACK=1 seq=u+1 ack=w+1，客户端进入TIME_WAIT状态（关闭客户端读通道），服务器收到ACK后（关闭服务器写通道）；注：    1.TIME_WAIT=2MSL(Maximum Segment Lifetime最长报文寿命)的原因？        1.1 保证Client最后发送的ACK报文段能够到达Server;假如立即关闭的话，ACK报文如果丢失，Server会重传FIN + ACK报文，Client无法收到重传报文段，于是Server无法进入CLOSED状态；        1.2 防止本次连接中失效的连接请求报文段进入到下一次TCP连接中去，通过这段持续时间能让本次连接产生的所有报文段从网络中消失；    2.为什么是4次挥手？        2.1 因为TCP是全双工模式。前两次挥手是关闭Client到Server的传输通道，此时Client仍然可以接收Server的数据；后两次挥手是关闭Server到Client的传输通道；        2.2 这里把ACK报文和FIN报文分开发是为了确保数据能完整得到传输。当收到对方的FIN报文通知时，它仅仅表示对方没有数据发送给你了；但未必你所有的数据都全部发送给对方了，所以你可以未必会马上会关闭SOCKET,也即可能你还需要发送一些数据给对方之后，再发送FIN报文给对方来表示你同意现在可以关闭连接了。    3.TCP第三次握手ACK丢失后的处理？        ACK丢失，服务端的TCP连接的撞状态为SYN_RECV，等待3s、6s、12s后重新发送SYN+ACK包，其中服务端重新发送SYN+ACK的次数默认值是5，如果仍未收到ACK,一段时间后服务端自动关闭这个连接，但是Client认为这个连接已经建立，如果Client端向Server写数据，Server端将以RST包(用于强制关闭tcp连接)响应，方能感知到Server的错误。    4.状态变化        客户端：ESTABLISHED、FIN_WAIT1、FIN_WAIT2、TIME_WAIT、CLOSED;        服务端：ESTABLISHED、CLOSE_WAIT、LAST_ACK、CLOSED;</code></pre><p>参考文献：</p><p><a href="https://blog.csdn.net/smileiam/article/details/78226816" target="_blank" rel="noopener">TCP的三次握手、四次挥手</a>        </p><ol start="7"><li>http协议？http和https的区别？http的结构及状态码？</li></ol><pre><code>1.http请求结构    1.1 请求行        eg:POST /addStudent/addStu.html HTTP/1.1    1.2 请求头        Accept:客户端接受什么类型的响应；eg:text/html        Cache-Control:响应数据在客户端的缓存控制；        Connection:请求完成后是否关掉TCP连接；eg:keep-alive;        Content-Type:请求的内容类型；eg:application/x-www-form-urlencoded标准的编码格式；        Cookie:保存server发送过来的set-Cookie内容；    1.3 请求体        eg:name=xuchunfa&amp;gender=male&amp;age=182.http响应结构    2.1 响应行        eg:HTTP/1.1 200 OK    状态码：        成功状态码：            1.1 200 OK:处理成功；            1.2 204 No Content:请求处理成功，但没有资源返回；        重定向状态码：            2.1 301 Moved Permanently:请求的网页已被永久移动到新位置。            2.2 302 Found:服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。            2.3 303 See Other:请求者应当对不同的位置使用单独的 GET 请求来检索响应时;            2.4 304 Not Modify:告诉客户端，你请求的这个资源至你上次取得后，并没有更改，你直接用你本地的缓存吧;            2.5 305 Use Proxy：必须通过代理访问资源，代理的地址在Response的Location中        客户端错误状态码：            4.1 400 Bad Request:请求报文中存在语法错误；            4.2 401 Unauthorized：未授权，需要有通过Http认证的认证信息；            4.3 403 Forbidden:访问被拒绝；            4.4 404 Not Found:页面不存在（无法找到请求资源）；            4.5 405 Method not allowed：禁用请求中指定的方法；        服务器错误状态码：            5.1 500 Internal Server Error：服务器内部发生错误；            5.2 501 Not Implemented:客户端发起的请求超出服务器的能力范围;            5.2 503 Service Unavailable：服务器处于超负荷或者正在停机维护；            5.3 505 HTTP Version Not Supported:不支持的HTTP版本；    2.2 响应头        Access-Control-Allow-Origin：响应头指定了该响应的资源是否被允许与给定的origin共享；eg:*表示允许所有域都具有访问资源的权限；        Location:指定的是需要将页面重新定向至的地址;        Set-cookie:服务器端向客户端发送的cookie；3.http协议    1.生成针对目标Web服务器的HTTP请求报文；    2.http协议是无状态的协议，服务器不会记录客户端的信息，解放了服务器但可能会传输大量重复信息。通过Cookie来维系客户端和服务器之间的状态。、4.http和https区别     1.HTTPS协议由HTTP+SSL(Secure Sockets Layer)协议构建的可进行加密传输数据、身份认证的网络协议。    2.HTTP端口号80，HTTPS端口号443;5.HTTPS工作原理    1.客户端发起HTTPS请求，三次握手；    2.服务端配置。配置数字证书，即公钥和密钥；    3.服务端传送证书。即传送公钥给客户端；    4.客户端解析证书。证书是否有效，是否过期，有效则提取出公钥；    5.传输加密信息。浏览器随机生成一个对称加密的密钥k（临时会话密钥），密钥k是在客户端和服务端共享的，用证书中的公钥加密k,得到密文k&apos;；    6.服务端解密信息。用私钥拿到k，并使用密钥k加密传输的数据；    7.传输服务端加密后的信息；    8.客户端解密信息。使用共享密钥k解密数据。</code></pre><p>7.HTTP1.0/HTTP1.1/HTTP2.0的区别?</p><pre><code>1.HTTP1.1默认长连接Connection:keep-alive,HTTP1.0 每次请求都要创建连接；2.HTTP1.x的解析是基于文本，而HTTP2.0是基于二进制格式；3.HTTP1.1中若干个请求排队串行化单线程处理，后面的请求等待前面请求的返回才能获得执行机会，一旦有某请求超时等，后续请求只能被阻塞；HTTP2.0中多个请求可同时在一个连接上并行执行，某个请求任务耗时严重，不会影响到其它连接的正常执行；4.HTTP2.0中压缩header;5.HTTP2.0中实现服务端的推送，即服务端推送能把客户端所需要的资源伴随着index.html一起发送到客户端，减少了客户端重复请求的步骤，大大提升了速度；</code></pre><p>参考文献：</p><p><a href="https://blog.csdn.net/u010256388/article/details/68491509" target="_blank" rel="noopener">HTTP请求行、请求头、请求体详解</a>    </p><ol start="8"><li><p>Get请求和Post请求有什么区别？</p><pre><code>1.Get请求的数据会附在URI之后，Post把提交的数据放在HTTP请求体中；2.Get的长度受受限于浏览器URI的长度(2K个字节)，所以一般来说，GET请求传递的数据要比POST请求少；3.POST比GET安全性高。4.GET请求参数会被完整保留在浏览器历史记录里，而POST中的参数不会保留；5.GET只接受ASCII字符，POST没有限制；6.GET产生一个数据包：对于GET方式的请求，浏览器会把http header和data一并发送出去，服务器响应200（返回数据  POST请求产生二个数据包：浏览器先发送header，服务器响应100 continue，浏览器再发送data，服务器响应200 OK（返回数据）</code></pre></li></ol><ol start="9"><li><p>Session和Cookie的区别？</p><pre><code>Session:服务器端保存的数据结构；可以放在内存、数据库、文件中等；Session的实现对客户端Cookie有依赖关系。Cookie:客户端保存用户信息的机制，有限制，不能超过3K，实现Session的一种方式，如果Cookie被禁用会通过URL重写的技术来进行会话跟踪，uri后面会附有sid=...的信息；总结:1.cookie不安全，存在客户端硬盘上；session cookie存储在浏览器内存，是针对某一次会话而言；2.Cookie根据响应报文头中的Set-Cookie信息，通知客户端保存Cookie.</code></pre></li></ol><p>10.select和epoll的原理和区别？<br>11.协议层有哪些？说说五层协议、OSI、TCP/IP模型？</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;&lt;p&gt;TCP和UDP的区别？&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1.TCP面向连接的，UDP无连接的。

2.TCP传输可靠，UDP尽最大努力交付；TCP是全双工的可靠信道，UDP不可靠信道；通过TCP连接传送的数据，无差错，不丢失，不重复，且按序到达

3.TCP
      
    
    </summary>
    
      <category term="面试总结" scheme="http://www.xuchunfa.cn/categories/%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/"/>
    
      <category term="计算机网络" scheme="http://www.xuchunfa.cn/categories/%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
  </entry>
  
  <entry>
    <title>面试总结--操作系统</title>
    <link href="http://www.xuchunfa.cn/2019/02/23/%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    <id>http://www.xuchunfa.cn/2019/02/23/面试总结-操作系统/</id>
    <published>2019-02-23T01:56:09.000Z</published>
    <updated>2019-03-26T13:50:12.006Z</updated>
    
    <content type="html"><![CDATA[<ol><li>操作系统的内存管理机制？</li><li>CPU飙升怎么定位问题？</li><li>LRU算法？</li><li>性能调优看哪些命令？</li><li>操作系统有哪些页面置换算法？</li><li>线程和进程如何创建？</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;操作系统的内存管理机制？&lt;/li&gt;
&lt;li&gt;CPU飙升怎么定位问题？&lt;/li&gt;
&lt;li&gt;LRU算法？&lt;/li&gt;
&lt;li&gt;性能调优看哪些命令？&lt;/li&gt;
&lt;li&gt;操作系统有哪些页面置换算法？&lt;/li&gt;
&lt;li&gt;线程和进程如何创建？&lt;/li&gt;
&lt;/ol&gt;

      
    
    </summary>
    
      <category term="面试总结" scheme="http://www.xuchunfa.cn/categories/%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/"/>
    
      <category term="操作系统" scheme="http://www.xuchunfa.cn/categories/%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
  </entry>
  
  <entry>
    <title>面试总结--Spring框架基础</title>
    <link href="http://www.xuchunfa.cn/2019/02/18/%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93-Spring%E6%A1%86%E6%9E%B6%E5%9F%BA%E7%A1%80/"/>
    <id>http://www.xuchunfa.cn/2019/02/18/面试总结-Spring框架基础/</id>
    <published>2019-02-18T12:18:34.000Z</published>
    <updated>2019-03-23T13:59:46.487Z</updated>
    
    <content type="html"><![CDATA[<ol><li>AOP和IOC原理？</li><li>Spring怎样解决循环依赖的问题？</li><li>DispatchServlet怎样分发任务的？</li><li>注解的原理？</li><li>Spring的入口？</li><li>SpringMVC 的 Controller 中返回值有哪些？</li><li><p>Servlet 和 JSP 的区别？</p><pre><code>1.Servlet控制业务流程，JSP动态生成网页；2.JSP第一次被访问时会被容器编译为Servlet类；3.Servlet接受Tomcat发送过来的request和response;</code></pre><p> Servlet的四大域对象：</p><pre><code>1.Page域：作用域为整个JSP页面；2.Request域：一次请求一个request;3.Session域：一次会话一个session;4.Application域：作用于整个服务器端，服务器开启对象创建，关闭服务器对象销毁；例如ServletContext通过request.getServletContext（)获得；</code></pre><p> JSP的九大内置对象：</p><pre><code>1.request、response、pageContext、session、application、out、config、page、exception;</code></pre></li><li><p>Servlet创建的过程？</p></li></ol><ol start="8"><li><p>Servlet中的filter？</p><p> 生命周期：</p><pre><code>1.init()2.doFilter(ServletRequest req,ServletResponse resp,Filterchain chain)3.destroy()</code></pre></li></ol><ol start="9"><li><p>Servlet的生命周期，Servlet是单例的，如何判断？为什么要设计成单例的？</p><p> 生命周期：</p><pre><code>1.加载Servlet类并创建实例，若存在则不会创建了；2.init():每个Servlet只会被初始化一次；3.service():执行Post/GET/DELETE等等请求方法；4.destroy():仅执行一次；</code></pre><p> Servlet单实例多线程</p><pre><code>1.设计成单例减少了创建Servlet实例的开销；2.容器每接收到一个请求就会通过线程池分配到一个线程，同一请求的多个线程并发执行；3.所以为了线程安全最好不要在Servlet中用实例变量，或使用synchronied同步；4.不要使用线程不安全的集合；</code></pre><p> Servlet如何处理多个请求同时访问？</p><pre><code>1.Servlet加载实例化；2.容器初始化Servlet;3.Servlet容器通过调度线程给处理请求；4.线程执行service()方法；5.请求结束，放回线程池，等到被调用；</code></pre></li></ol><ol start="10"><li><p>Servlet中的变量是否需要加锁？</p><p>实例变量需要考虑同步。</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;AOP和IOC原理？&lt;/li&gt;
&lt;li&gt;Spring怎样解决循环依赖的问题？&lt;/li&gt;
&lt;li&gt;DispatchServlet怎样分发任务的？&lt;/li&gt;
&lt;li&gt;注解的原理？&lt;/li&gt;
&lt;li&gt;Spring的入口？&lt;/li&gt;
&lt;li&gt;SpringMVC 的 Co
      
    
    </summary>
    
      <category term="面试总结" scheme="http://www.xuchunfa.cn/categories/%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/"/>
    
      <category term="Spring框架基础" scheme="http://www.xuchunfa.cn/categories/%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/Spring%E6%A1%86%E6%9E%B6%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
  <entry>
    <title>面试总结--Java集合</title>
    <link href="http://www.xuchunfa.cn/2019/02/18/%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93-Java%E9%9B%86%E5%90%88/"/>
    <id>http://www.xuchunfa.cn/2019/02/18/面试总结-Java集合/</id>
    <published>2019-02-18T12:16:24.000Z</published>
    <updated>2019-03-26T13:27:50.791Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>可以用foreach循环直接删除ArrayList的特定元素吗？可能会出现什么问题？怎样解决？</p><pre><code>1.会抛ConcurrentModificationException异常，使用foreach会在内部创建迭代器，在使用next()方法时，会检查modCount != expectedModCount，前者发生了变化而后者没有故报错。2.使用自身迭代器解决上述问题。</code></pre></li></ol><ol start="2"><li>HashMap put()元素产生冲突，为什么用LinkedList（拉链法）而不用ArrayList解决，产生冲突时key值不等，新元素怎样加入链表，为什么这么设计（jdk1.8之前）？</li><li>Vector、ArrayList以及LinkedList？</li></ol><p>注意：</p><pre><code>1.remove(int index)设计到了本地方法：    System.arraycopy(array(数据要被拷贝的数组),srcPos(数据被拷贝的起始坐标)，destArray(目的数组)，destPos(目的数组的起始坐标)，len(要被拷贝的数据的长度))；</code></pre><p>总结：</p><pre><code>1.LinkedList底层双向链表，Node&lt;E&gt;节点，first和last指针，插入删除效率高，不需要扩容；2.ArrayList底层数组结构,数组动态扩容，无参构造数组大小为0，当添加第一个元素后，数组扩容为10，当添加第11个元素时进行扩容newCap = oldCap + oldCap*1.5,通过Arrays.copyOf(elementData,newCapacity)返回新数组；</code></pre><ol start="4"><li>HashMap线程不安全的原因？</li></ol><p>参考文献：</p><p><a href="http://www.importnew.com/22011.html" target="_blank" rel="noopener">HashMap线程不安全的体现</a>注：最后一步 next=null </p><p>不安全原因在于多线程发生扩容时：</p><pre><code>void resize(int newCapacity) {    Entry[] oldTable = table;    int oldCapacity = oldTable.length;    if (oldCapacity == MAXIMUM_CAPACITY) {        threshold = Integer.MAX_VALUE;        return;    }    Entry[] newTable = new Entry[newCapacity];    transfer(newTable, initHashSeedAsNeeded(newCapacity));    table = newTable;    threshold = (int)Math.min(newCapacity * loadFactor, MAXIMUM_CAPACITY + 1);}//多线程会形成循环链表void transfer(Entry[] newTable, boolean rehash) {    int newCapacity = newTable.length;    for (Entry&lt;K,V&gt; e : table) {        while(null != e) {            Entry&lt;K,V&gt; next = e.next;            if (rehash) {                e.hash = null == e.key ? 0 : hash(e.key);            }            int i = indexFor(e.hash, newCapacity);            e.next = newTable[i];//头插法时间复杂度低，但由于会反序导致线程不安全            newTable[i] = e;            e = next;        }    }</code></pre><p>5.关于concurrentHashMap的理解</p><p><a href="http://www.xuchunfa.cn/2018/08/08/ConcurrentHashMap%E7%9A%84%E7%90%86%E8%A7%A3/">concurrentHashMap JDK1.7和JDK1.8的理解</a></p><p>注意：</p><pre><code>1.JDK1.8 和JDK1.7 concurrentHashMap不允许key或value为null  当你通过get(k)获取对应的value时，如果获取到的是null时，你无法判断，它是put（k,v）的时候value为null，还是这个key从来没有做过映射;2.JDK1.7 concurrentHashMap的每个Segment中含有一个  transient volatile HashEntry&lt;K,V&gt;[]table，保证了entryAt/setEntryAt的可见性；</code></pre><p>总结：</p><pre><code>1.JDK1.8中的concurrentHashMap大量使用CAS算法，即无锁化的修改值的操作。算法思想：比较当前内存中的变量值与指定的expect变量的值是否相等，相等则修改expect变量的值为new value.2.JDK1.8 concurrentHashMap的put操作：    2.1 通过casTabAt(tab, i, null,new Node&lt;K,V&gt;(hash, key, value, null)方法中的        U.compareAndSwapObject(tab, ((long)i &lt;&lt; ASHIFT) + ABASE, c, v)CAS方法        在表头Node&lt;K,V&gt;[] table中插入节点；    2.2 采用synchronized + CAS的思想。synchronized锁住的是hash值相等的链表tab[i]的头节点；    2.3 采用尾插法插入新节点；3.JDK1.8 concurrentHashMap的get操作：    3.1 读操作没有加锁。key的hash值小于0就去红黑树中查找；hash值大于0就去链表中查找。    3.2 利用volatile线程可见性 (Node&lt;K,V&gt;)U.getObjectVolatile(tab,i);4.JDK1.7 concurrentHashMap的put操作：    4.1 获取segment的位置后尝试获取锁，获取到锁后node=null;没获取到锁的线程则通过scanAndLockForPut尝试获取锁；    4.2 scanAndLockForPut的思想是：通过自旋不断获取segment的锁，并在获取的过程中遍历链表，        没有找到和key equals的HashEntry则创建一个HashEntry并在获取到锁后返回它，当尝试次数超过        最大尝试次数MAX_SCAN_RETRIES则加锁等待。    4.3 因为插入节点采用的头插法，所以在scanAndLockForPut会判断first有无发生变化，发生变化（有线        程加入节点）则重新遍历链表；5.JDK1.7 concurrentHashMap的get操作：    5.1 读操作没有加锁。通过volatile读语义保证可见性。只有当put和remove调用    setEntryAt（table,i）方法后（已经释放锁），读操作才能读到变化的table;    5.2 通过UNSAFE.getObjectVolatile(table,i)获得Segment&lt;K,V&gt;或HashEntry&lt;K,V&gt;[]的表头节点    保证了线程之间的可见性；</code></pre><p>6.关于HashMap的理解</p><p>注意：</p><pre><code>1.JDK1.7 和 JDK1.8 的hashMap都允许key为null,放在table[0]里面；</code></pre><p>总结：</p><pre><code>1.JDK1.8 HashMap的resize操作：    1.1 新的数组长度和Threshold是旧数组对应原值的两倍；    1.2 旧数组中链表在新数组中的位置确定方法：        //loHead和loTail维护在新数组中位置不变的链表        //hiHead和hiTail维护在新数组中位置发生变化的链表        if(hash &amp; oldCap == 0){            newTab[j] = loHead;//在新数组中的位置保持不变        }else{            newTab[j+oldCap] = hiHead;//在新数组中的位置变成j+oldCap        } 2.JDK1.8 HashMap的get和put操作：    2.1 新加了红黑树的数据结构；3.JDK1.7 HashMap的resize操作：    3.1 重新计算每个元素在新数组中的位置，采用头插法插入元素到新数组中，线程不安全；4.JDK1.7 HashMap的get和put操作：    4.1 普通链表结构；</code></pre><p>7.TreeMap的实现原理？</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;&lt;p&gt;可以用foreach循环直接删除ArrayList的特定元素吗？可能会出现什么问题？怎样解决？&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1.会抛ConcurrentModificationException异常，使用foreach会在内部创建迭代器，在使用next(
      
    
    </summary>
    
      <category term="面试总结" scheme="http://www.xuchunfa.cn/categories/%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/"/>
    
      <category term="java集合" scheme="http://www.xuchunfa.cn/categories/%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/java%E9%9B%86%E5%90%88/"/>
    
    
  </entry>
  
  <entry>
    <title>面试总结--Linux基础</title>
    <link href="http://www.xuchunfa.cn/2019/02/18/%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93-Linux%E5%9F%BA%E7%A1%80/"/>
    <id>http://www.xuchunfa.cn/2019/02/18/面试总结-Linux基础/</id>
    <published>2019-02-18T12:13:51.000Z</published>
    <updated>2019-02-18T12:27:23.930Z</updated>
    
    <content type="html"><![CDATA[<ol><li>cpu 100%怎样定位？</li><li>进程间通信的方式有哪些？</li><li></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;cpu 100%怎样定位？&lt;/li&gt;
&lt;li&gt;进程间通信的方式有哪些？&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;

      
    
    </summary>
    
      <category term="面试总结" scheme="http://www.xuchunfa.cn/categories/%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/"/>
    
      <category term="Linux基础" scheme="http://www.xuchunfa.cn/categories/%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/Linux%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
  <entry>
    <title>面试总结--Mysql基础</title>
    <link href="http://www.xuchunfa.cn/2019/02/18/%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93-Mysql%E5%9F%BA%E7%A1%80/"/>
    <id>http://www.xuchunfa.cn/2019/02/18/面试总结-Mysql基础/</id>
    <published>2019-02-18T11:54:38.000Z</published>
    <updated>2019-03-26T13:45:11.816Z</updated>
    
    <content type="html"><![CDATA[<ol><li>B树（B-树）和B+树是解决什么样的问题的，怎样演化过来，之间区别？</li></ol><p><a href="https://segmentfault.com/a/1190000004690721" title="B/B+树的结构示意图" target="_blank" rel="noopener">B/B+树的结构示意图</a></p><pre><code>1.作为文件系统以及数据库系统的索引结构；2.B树的关键字和data域放在了一起；3.B+树data域全放在叶子节点上，叶子节点增加了一个链指针。</code></pre><ol start="2"><li>Mysql给离散度低的字段建立索引会出现什么问题，具体说下原因？</li><li>数据库事务特性以及四个隔离级别，Mysql属于哪一种？</li></ol><p><a href="https://www.hollischuang.com/archives/943" title="隔离级别详解" target="_blank" rel="noopener">隔离级别详解</a></p><pre><code>1.事务特性：原子性、一致性、隔离性和持久性；2.事务隔离级别：    2.1 读未提交：出现脏读，读取另一个未提交事务的数据；    2.2 读已提交：造成不可重复读，即在同一个事务中读到两次不同的结果；    2.3 可重复读：出现幻读，一个事务中读取的数据一致；</code></pre><p>幻读的例子：</p><p><img src="https://i.imgur.com/DUI0Os9.png" alt=""></p><pre><code>    2.4 串行化：最高隔离级别。出现以下现象：        1.事务1正在（强调正在）读取A表中的记录时，则事务2也能读取A表，但不能对A表做更新、新增、删除，直到事务1结束。(因为事务一对表增加了表级共享锁，其他事只能增务加共享锁读取数据，不能进行其他任何操作）        2.事务1正在更新A表中的记录时，则事务2不能读取A表的任意记录，更不可能对A表做更新、新增、删除，直到事务1结束。（事务一对表增加了表级排他锁，其他事务不能对表增加共享锁或排他锁，也就无法进行任何操作）3.MySQL的默认隔离级别：可重复读；</code></pre><ol start="4"><li>索引有哪几种？索引的好处？什么时候用？索引的原理？</li></ol><p><a href="https://www.jianshu.com/p/2b541c028157" title="MySQL索引使用" target="_blank" rel="noopener">MySQL索引使用</a></p><pre><code>1.普通索引    eg:ALTER TABLE stu add INDEX index_id(id);</code></pre><p>使用索引前：</p><p><img src="https://i.imgur.com/qnwHm9Q.png" alt=""></p><p>使用索引后：</p><p><img src="https://i.imgur.com/CuYvDQi.png" alt=""></p><pre><code>2.唯一索引：索引列的值必须唯一，但允许为空。    eg:ALTER TABLE stu add UNIQUE index_id(id);3.主键索引：特殊的唯一索引，索引列的值不允许为空。</code></pre><p><img src="https://i.imgur.com/UvVpFDi.png" alt=""></p><pre><code>4.组合索引：默认最左前缀的结果。    eg:alter table stu add index id_name_note(id,name(10),note);     相当于分别建立了：    1.（id,name,note）索引    2.（id,name）索引    3.（id）索引</code></pre><p>索引失效的情况：</p><pre><code>1.“%aaa%” 不会使用索引,而like “aaa%”可以使用索引;2.在列上进行运算将会使索引失效；3.MySQL查询只使用一个索引，因此如果where子句中已经使用了索引的话，那么order by中的列是不会使用索引的。</code></pre><ol start="7"><li>数据库引擎有哪些？说说他们的区别？</li><li></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;B树（B-树）和B+树是解决什么样的问题的，怎样演化过来，之间区别？&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a href=&quot;https://segmentfault.com/a/1190000004690721&quot; title=&quot;B/B+树的结构示意图&quot; target=&quot;
      
    
    </summary>
    
      <category term="面试总结" scheme="http://www.xuchunfa.cn/categories/%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/"/>
    
      <category term="Mysql基础" scheme="http://www.xuchunfa.cn/categories/%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/Mysql%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
  <entry>
    <title>面试总结--Java设计模式</title>
    <link href="http://www.xuchunfa.cn/2019/02/18/%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93-Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>http://www.xuchunfa.cn/2019/02/18/面试总结-Java设计模式/</id>
    <published>2019-02-18T11:52:34.000Z</published>
    <updated>2019-02-18T11:54:07.303Z</updated>
    
    <content type="html"><![CDATA[<ol><li>写一个你认为最好的单例模式？</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;写一个你认为最好的单例模式？&lt;/li&gt;
&lt;/ol&gt;

      
    
    </summary>
    
      <category term="面试总结" scheme="http://www.xuchunfa.cn/categories/%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/"/>
    
      <category term="Java设计模式" scheme="http://www.xuchunfa.cn/categories/%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>面试总结--Java并发编程</title>
    <link href="http://www.xuchunfa.cn/2019/02/18/%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93-Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    <id>http://www.xuchunfa.cn/2019/02/18/面试总结-Java并发编程/</id>
    <published>2019-02-18T11:48:38.000Z</published>
    <updated>2019-04-01T01:58:59.851Z</updated>
    
    <content type="html"><![CDATA[<ol><li>线程创建的方法？</li></ol><ol><li>ReadWriteLock读写之间互斥吗？</li><li>说说ReentrantLock是基于哪个类的？说说队列同步器？</li><li>Semaphore拿到执行权的线程之间是否互斥？</li><li>写一个生产者消费者模式？</li><li><p>写一个死锁？</p><p> public class DeadLock {<br> static class SynAddRunnable implements Runnable{</p><pre><code>private int a,b;public SynAddRunnable(int a,int b){    this.a = a;    this.b = b;}@Overridepublic void run() {    synchronized (Integer.valueOf(a)){        synchronized (Integer.valueOf(b)){            System.out.println(a + b);        }    }}</code></pre><p> }<br> public static void main(String[] args) {</p><pre><code>for (int i = 0; i &lt; 1000; i++) {    new Thread(new SynAddRunnable(1,2)).start();    new Thread(new SynAddRunnable(2,1)).start();}</code></pre><p> }<br> }</p></li><li><p>死锁的产生的原因以及怎么预防？ </p></li><li>int a = 1; 是原子性操作吗？</li><li>新的任务提交到线程池，线程池是怎样处理？</li><li>线程池有哪几种？核心参数有哪几个？线程池的拒绝策略有哪几种？</li><li>AQS和CAS原理？</li><li>synchronized底层实现原理？</li><li>synchronized和lock的区别？</li><li>volatile作用，指令重排相关？</li><li>锁有哪几种？</li></ol><p>参考：</p><p><a href="http://www.xuchunfa.cn/2018/07/24/volatile%E8%AF%AD%E4%B9%89%E5%92%8Cfinal%E8%AF%AD%E4%B9%89%E7%9A%84%E7%90%86%E8%A7%A3/">volatile理解</a></p><p><a href="https://www.itcodemonkey.com/article/1725.html" target="_blank" rel="noopener">小灰漫画volatile</a></p><pre><code>1.volatile变量在线程之间具有可见性；基于CPU的内存屏障实现的。2.volatile变量禁止指令重排；3.每个volatile写操作前插入StoreStore屏障，写操作之后插入StoreLoad屏障；4.每个volatile读操作前插入LoadLoad屏障，读操作之后插入LoadStore屏障；</code></pre><p>9.java内存模型？</p><p><img src="https://i.imgur.com/7yPyszl.png" alt=""></p><pre><code>1.JMM是一种规范，用于决解由于多线程通过共享内存（主存）进行通信时，存在本地内存数据不一致，编译器对代码指令重排等带来的问题。2.java并发编程中保证原子性、可见性和有序性的方法：    原子性：synchronized保证方法和代码块内的操作是原子性的。    可见性：synchronized、volatile和final关键字；    有序性：synchronized关键字；3.happens-before原则（8个）：    3.1 程序次序规则：单线程内顺序发生；    3.2 锁定规则：unlock操作先于对同一个锁的lock操作；    3.3 volatile规则：对volatile变量的写操作先于读操作；    3.4 传递规则:A先于B，B先于C，则A先于C；    3.5 线程启动规则：Thread对象的start()先于该线程的每一个动作；    3.6 线程中断规则：对线程interrupt()方法的调用先行发生于被中断线程的代码检测到中断事件的发生；    3.7 线程终结规则：线程中所有的操作都先行发生于线程的终止检测，我们可以通过Thread.join()方法结束、Thread.isAlive()的返回值手段检测到线程已经终止执行；    3.8 对象终结规则：一个对象的初始化完成先行发生于他的finalize()方法的开始；</code></pre><ol start="10"><li>ReentrantLock 是可重入锁，什么是可重入锁？</li><li>线程执行过程中遇到异常会发生什么，怎样处理？</li><li>java创建线程的方式？</li><li>线程的状态？</li></ol><p><img src="https://i.imgur.com/zSkw6Xh.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;线程创建的方法？&lt;/li&gt;
&lt;/ol&gt;
&lt;ol&gt;
&lt;li&gt;ReadWriteLock读写之间互斥吗？&lt;/li&gt;
&lt;li&gt;说说ReentrantLock是基于哪个类的？说说队列同步器？&lt;/li&gt;
&lt;li&gt;Semaphore拿到执行权的线程之间是否互斥？&lt;/li&gt;

      
    
    </summary>
    
      <category term="面试总结" scheme="http://www.xuchunfa.cn/categories/%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/"/>
    
      <category term="Java并发编程" scheme="http://www.xuchunfa.cn/categories/%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
    
  </entry>
  
  <entry>
    <title>面试总结--Java语言基础</title>
    <link href="http://www.xuchunfa.cn/2019/02/18/%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93-Java%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/"/>
    <id>http://www.xuchunfa.cn/2019/02/18/面试总结-Java语言基础/</id>
    <published>2019-02-18T11:41:52.000Z</published>
    <updated>2019-03-29T13:47:50.122Z</updated>
    
    <content type="html"><![CDATA[<ol><li>private修饰的方法可以通过反射访问，那么private的意义何在？</li><li><p>局部变量使用前需要显式地赋值，否则编译通过不了，为什么这么设计？</p><pre><code>约束限制，减少出错。</code></pre></li><li><p>接口和抽象的区别？</p><pre><code>1.抽象类里面可以拥有成员变量和自己的非抽象方法，接口中成员默认为public static final，所有方法都是抽象的。2.抽象是通过发现子类公有的成员和方法，将其抽出来形成抽象类；而实现接口的子类可能不存在任何联系。即抽象类是自底向上设计的，接口是自顶向下设计的。3.门和报警器的例子。将门抽象为一个类，实现报警功能的接口。抽象类是一种“is-a”的关系，接口代表的是“like-a”的关系。</code></pre></li><li><p>重写和重载的区别？</p><p> 重载：</p><pre><code>1.函数名相同，参数列表不同；2.前期绑定，即编译期绑定，编译器确定调用哪个方法；</code></pre><p> 重写：</p><pre><code>1.子类重写父类中的方法，函数名和参数列表都相同;2.动态绑定，多态</code></pre></li><li><p>Object类有哪些方法？以及具体用到哪？</p><pre><code> 1.getClass()、hashCode()、equals(Object)、clone()、toString()、notify()、notifyAll()、wait(long)、wait(）、finalize();2.wait()和notify():生产者消费者模式中常用到；</code></pre></li></ol><ol start="6"><li><p>java的浅拷贝和深拷贝？</p><p> 浅拷贝：</p><pre><code>1.属性为引用类型，拷贝的是内存地址，如果一个对象改变了引用对象指向的对象的内容，那么拷贝对象中也会发生变化；2.的确创建了一个对象；</code></pre><p> 深拷贝：</p><pre><code>1.重写引用对象的克隆方法，即可实现深拷贝；</code></pre><p> 总结：</p><pre><code>如果一个对象内部只有基本数据类型，那用 clone() 方法获取到的就是这个对象的深拷贝，而如果其内部还有引用数据类型，那用 clone() 方法就是一次浅拷贝的操作。</code></pre></li></ol><ol start="7"><li><p>equals和==的区别以及hashcode和equals之间的关系？</p><pre><code>1.==表示地址是否相等，equals表示内容是否相等；</code></pre><p> hashcode和equals之间的关系：</p><pre><code>1.两个对象equals相等，则hashcode相等；2.两个对象hashcode相等，equals不一定相等；3.当equals()被重写的时候，hashcode（）也要被重写，保证相等的对象的hashcode相等；4.java的集合中通常使用equals（）判断对象是否相等，使用hashcode能够加快效率；</code></pre></li></ol><p>8.StringBuffer和StringBuilder的区别？</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;private修饰的方法可以通过反射访问，那么private的意义何在？&lt;/li&gt;
&lt;li&gt;&lt;p&gt;局部变量使用前需要显式地赋值，否则编译通过不了，为什么这么设计？&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;约束限制，减少出错。
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
      
    
    </summary>
    
      <category term="面试总结" scheme="http://www.xuchunfa.cn/categories/%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/"/>
    
      <category term="java语言基础" scheme="http://www.xuchunfa.cn/categories/%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/java%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
  <entry>
    <title>面试总结-Java虚拟机</title>
    <link href="http://www.xuchunfa.cn/2019/02/18/%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93-Java%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    <id>http://www.xuchunfa.cn/2019/02/18/面试总结-Java虚拟机/</id>
    <published>2019-02-18T11:32:52.000Z</published>
    <updated>2019-03-18T07:36:08.611Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>Java类加载以及类初始化顺序？</p><pre><code>1.类加载的生命周期：加载、连接（验证、准备、解析）、初始化、使用、卸载。2.类初始化（类加载）的时机：    2.1 new 关键字、直接调用类的静态变量、静态方法（final修饰符除外);    2.2 类的反射调用，method.invoke(obj,agrs)初始化实例obj对应类;    2.3 初始化父类；(接口初始化不会初始化父类)    2.4 main方法所属类；3.细分一下加载的生命周期：    3.1 验证（文件格式验证、元数据验证、字节码验证、符号引用验证）    3.2 准备（设置类变量的初始值）    3.3 解析（类或接口的解析、字段解析、类方法解析、接口方法解析）4.类初始化的顺序：    4.1  &lt;clinit&gt;()方法收集类中所有类变量和静态代码块初始化，父类优于子类而且在多线程环境下初始化时虚拟机保证只有一个线程去执行初始化方法，且只初始化一次。    4.2 父类静态代码块---父类静态成员变量（这两个顺序先后按代码先后顺序出现）---子类静态代码块---子类静态成员变量---父类实例变量代码块---父类实例变量---子类实例变量代码块---子类实例变量---父类构造函数---子类构造函数</code></pre></li></ol><ol start="3"><li>对方法区和永久区解的理以及它们之间关系的理解？</li><li><p>一个java文件有3个类，编译后有几个class文件？</p><pre><code>答：3个。</code></pre></li><li><p>JVM GC算法的前戏？</p><p> 首先弄清楚判断对象是否存活的算法：</p><pre><code>1.引用计数算法。对象被引用一次，计数值加1，引用失效，计数值减1，当计数值为0时回收。缺点：无法解决循环引用的问题。2.可达性分析算法。对象到GC Roots 不可达则回收，反之不回收。2.1 可作为GC Roots的对象：    1.虚拟机栈（栈帧中）引用的对象。    2.方法区类静态属性引用的对象。    3.方法区常量引用的对象。    4.native方法中引用的对象。</code></pre><p> 永久代收集的什么垃圾？</p><pre><code>1.废弃常量。没有任何引用。2.无用的类。所有实例都被回收、类加载器被回收、对象没有在任何地方引用。、</code></pre></li><li><p>JVM GC算法核心内容？</p><pre><code>1.标记-回收算法。判断是否存活，标记并清除。缺点：    1.1 标记和回收效率低。    1.2 大量内存碎片。2.复制算法。将内存分为两块，只用其中一块，然后将存活对象复制到空的那块内存。优点：    2.1 效率高。    2.2 没有内存碎片。（有点疑问？）缺点：    2.1 只有一半内存可用，代价大。解决办法是划分为1个Eden2个Survivor(比例8:1:1)只有10%空间没用。这样做的缺点是万一存活对象大于10%则必须依赖老年代进行分配担保。    2.2 不适合对象存活率高的情况，这样频繁复制影响效率。适合新生代，不适合老年代。3.标记-整理算法。所有存活对象移动到一边，清除边界外的内存。优点：    3.1 适合老年代对象存活率高的情况。4.分代回收算法。新生代采用复制算法，老年代采用标记-整理或标记清除算法。</code></pre><p> 总结：</p><pre><code>Java垃圾回收一般是采用分代回收的，将java堆分成老年代和新生代。新生代特点对象存活率低，采用复制算法，老年代反之采用标记-整理/标记-清除算法。</code></pre></li><li><p>JVM 垃圾收集器核心内容？</p><p> 首先看个整体图，连线表示可以搭配使用。</p><p> <img src="https://i.imgur.com/4mNb2Rd.png" alt=""></p><p> 新生代（复制算法）：</p><pre><code>1.Serial 收集器优点：    1.1 单线程、单CPU效率高、适合Client模式。缺点：    1.1 暂停所有工作线程（STW）,会有不良体验。2.ParNew 收集器优点：    2.1 多线程收集、适合Server模式。    2.1 除Serial外，唯一可以和CMS组合使用的收集器。缺点：    2.1 仍然不可避免STW。3.Parallel Scavenge 收集器 优点：    3.1 吞吐量可控、自适应调节策略。</code></pre><p> 老年代：</p><pre><code>4.Serial Old 收集器（标记-整理）优点：    4.1 单线程、单CPU效率高、适合Client模式。缺点：    4.1 暂停所有工作线程（STW）,会有不良体验。5.Parallel Old 收集器（标记-整理）优点：    5.1 多线程，搭配 Parallel Scavenge 使用效率高，适合Server端。6.CMS 收集器（标记-清除）整个过程：    1.初始标记（STW）    2.并发标记    3.重新标记（STW）    4.并发清除优点：    6.1 最少回收停顿时间。因为在并发标记和并发清除时，用户线程和收集线程并发工作。缺点：    6.1 多线程多CPU资源敏感。CPU不足时，垃圾收集线程占CPU将近50%，这大大降低了用户程序的执行速度。    6.2 无法处理浮动垃圾。浮动垃圾指在并发清除时，用户线程新产生的垃圾。由于这些垃圾的产生所以在设置-XX:CMSInitiatingOccupancyFraction（启动CMS时内存的阈值）时得注意给CMS    收集线程预留内存，否则会出现“Concurrent Model Failure”,临时启用Serial Old（单线程），性能下降。    6.3 会产生内存碎片。通过设置-XX：+UseCMSCompactAtFullCollection参数，在要进行Full GC时碎片整理。默认值为0表示每次要进入Full GC 时进行碎片整理。7.G1收集器</code></pre></li></ol><p><a href="https://www.cnblogs.com/duanxz/p/6102580.html" target="_blank" rel="noopener">G1 收集器的详解</a></p><pre><code>重点部分总结：7.1 Region区域图解如下：</code></pre><p><img src="https://i.imgur.com/aM4TR6l.png" alt=""></p><pre><code>    1.划分Region区域（默认2048），逻辑连续物理不连续，每个Region大小范围1M到32M(2的n次方)是通过参数堆的大小和Region个数计算出来的。其中humongous代表一组连续的Region区域，    用于存放大小超过默认Region大小50%的对象。7.2 年轻代的回收模式    1.主要是对Eden区进行GC，会发生Stop The World事件、同时会计算Eden和Survivor的大小7.3 mix GC模式    mixed gc中也有一个阈值参数 -XX:InitiatingHeapOccupancyPercent，当老年代大小占整个堆大小百分比达到该阈值时，会触发一次mixed gc.    步骤：        1.初始标记(STW)        2.并发标记        3.最终标记（STW）        4.筛选回收7.3 Full GC模式：单线程、全局扫描堆然后标记清除代价昂贵。优点：    1.解决了CMS中内存碎片的问题。    2.能够在指定时间片内优先回收价值最大的Region。</code></pre><p>5.哪些对象会进入到老年代？</p><pre><code>1.大对象。对Serial和parNew收集器而言，参数-XX:PretenureSizeThreshold代表对象大小如果大于它的值，则直接分配到老年代。2.年龄达到阈值（默认15岁）。Minor GC 进入到Survivor，此时年龄为1，继续存活年龄将不断增加。3.动态年龄判定。Surviovr区中年龄相等的对象占了整个Survivor大小的一半以上，则年龄大于或等于该年龄的对象将进入老年代。4.空间分配担保。如果晋升到老年代的对象的平均大小 小于 老年代的剩余空间则发生担保，Eden内的所有存活对象进入到老年代，否则担保失败，发生Full GC.(比Minor GC 慢10倍)</code></pre><ol start="5"><li>Java内存结构？ </li></ol><p><img src="https://i.imgur.com/SwBcYyJ.png" alt=""></p><pre><code>JVM内存溢出情况：</code></pre><p><img src="https://i.imgur.com/FFDc1GQ.png" alt=""></p><pre><code>1.线程共享：方法区（永久代）和堆区。2.线程私有：虚拟机栈（栈内存）、程序计数器和本地方法栈（native方法）。3.堆内存存放内容：java对象、数组。4.方法区存放内容：常量、静态变量、虚拟机加载的类信息和即时编译器编译后的代码。注：4.1 运行时常量池（常量池）是方法区的一部分。4.2 Class文件内容组成：类的版本、字段、方法、接口等描述信息和常量池；常量池放编译期生成的(.class文件)各种字面量和符号引用。5.对象的内存布局：对象头、实例数据和对齐填充。对象头包括：哈希码、GC分代年龄、锁状态标志、线程持有的锁等。</code></pre><ol start="6"><li>Object object = new Object(); 初始化的顺序是什么？在JVM各区域做了什么？</li></ol><p><a href="https://blog.csdn.net/Rainnnbow/article/details/52149586https://blog.csdn.net/Rainnnbow/article/details/52149586" target="_blank" rel="noopener">new之后JVM都做了什么？</a></p><pre><code>步骤：1.检查类加载2.堆中分配内存，初始化为零（除对象头）3.设置对象对象头信息4.程序中自定义的数据</code></pre><ol start="7"><li>加载器双亲委派模型及破坏？</li></ol><p>结构图：</p><p><img src="https://i.imgur.com/VlCH2P5.png" alt=""></p><pre><code>1.启动类加载器（Bootstrap ClassLoader）:加载jdk/jre/目录下的类库jar包，例如rt.jar，C++实现在java里面无法获取；2.拓展类加载器（Extension ClassLoader）:加载jdk/jre/ext/目录下的jar包。3.应用程序类加载器（系统类加载器）（Application ClassLoader)：加载用户配置的classpath路径下的类库。</code></pre><p>不考虑多线程时的核心代码：</p><pre><code>protected synchronized Class&lt;?&gt; loadClass(String name,boolean resolve){    //检查类是否被加载    Class&lt;?&gt; c = findLoadedClass(name);    if(c == null){        try{            if(parent != null){                c = parent.loadClass(name,false);            }else{                c = findBootstrapClassOrNull(name);//启动类加载器            }        }catch(ClassNotFoundException e){        }    if(c == null){        c = findClass(name);//调用本身的findclass方法进行类加载    }    if(resolve == true){        resolveClass(c);    }    return c;    }}</code></pre><p>破坏双亲委派模型例子：</p><pre><code>JNDI服务，JDNI是使用启动类加载器加载的，调用classpath下的JNDI接口提供者（SPI,Service Provider Interface）的代码，引入了线程上下文类加载器（默认是系统类加载器），由它去加载SPI代码，打破了双亲委派模型，出现了父类加载器请求子类加载器去完成类加载动作。</code></pre><ol start="8"><li><p>JVM 新生代为什么分为eden区和survivor区？为什么是8：1：1，为什么会有两个suvivor区？</p><p> <a href="https://blog.csdn.net/antony9118/article/details/51425581#commentBox" target="_blank" rel="noopener">为什么新生代内存需要有两个Survivor区？</a></p></li><li><p>syn锁，jvm里面分成偏向锁、轻量级锁、重量级锁，其之间的转换过程是怎么样的，各自适用场景是什么样的，偏向锁情况产生竞争一定会膨胀成轻量级锁吗，为什么只能单向转换，比如偏向锁变成轻量级锁变成重量级锁之后不会在竞争消失之后在回到偏向锁，必须要重启jvm才行，是出于什么情况考虑的？</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;&lt;p&gt;Java类加载以及类初始化顺序？&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1.类加载的生命周期：

加载、连接（验证、准备、解析）、初始化、使用、卸载。

2.类初始化（类加载）的时机：

    2.1 new 关键字、直接调用类的静态变量、静态方法（final修
      
    
    </summary>
    
      <category term="面试总结" scheme="http://www.xuchunfa.cn/categories/%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/"/>
    
      <category term="java虚拟机" scheme="http://www.xuchunfa.cn/categories/%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/java%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
    
  </entry>
  
  <entry>
    <title>代理模式</title>
    <link href="http://www.xuchunfa.cn/2018/11/08/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/"/>
    <id>http://www.xuchunfa.cn/2018/11/08/代理模式/</id>
    <published>2018-11-08T11:15:37.000Z</published>
    <updated>2018-11-13T12:25:00.560Z</updated>
    
    <content type="html"><![CDATA[<p>代理模式分很多种，下面一一简单总结介绍：</p><p>详细内容见博客：</p><p><a href="https://www.cnblogs.com/zuoxiaolong/p/pattern3.html" target="_blank" rel="noopener">左潇龙讲代理模式</a></p><ul><li><p>静态代理</p><pre><code>1.采用静态代理我们通常会使用组合的方式。2.代理类一般要持有一个被代理的对象的引用。3.对于我们不关心的方法，全部委托给被代理的对象处理。4.自己处理我们关心的方法。</code></pre></li><li><p>动态代理</p><pre><code>1.代理一系列类的某一些方法。</code></pre></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;代理模式分很多种，下面一一简单总结介绍：&lt;/p&gt;
&lt;p&gt;详细内容见博客：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/zuoxiaolong/p/pattern3.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;
      
    
    </summary>
    
      <category term="Java设计模式" scheme="http://www.xuchunfa.cn/categories/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>CountDownLatch详解</title>
    <link href="http://www.xuchunfa.cn/2018/11/04/CountDownLatch%E8%AF%A6%E8%A7%A3/"/>
    <id>http://www.xuchunfa.cn/2018/11/04/CountDownLatch详解/</id>
    <published>2018-11-04T13:15:07.000Z</published>
    <updated>2018-11-04T14:02:29.761Z</updated>
    
    <content type="html"><![CDATA[<h4 id="与CyclicBarrier的区别？"><a href="#与CyclicBarrier的区别？" class="headerlink" title="与CyclicBarrier的区别？"></a>与CyclicBarrier的区别？</h4><pre><code>1.CyclicBarrier主要用于一组线程之间的相互等待，而CountDownLatch一般用于一组线程等待另一组些线程。2.即 CountDownLatch中的countDown()+await() = CyclicBarrier中的await()。注意：在一个线程中先调用countDown()，然后调用await()。</code></pre><p>CyclicBarrier可以重复使用，CountDownLatch不能，原因在CyclicBarrier中：</p><pre><code> public void reset() {    final ReentrantLock lock = this.lock;    lock.lock();    try {        breakBarrier();   // break the current generation        nextGeneration(); // start a new generation    } finally {        lock.unlock();    }}</code></pre><ul><li>CountDownLatch</li></ul><p>等待其他线程都执行完后，主线程才继续往下执行。</p><p>构造函数：</p><pre><code>public CountDownLatch(int count) {    if (count &lt; 0) throw new IllegalArgumentException(&quot;count &lt; 0&quot;);    this.sync = new Sync(count);}</code></pre><p>内部类Sync：</p><pre><code>private static final class Sync extends AbstractQueuedSynchronizer {    private static final long serialVersionUID = 4982264981922014374L;    //AbstractQueuedSynchronizer.java 同步器    //private volatile int state;    Sync(int count) {        setState(count);    }    int getCount() {        return getState();    }    protected int tryAcquireShared(int acquires) {        return (getState() == 0) ? 1 : -1;    }    protected boolean tryReleaseShared(int releases) {        // Decrement count; signal when transition to zero        for (;;) {            int c = getState();            if (c == 0)                return false;            int nextc = c-1;            //如果state为c，则更新state为nextc.            //防止在getState()方法和compareAndSetState()方法调用之间对state进行了更改            if (compareAndSetState(c, nextc))                return nextc == 0;        }    }}</code></pre><p>重要方法：await()</p><pre><code>//CountDownLatch.javapublic void await() throws InterruptedException {    //调用上述的tryAcquireShared()    //state为0：表示调用该方法的线程可以继续往下执行    //state不为0: 表示该线程阻塞    sync.acquireSharedInterruptibly(1);}</code></pre><p>重要方法:countDown()</p><pre><code>public void countDown() {    sync.releaseShared(1);}</code></pre><p>首先进入：</p><pre><code>public final boolean releaseShared(int arg) {    if (tryReleaseShared(arg)) {        //由最后一个执行countDown()方法的线程唤醒调用await()方法的线程        //这里唤醒的线程可能是多个        doReleaseShared();        return true;    }    return false;}</code></pre><p>再看看重要的：</p><pre><code>//AbstractQueuedSynchronizer.java//唤醒等待线程private void doReleaseShared() {    for (;;) {        Node h = head;        //在等待队列中，头节点中并没有保存正在等待的线程，其只是一个空的Node对象，真正等待的线程是从头节点的下一个节点开始存放的，        因而会有对头结点是否等于尾节点的判断        if (h != null &amp;&amp; h != tail) {            int ws = h.waitStatus;            if (ws == Node.SIGNAL) {                if (!compareAndSetWaitStatus(h, Node.SIGNAL, 0))                    continue;            // loop to recheck cases                unparkSuccessor(h);            }            else if (ws == 0 &amp;&amp;                     !compareAndSetWaitStatus(h, 0, Node.PROPAGATE))                continue;                // loop on failed CAS        }        if (h == head)                   // loop if head changed            break;    }}</code></pre><p>最后看一眼：</p><pre><code>//AbstractQueuedSynchronizer.javaprivate void unparkSuccessor(Node node) {    int ws = node.waitStatus;    if (ws &lt; 0)        compareAndSetWaitStatus(node, ws, 0);    Node s = node.next;    if (s == null || s.waitStatus &gt; 0) {        s = null;        for (Node t = tail; t != null &amp;&amp; t != node; t = t.prev)            if (t.waitStatus &lt;= 0)//没有结束，继续向前。                s = t;    }    if (s != null)        LockSupport.unpark(s.thread); //唤醒离传入节点最近的处于等待状态的节点线程}</code></pre><p>最后调用    countDown() 的线程会触发所有调用await()阻塞的线程。</p><p>分析：</p><pre><code>public void await() throws InterruptedException {    sync.acquireSharedInterruptibly(1);}</code></pre><p>进入：</p><pre><code>//AbstractQueuedSynchronizer.javapublic final void acquireSharedInterruptibly(int arg)        throws InterruptedException {    if (Thread.interrupted())        throw new InterruptedException();    if (tryAcquireShared(arg) &lt; 0)//自己Sync重写的方法        doAcquireSharedInterruptibly(arg);}</code></pre><p>重要方法:</p><pre><code>private void doAcquireSharedInterruptibly(int arg)    throws InterruptedException {    final Node node = addWaiter(Node.SHARED);    boolean failed = true;    try {        for (;;) {            final Node p = node.predecessor();            if (p == head) {                //唤醒后，tryAcquireShared(arg)将会大于0                int r = tryAcquireShared(arg);                if (r &gt;= 0) {                    setHeadAndPropagate(node, r);//当前节点设置为头节点，继续唤醒后面的节点                    p.next = null; // help GC                    failed = false;                    return;                }            }            //所有线程阻塞的地方            if (shouldParkAfterFailedAcquire(p, node) &amp;&amp;                parkAndCheckInterrupt())                throw new InterruptedException();        }    } finally {        if (failed)            cancelAcquire(node);    }}</code></pre><p>最后简单看一下：</p><pre><code>private void setHeadAndPropagate(Node node, int propagate) {    Node h = head; // Record old head for check below    setHead(node);    if (propagate &gt; 0 || h == null || h.waitStatus &lt; 0 ||        (h = head) == null || h.waitStatus &lt; 0) {        Node s = node.next;        if (s == null || s.isShared())            doReleaseShared();//继续唤醒下一个    }}</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;与CyclicBarrier的区别？&quot;&gt;&lt;a href=&quot;#与CyclicBarrier的区别？&quot; class=&quot;headerlink&quot; title=&quot;与CyclicBarrier的区别？&quot;&gt;&lt;/a&gt;与CyclicBarrier的区别？&lt;/h4&gt;&lt;pre&gt;&lt;cod
      
    
    </summary>
    
      <category term="Java并发编程" scheme="http://www.xuchunfa.cn/categories/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
    
  </entry>
  
  <entry>
    <title>适配器模式</title>
    <link href="http://www.xuchunfa.cn/2018/10/31/%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
    <id>http://www.xuchunfa.cn/2018/10/31/适配器模式/</id>
    <published>2018-10-31T02:09:23.000Z</published>
    <updated>2018-11-08T02:19:01.749Z</updated>
    
    <content type="html"><![CDATA[<p>类适配器UML图：</p><p><img src="https://i.imgur.com/0yrww9E.png" alt=""></p><p>对象适配器UML图：</p><p><img src="https://i.imgur.com/Q9tMtJ5.png" alt=""></p><p>适配器模式分三种：</p><ul><li><p>类适配器模式</p></li><li><p>对象适配器模式</p></li><li><p>特殊的缺省适配模式</p></li></ul><p>详解见博客：</p><p><a href="https://www.cnblogs.com/java-my-life/archive/2012/04/13/2442795.html" target="_blank" rel="noopener">java适配器详解</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;类适配器UML图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/0yrww9E.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;对象适配器UML图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/Q9tMtJ5.png&quot; a
      
    
    </summary>
    
      <category term="Java设计模式" scheme="http://www.xuchunfa.cn/categories/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>装饰者模式</title>
    <link href="http://www.xuchunfa.cn/2018/10/30/%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <id>http://www.xuchunfa.cn/2018/10/30/装饰者模式/</id>
    <published>2018-10-30T13:45:15.000Z</published>
    <updated>2018-11-08T06:42:39.776Z</updated>
    
    <content type="html"><![CDATA[<p>UML类图：</p><p><img src="https://i.imgur.com/4VrgAqN.jpg" alt=""></p><p>1.Component接口(也可以是抽象类)</p><pre><code>public interface Component {    void method()；}</code></pre><p>2.待装饰的对象:</p><pre><code>public class ConcreteComponent implements Component{public void method() {    System.out.println(&quot;原来的方法&quot;);}}</code></pre><p>3.抽象装饰器父类（并不是必须的）</p><pre><code>public abstract class Decorator implements Component{protected Component component;//组合待装饰的接口或者抽象类，更加灵活public Decorator(Component component) {    super();    this.component = component;}public void method() {    component.method();}}</code></pre><p>4.具体的装饰类：</p><pre><code>package com.decorator;public class ConcreteDecoratorA extends Decorator{public ConcreteDecoratorA(Component component) {    super(component);}public void methodA(){    System.out.println(&quot;被装饰器A扩展的功能&quot;);}public void method(){    System.out.println(&quot;针对该方法加一层A包装&quot;);    super.method();    System.out.println(&quot;A包装结束&quot;);}}</code></pre><ul><li>JAVA中的IO就是装饰者模式的具体应用：</li></ul><p><img src="https://i.imgur.com/RxUg3EW.jpg" alt=""></p><p>总结：</p><pre><code>装饰者模式能够很好的解决了，因为需求的变化需要重复添加功能相似的代码，即代码冗余；这种结构也能很好的解决“类爆炸”的情况。</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;UML类图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/4VrgAqN.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;1.Component接口(也可以是抽象类)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;public interface Component 
      
    
    </summary>
    
      <category term="Java设计模式" scheme="http://www.xuchunfa.cn/categories/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>观察者模式</title>
    <link href="http://www.xuchunfa.cn/2018/10/30/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <id>http://www.xuchunfa.cn/2018/10/30/观察者模式/</id>
    <published>2018-10-30T09:10:33.000Z</published>
    <updated>2018-10-30T12:50:13.744Z</updated>
    
    <content type="html"><![CDATA[<p>举个公众号订阅-发布消息的例子：</p><p>1.抽象观察者：</p><pre><code>public interface Observer{    public void update (String message);}</code></pre><p>2.具体观察者：</p><pre><code>public class User implements Observer {    private String name;    public User(String name) {        this.name = name;    }    @override    public void update (String message){           System.out.println(this.name + &quot;收到通知-&quot; + message);    }}</code></pre><p>3.抽象被观察者：</p><pre><code>public interface Subject{    public void addObserver (Observer Observer);    public void removeObserver (Observer Observer);    public void notify(String message);}</code></pre><p>4.具体被观察者：</p><pre><code>public class ConcreteSubject implements Subject {private List&lt;Observer&gt; usersList = new ArrayList&lt;Observer&gt;();@Overridepublic void addObserver (Observer observer) {    usersList.add(observer);}@Overridepublic void removeObserver (Observer observer) {    usersList.remove(observer);}@Overridepublic void notify(String message) {    for (Observer observer : usersList) {        observer.update(message);    }}}</code></pre><ul><li>下面是JDK1.8的观察者模式</li></ul><p>观察者：</p><pre><code>//每一个观察者都必须实现这个接口    public interface Observer {//第一个代表被观察者void update(Observable o, Object arg);}</code></pre><p>被观察者：</p><pre><code>public class Observable {    private boolean changed = false;    private Vector&lt;Observer&gt; obs;    public Observable() {        obs = new Vector&lt;&gt;();    }public synchronized void addObserver(Observer o) {    if (o == null)        throw new NullPointerException();    if (!obs.contains(o)) {        obs.addElement(o);    }}public synchronized void deleteObserver(Observer o) {    obs.removeElement(o);}public void notifyObservers() {    notifyObservers(null);}public void notifyObservers(Object arg) {    //一个临时的数组，用于并发访问被观察者时，留住观察者列表的当前状态    Object[] arrLocal;    //注意这个同步块，它表示在获取观察者列表时，该对象是被锁定的    //也就是说，在我获取到观察者列表之前，不允许其他线程改变观察者列表    synchronized (this) {        if (!changed)            return;        arrLocal = obs.toArray();        //将改变标识重新置回未改变        clearChanged();    }    //注意这个for循环没有在同步块，此时已经释放了被观察者的锁，其他线程可以改变观察者列表    //但是这并不影响我们当前进行的操作，因为我们已经将观察者列表复制到临时数组    //在通知时我们只通知数组中的观察者，当前删除和添加观察者，都不会影响我们通知的对象    for (int i = arrLocal.length-1; i&gt;=0; i--)        ((Observer)arrLocal[i]).update(this, arg);}</code></pre><p>再举个别人的例子：读者和作者的例子，多对多的关系。</p><p>实现观察者：</p><pre><code>//读者类，要实现观察者接口public class Reader implements Observer{private String name;public Reader(String name) {    super();    this.name = name;}public String getName() {    return name;}//读者可以关注某一位作者，关注则代表把自己加到作者的观察者列表里public void subscribe(String writerName)    //订阅的时候添加观察者    WriterManager.getInstance().getWriter(writerName).addObserver(this);}//读者可以取消关注某一位作者，取消关注则代表把自己从作者的观察者列表里删除public void unsubscribe(String writerName){    //取消订阅的时候添加观察者    WriterManager.getInstance().getWriter(writerName).deleteObserver(this);}//当关注的作者发表新小说时，会通知读者去看public void update(Observable o, Object obj) {    if (o instanceof Writer) {        Writer writer = (Writer) o;        System.out.println(name+&quot;知道&quot; + writer.getName() + &quot;发布了新书《&quot; + writer.getLastNovel() + &quot;》，非要去看！&quot;);    }}   }</code></pre><p>实现被观察者：</p><pre><code>//作者类，要继承自被观察者类public class Writer extends Observable{private String name;//作者的名称private String lastNovel;//记录作者最新发布的小说public Writer(String name) {    super();    this.name = name;    WriterManager.getInstance().add(this);}//作者发布新小说了，要通知所有关注自己的读者public void addNovel(String novel) {    System.out.println(name + &quot;发布了新书《&quot; + novel + &quot;》！&quot;);    lastNovel = novel;    setChanged();//被观察者状态的改变    notifyObservers();//通知观察者}public String getLastNovel() {    return lastNovel;}public String getName() {    return name;}}    </code></pre><p>作者管理器：单例模式实现。</p><pre><code>//管理器，保持一份独有的作者列表public class WriterManager{private Map&lt;String, Writer&gt; writerMap = new HashMap&lt;String, Writer&gt;();//添加作者public void add(Writer writer){    writerMap.put(writer.getName(), writer);}//根据作者姓名获取作者public Writer getWriter(String name){    return writerMap.get(name);}//单例private WriterManager(){}//静态内部类实现延迟初始化的单例模式public static WriterManager getInstance(){    return WriterManagerInstance.instance;}private static class WriterManagerInstance{    private static final WriterManager instance = new WriterManager();}}</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;举个公众号订阅-发布消息的例子：&lt;/p&gt;
&lt;p&gt;1.抽象观察者：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;public interface Observer{
    public void update (String message);
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2.具
      
    
    </summary>
    
      <category term="Java设计模式" scheme="http://www.xuchunfa.cn/categories/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
</feed>
