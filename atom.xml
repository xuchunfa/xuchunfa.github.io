<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Flying in the ocean of knowledge</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.xuchunfa.cn/"/>
  <updated>2019-03-17T08:32:50.861Z</updated>
  <id>http://www.xuchunfa.cn/</id>
  
  <author>
    <name>Xu chunfa</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>面试总结--计算机网络</title>
    <link href="http://www.xuchunfa.cn/2019/02/23/%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    <id>http://www.xuchunfa.cn/2019/02/23/面试总结-计算机网络/</id>
    <published>2019-02-23T01:57:49.000Z</published>
    <updated>2019-03-17T08:32:50.861Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>TCP和UDP的区别？</p><pre><code>1.TCP面向连接的，UDP面向非连接的。2.TCP传输可靠，UDP尽最大努力交付；TCP是全双工的可靠信道，UDP不可靠信道；通过TCP连接传送的数据，无差错，不丢失，不重复，且按序到达3.TCP面向字节流，UDP面向报文。4.TCP连接是点对点的，UDP支持一对一、一对多、多对一和多对多。</code></pre><p> TCP的特点：</p><pre><code>可靠、稳定、慢、效率低、占用系统资源高。</code></pre><p> UDP的特点：</p><pre><code>传递数据快、不可靠丢包</code></pre></li><li><p>TCP如何保证可靠性，拥塞控制如何实现？</p><pre><code>1.确认和重传；2.数据校验；3.数据合理分片；4.流量控制：当接收方来不及处理发送方的数据，能通过滑动窗口，提示发送方降低发送的速率，防止包丢失。5.拥塞控制；</code></pre></li></ol><ol start="3"><li><p>输入URL浏览器发生了什么？</p><pre><code>1.DNS域名解析找到IP地址；2.TCP连接服务端和客户端；3.发送HTTP请求；4.服务器处理请求；5.返回响应结果；6.关闭TCP连接（长连接的时候不关闭）；7.浏览器解析HTML;8.浏览器布局渲染。</code></pre><p> 3.HTTP协议和TCP/IP协议区别？</p><pre><code>1.HTTP协议是应用层协议，主要解决如何包装数据；TCP/IP协议是运输层协议解决数据如何在网络中传输。</code></pre></li></ol><ol start="4"><li><p>进程和线程的区别？</p><pre><code>1.进程是资源（CPU、内存、磁盘等等）分配的基本单位，线程是调度（程序执行的）的基本单位。进程是是实实在在看得见的，Ctrl+Shift+Esc显示进程。2.同一进程的各个线程共享该进程的内存资源。但是当一个线程使用某些共享内存时，其他线程必须等待。3.进程有自己的独立地址空间，同一进程里的线程享有相同的地址空间；进程切换代价昂贵，线程切换代价小。4.多进程程序更强壮，多线程程序只要有一个线程挂了，进程就死掉了，但不会影响其他进程。</code></pre></li></ol><ol start="5"><li><p>进程的通信方式？</p><pre><code>1.管道：半双工、数据单向流动、具有亲缘关系（父子进程）的进程间。其中命名管道允许不具有亲缘关系的进程通信。2.信号量：计数器、控制多个进程访问共享资源。3.消息队列：克服了信号承载信号量小，管道只能承载无格式字节流以及缓冲区大小受限的缺点。4.信号：通知接受事件发生。5.共享内存：最快IPC通信、结合信号量使用。6.嵌套字：可用于不同机器间的进程通信。</code></pre></li><li><p>TCP的三次握手和四次挥手以及为什么是四次挥手？</p><p> 总结：</p><pre><code>1.第一次握手：标志位SYN=1 ACK=0,client_sequence=i,客户端SYN_SEND状态；2.第二次握手：检查并设置标志位ACK=1 SYN=1和发送确认序号ack number=i+1 server_sequence=j,服务端SYN_RECV状态；3.第三次握手：检查标志位ACK=1和发送确认序号ack=j+1,客户端进入ESTABLISH状态.(这里要是出现ack丢失的情况不会重传没有数据的ack,而是重传第二次握手时的数据)4.第一次挥手: FIN=i,客户端FIN_WAIT1状态；5.第二次挥手：ACK=i+1,服务端CLOSED_WAIT状态（关闭服务器读通道）；客户端收到ACK进入FIN_WAIT2状态（关闭客户端写通道）；6.第三次挥手：服务端发送完数据以后，向客户端发送FIN=j,服务端进入到LAST_ACK状态；7.第四次挥手：发送ACK=j+1，客户端进入TIME_WAIT状态（关闭客户端读通道），服务器收到ACK后（关闭服务器写通道）；</code></pre><p> 注：</p><pre><code>1.TIME_WAIT=2MSL(Maximum Segment Lifetime最长报文寿命)的原因？    1.1 保证全双工的TCP连接能够可靠关闭。因为万一服务端没收到ACK，则会重新发送FIN，但是客户端已经关闭了也就找不到与FIN对应的连接了。    1.2 保证这次连接的重复数据（残留报文）从网络中消失（因为可能重传报文都收到了，但原始报文还在路上）。新连接的端口号可能与旧端口号一致，导致新建立的TCP连接出现脏数据。    1.3 作用是为了重传最后一个ACK报文。2.为什么是4次挥手？    这里把ACK报文和FIN报文分开发是为了确保数据能完整得到传输。当收到对方的FIN报文通知时，它仅仅表示对方没有数据发送给你了；但未必你所有的数据都全部发送给对方了，所以你可以未必会马上会关闭SOCKET,也即可能你还需要发送一些数据给对方之后，再发送FIN报文给对方来表示你同意现在可以关闭连接了。3.TCP第三次握手ACK丢失后的处理？    ACK丢失，服务端的TCP连接的撞状态为SYN_RECV，等待3s、6s、12s后重新发送SYN+ACK包，其中服务端重新发送SYN+ACK的次数默认值是5，如果仍未收到ACK,一段时间后服务端自动关闭这个连接，但是Client认为这个连接已经建立，如果Client端向Server写数据，Server端将以RST包(用于强制关闭tcp连接)响应，方能感知到Server的错误。</code></pre></li></ol><p>参考文献：</p><p><a href="https://blog.csdn.net/smileiam/article/details/78226816" target="_blank" rel="noopener">TCP的三次握手、四次挥手</a>        </p><ol start="7"><li>http协议？http和https的区别？http的结构及状态码？</li></ol><pre><code>1.http请求结构    1.1 请求行        eg:POST /addStudent/addStu.html HTTP/1.1    1.2 请求头        Accept:客户端接受什么类型的响应；        Cookie、Cache-Control:响应数据在客户端的缓存控制；....    1.3 请求体        eg:name=xuchunfa&amp;gender=male&amp;age=182.http响应结构    2.1 响应行        eg:HTTP/1.1 200 OK    状态码：        成功状态码：            1.1 200 OK:处理成功；            1.2 204 No Content:请求处理成功，但没有资源返回；        重定向状态码：            2.1 301 Moved Permanently:永久重定向；            2.2 302 Found:临时性重定向；            2.3 303 See Other:重定向其他页面;            2.4 304 Not Modify:告诉客户端，你请求的这个资源至你上次取得后，并没有更改，你直接用你本地的缓存吧;        客户端错误状态码：            4.1 400 Bad Request:请求报文中存在语法错误；            4.2 401 Unauthorized：需要有通过Http认证的认证信息；            4.3 403 Forbidden:访问被拒绝；            4.4 404 Not Found:页面不存在（无法找到请求资源）；        服务器错误状态码：            5.1 500 Internal Server Error：服务器内部发生错误；            5.2 503 Service Unavailable：服务器处于超负荷或者正在停机维护；    2.2 响应头        eg:Server、Content-Type、Set-Cookie等等；3.http协议    1.生成针对目标Web服务器的HTTP请求报文；    2.http协议是无状态的协议，服务器不会记录客户端的信息，解放了服务器但可能会传输大量重复信息。通过Cookie来维系客户端和服务器之间的状态。、4.http和https区别     1.HTTPS协议由HTTP+SSL(Secure Sockets Layer)协议构建的可进行加密传输数据、身份认证的网络协议。    2.HTTP端口号80，HTTPS端口号443;5.HTTPS工作原理    1.客户端发起HTTPS请求，三次握手；    2.服务端配置。配置数字证书，即公钥和密钥；    3.服务端传送证书。即传送公钥给客户端；    4.客户端解析证书。证书是否有效，是否过期，有效则提取出公钥；    5.传输加密信息。浏览器随机生成一个对称加密的密钥k（临时会话密钥），密钥k是在客户端和服务端共享的，用证书中的公钥加密k,得到密文k&apos;；    6.服务端解密信息。用私钥拿到k，并使用密钥k加密传输的数据；    7.传输服务端加密后的信息；    8.客户端解密信息。使用共享密钥k解密数据。</code></pre><p>参考文献：</p><p><a href="https://blog.csdn.net/u010256388/article/details/68491509" target="_blank" rel="noopener">HTTP请求行、请求头、请求体详解</a>    </p><ol start="8"><li><p>Get请求和Post请求有什么区别？</p><pre><code>1.Get请求的数据会附在URI之后，Post把提交的数据放在HTTP请求体中；2.Get的长度受受限于浏览器URI的长度(2K个字节)，所以一般来说，GET请求传递的数据要比POST请求少；3.POST比GET安全性高。4.GET请求参数会被完整保留在浏览器历史记录里，而POST中的参数不会保留；5.GET只接受ASCII字符，POST没有限制；6.GET产生一个数据包：对于GET方式的请求，浏览器会把http header和data一并发送出去，服务器响应200（返回数据  POST请求产生二个数据包：浏览器先发送header，服务器响应100 continue，浏览器再发送data，服务器响应200 OK（返回数据）</code></pre></li></ol><ol start="9"><li><p>Session和Cookie的区别？</p><pre><code>Session:服务器端保存的数据结构；可以放在内存、数据库、文件中等；Session的实现对客户端Cookie有依赖关系。Cookie:客户端保存用户信息的机制，有限制，不能超过3K，实现Session的一种方式，如果Cookie被禁用会通过URL重写的技术来进行会话跟踪，uri后面会附有sid=...的信息；总结:1.cookie不安全，存在客户端硬盘上；session cookie存储在浏览器内存，是针对某一次会话而言；2.Cookie根据响应报文头中的Set-Cookie信息，通知客户端保存Cookie.</code></pre></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;&lt;p&gt;TCP和UDP的区别？&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1.TCP面向连接的，UDP面向非连接的。

2.TCP传输可靠，UDP尽最大努力交付；TCP是全双工的可靠信道，UDP不可靠信道；通过TCP连接传送的数据，无差错，不丢失，不重复，且按序到达

3.T
      
    
    </summary>
    
      <category term="面试总结" scheme="http://www.xuchunfa.cn/categories/%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/"/>
    
      <category term="计算机网络" scheme="http://www.xuchunfa.cn/categories/%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
  </entry>
  
  <entry>
    <title>面试总结--操作系统</title>
    <link href="http://www.xuchunfa.cn/2019/02/23/%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    <id>http://www.xuchunfa.cn/2019/02/23/面试总结-操作系统/</id>
    <published>2019-02-23T01:56:09.000Z</published>
    <updated>2019-02-23T01:57:37.845Z</updated>
    
    <content type="html"><![CDATA[<ol><li>操作系统的内存管理机制？</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;操作系统的内存管理机制？&lt;/li&gt;
&lt;/ol&gt;

      
    
    </summary>
    
      <category term="面试总结" scheme="http://www.xuchunfa.cn/categories/%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/"/>
    
      <category term="操作系统" scheme="http://www.xuchunfa.cn/categories/%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
  </entry>
  
  <entry>
    <title>面试总结--Spring框架基础</title>
    <link href="http://www.xuchunfa.cn/2019/02/18/%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93-Spring%E6%A1%86%E6%9E%B6%E5%9F%BA%E7%A1%80/"/>
    <id>http://www.xuchunfa.cn/2019/02/18/面试总结-Spring框架基础/</id>
    <published>2019-02-18T12:18:34.000Z</published>
    <updated>2019-03-16T13:58:25.367Z</updated>
    
    <content type="html"><![CDATA[<ol><li>AOP和IOC原理？</li><li>Spring怎样解决循环依赖的问题？</li><li>DispatchServlet怎样分发任务的？</li><li>注解的原理？</li><li>Spring的入口？</li><li>SpringMVC 的 Controller 中返回值有哪些？</li><li>Servlet 和 JSP 的区别？</li><li>Servlet创建的过程？</li><li>Servlet中的filter？</li><li>Servlet的生命周期，Servlet是单例的，如何判断？为什么要设计成单例的？</li><li>Servlet中的变量是否需要加锁？</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;AOP和IOC原理？&lt;/li&gt;
&lt;li&gt;Spring怎样解决循环依赖的问题？&lt;/li&gt;
&lt;li&gt;DispatchServlet怎样分发任务的？&lt;/li&gt;
&lt;li&gt;注解的原理？&lt;/li&gt;
&lt;li&gt;Spring的入口？&lt;/li&gt;
&lt;li&gt;SpringMVC 的 Co
      
    
    </summary>
    
      <category term="面试总结" scheme="http://www.xuchunfa.cn/categories/%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/"/>
    
      <category term="Spring框架基础" scheme="http://www.xuchunfa.cn/categories/%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/Spring%E6%A1%86%E6%9E%B6%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
  <entry>
    <title>面试总结--Java集合</title>
    <link href="http://www.xuchunfa.cn/2019/02/18/%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93-Java%E9%9B%86%E5%90%88/"/>
    <id>http://www.xuchunfa.cn/2019/02/18/面试总结-Java集合/</id>
    <published>2019-02-18T12:16:24.000Z</published>
    <updated>2019-02-26T11:30:46.921Z</updated>
    
    <content type="html"><![CDATA[<ol><li>可以用for循环直接删除ArrayList的特定元素吗？可能会出现什么问题？怎样解决？</li><li>HashMap put()元素产生冲突，为什么用LinkedList（拉链法）而不用ArrayList解决，产生冲突时key值不等，新元素怎样加入链表，为什么这么设计（jdk1.8之前）？</li><li>ArrayList以及LinkedList？</li><li>HashMap线程不安全的原因？</li></ol><p>参考文献：</p><p><a href="http://www.importnew.com/22011.html" target="_blank" rel="noopener">HashMap线程不安全的体现</a>注：最后一步 next=null </p><p>不安全原因在于多线程发生扩容时：</p><pre><code>void resize(int newCapacity) {    Entry[] oldTable = table;    int oldCapacity = oldTable.length;    if (oldCapacity == MAXIMUM_CAPACITY) {        threshold = Integer.MAX_VALUE;        return;    }    Entry[] newTable = new Entry[newCapacity];    transfer(newTable, initHashSeedAsNeeded(newCapacity));    table = newTable;    threshold = (int)Math.min(newCapacity * loadFactor, MAXIMUM_CAPACITY + 1);}//多线程会形成循环链表void transfer(Entry[] newTable, boolean rehash) {    int newCapacity = newTable.length;    for (Entry&lt;K,V&gt; e : table) {        while(null != e) {            Entry&lt;K,V&gt; next = e.next;            if (rehash) {                e.hash = null == e.key ? 0 : hash(e.key);            }            int i = indexFor(e.hash, newCapacity);            e.next = newTable[i];//头插法时间复杂度低，但由于会反序导致线程不安全            newTable[i] = e;            e = next;        }    }</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;可以用for循环直接删除ArrayList的特定元素吗？可能会出现什么问题？怎样解决？&lt;/li&gt;
&lt;li&gt;HashMap put()元素产生冲突，为什么用LinkedList（拉链法）而不用ArrayList解决，产生冲突时key值不等，新元素怎样加入链表，为什
      
    
    </summary>
    
      <category term="面试总结" scheme="http://www.xuchunfa.cn/categories/%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/"/>
    
      <category term="java集合" scheme="http://www.xuchunfa.cn/categories/%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/java%E9%9B%86%E5%90%88/"/>
    
    
  </entry>
  
  <entry>
    <title>面试总结--Linux基础</title>
    <link href="http://www.xuchunfa.cn/2019/02/18/%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93-Linux%E5%9F%BA%E7%A1%80/"/>
    <id>http://www.xuchunfa.cn/2019/02/18/面试总结-Linux基础/</id>
    <published>2019-02-18T12:13:51.000Z</published>
    <updated>2019-02-18T12:27:23.930Z</updated>
    
    <content type="html"><![CDATA[<ol><li>cpu 100%怎样定位？</li><li>进程间通信的方式有哪些？</li><li></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;cpu 100%怎样定位？&lt;/li&gt;
&lt;li&gt;进程间通信的方式有哪些？&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;

      
    
    </summary>
    
      <category term="面试总结" scheme="http://www.xuchunfa.cn/categories/%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/"/>
    
      <category term="Linux基础" scheme="http://www.xuchunfa.cn/categories/%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/Linux%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
  <entry>
    <title>面试总结--Mysql基础</title>
    <link href="http://www.xuchunfa.cn/2019/02/18/%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93-Mysql%E5%9F%BA%E7%A1%80/"/>
    <id>http://www.xuchunfa.cn/2019/02/18/面试总结-Mysql基础/</id>
    <published>2019-02-18T11:54:38.000Z</published>
    <updated>2019-03-16T05:49:34.350Z</updated>
    
    <content type="html"><![CDATA[<ol><li>B树和B+树是解决什么样的问题的，怎样演化过来，之间区别？</li><li>Mysql给离散度低的字段建立索引会出现什么问题，具体说下原因？</li><li>数据库的四个隔离级别，Mysql属于哪一种？</li><li>索引有哪几种？索引的好处？什么时候用？索引的原理？</li><li>索引最左匹配原则？</li><li>事务的特性以及事务的隔离级别？</li><li>Mysql引擎？</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;B树和B+树是解决什么样的问题的，怎样演化过来，之间区别？&lt;/li&gt;
&lt;li&gt;Mysql给离散度低的字段建立索引会出现什么问题，具体说下原因？&lt;/li&gt;
&lt;li&gt;数据库的四个隔离级别，Mysql属于哪一种？&lt;/li&gt;
&lt;li&gt;索引有哪几种？索引的好处？什么时候用
      
    
    </summary>
    
      <category term="面试总结" scheme="http://www.xuchunfa.cn/categories/%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/"/>
    
      <category term="Mysql基础" scheme="http://www.xuchunfa.cn/categories/%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/Mysql%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
  <entry>
    <title>面试总结--Java设计模式</title>
    <link href="http://www.xuchunfa.cn/2019/02/18/%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93-Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>http://www.xuchunfa.cn/2019/02/18/面试总结-Java设计模式/</id>
    <published>2019-02-18T11:52:34.000Z</published>
    <updated>2019-02-18T11:54:07.303Z</updated>
    
    <content type="html"><![CDATA[<ol><li>写一个你认为最好的单例模式？</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;写一个你认为最好的单例模式？&lt;/li&gt;
&lt;/ol&gt;

      
    
    </summary>
    
      <category term="面试总结" scheme="http://www.xuchunfa.cn/categories/%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/"/>
    
      <category term="Java设计模式" scheme="http://www.xuchunfa.cn/categories/%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>面试总结--Java并发编程</title>
    <link href="http://www.xuchunfa.cn/2019/02/18/%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93-Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    <id>http://www.xuchunfa.cn/2019/02/18/面试总结-Java并发编程/</id>
    <published>2019-02-18T11:48:38.000Z</published>
    <updated>2019-03-16T05:48:53.959Z</updated>
    
    <content type="html"><![CDATA[<ol><li>ReadWriteLock读写之间互斥吗？</li><li>Semaphore拿到执行权的线程之间是否互斥？</li><li>写一个生产者消费者模式？</li><li>写一个死锁？</li><li>死锁的产生的原因以及怎么预防？ </li><li>int a = 1; 是原子性操作吗？</li><li>新的任务提交到线程池，线程池是怎样处理？</li><li>线程池有哪几种？核心参数有哪几个？线程池的拒绝策略有哪几种？</li><li>AQS和CAS原理？</li><li>synchronized底层实现原理？</li><li>synchronized和lock的区别？</li><li>volatile作用，指令重排相关？</li><li>ReentrantLock 是可重入锁，什么是可重入锁？</li><li>线程执行过程中遇到异常会发生什么，怎样处理？</li><li>java创建线程的方式？</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;ReadWriteLock读写之间互斥吗？&lt;/li&gt;
&lt;li&gt;Semaphore拿到执行权的线程之间是否互斥？&lt;/li&gt;
&lt;li&gt;写一个生产者消费者模式？&lt;/li&gt;
&lt;li&gt;写一个死锁？&lt;/li&gt;
&lt;li&gt;死锁的产生的原因以及怎么预防？ &lt;/li&gt;
&lt;li&gt;in
      
    
    </summary>
    
      <category term="面试总结" scheme="http://www.xuchunfa.cn/categories/%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/"/>
    
      <category term="Java并发编程" scheme="http://www.xuchunfa.cn/categories/%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
    
  </entry>
  
  <entry>
    <title>面试总结--Java语言基础</title>
    <link href="http://www.xuchunfa.cn/2019/02/18/%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93-Java%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/"/>
    <id>http://www.xuchunfa.cn/2019/02/18/面试总结-Java语言基础/</id>
    <published>2019-02-18T11:41:52.000Z</published>
    <updated>2019-03-16T05:43:51.121Z</updated>
    
    <content type="html"><![CDATA[<ol><li>private修饰的方法可以通过反射访问，那么private的意义何在？</li><li>局部变量使用前需要显式地赋值，否则编译通过不了，为什么这么设计？</li><li>接口和抽象的区别？</li><li>重写和重载的区别？</li><li>Object类有哪些方法？以及具体用到哪？</li><li>java的浅拷贝和深拷贝？</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;private修饰的方法可以通过反射访问，那么private的意义何在？&lt;/li&gt;
&lt;li&gt;局部变量使用前需要显式地赋值，否则编译通过不了，为什么这么设计？&lt;/li&gt;
&lt;li&gt;接口和抽象的区别？&lt;/li&gt;
&lt;li&gt;重写和重载的区别？&lt;/li&gt;
&lt;li&gt;Objec
      
    
    </summary>
    
      <category term="面试总结" scheme="http://www.xuchunfa.cn/categories/%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/"/>
    
      <category term="java语言基础" scheme="http://www.xuchunfa.cn/categories/%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/java%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
  <entry>
    <title>面试总结-Java虚拟机</title>
    <link href="http://www.xuchunfa.cn/2019/02/18/%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93-Java%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    <id>http://www.xuchunfa.cn/2019/02/18/面试总结-Java虚拟机/</id>
    <published>2019-02-18T11:32:52.000Z</published>
    <updated>2019-03-17T09:26:48.639Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>Java类加载以及类初始化顺序？</p><pre><code>1.类加载的生命周期：加载、连接（验证、准备、解析）、初始化、使用、卸载。2.类初始化（类加载）的时机：    2.1 new 关键字、直接调用类的静态变量、静态方法（final修饰符除外);    2.2 类的反射调用，method.invoke(obj,agrs)初始化实例obj对应类;    2.3 初始化父类；(接口初始化不会初始化父类)    2.4 main方法所属类；3.细分一下加载的生命周期：    3.1 验证（文件格式验证、元数据验证、字节码验证、符号引用验证）    3.2 准备（设置类变量的初始值）    3.3 解析（类或接口的解析、字段解析、类方法解析、接口方法解析）4.类初始化的顺序：    4.1  &lt;clinit&gt;()方法收集类中所有类变量和静态代码块初始化，父类优于子类而且在多线程环境下初始化时虚拟机保证只有一个线程去执行初始化方法，且只初始化一次。    4.2 父类静态代码块---父类静态成员变量（这两个顺序先后按代码先后顺序出现）---子类静态代码块---子类静态成员变量---父类实例变量代码块---父类实例变量---子类实例变量代码块---子类实例变量---父类构造函数---子类构造函数</code></pre></li></ol><ol start="3"><li>对方法区和永久区解的理以及它们之间关系的理解？</li><li><p>一个java文件有3个类，编译后有几个class文件？</p><pre><code>答：3个。</code></pre></li><li><p>JVM GC算法的前戏？</p><p> 首先弄清楚判断对象是否存活的算法：</p><pre><code>1.引用计数算法。对象被引用一次，计数值加1，引用失效，计数值减1，当计数值为0时回收。缺点：无法解决循环引用的问题。2.可达性分析算法。对象到GC Roots 不可达则回收，反之不回收。2.1 可作为GC Roots的对象：    1.虚拟机栈（栈帧中）引用的对象。    2.方法区类静态属性引用的对象。    3.方法区常量引用的对象。    4.native方法中引用的对象。</code></pre><p> 永久代收集的什么垃圾？</p><pre><code>1.废弃常量。没有任何引用。2.无用的类。所有实例都被回收、类加载器被回收、对象没有在任何地方引用。、</code></pre></li><li><p>JVM GC算法核心内容？</p><pre><code>1.标记-回收算法。判断是否存活，标记并清除。缺点：    1.1 标记和回收效率低。    1.2 大量内存碎片。2.复制算法。将内存分为两块，只用其中一块，然后将存活对象复制到空的那块内存。优点：    2.1 效率高。    2.2 没有内存碎片。（有点疑问？）缺点：    2.1 只有一半内存可用，代价大。解决办法是划分为1个Eden2个Survivor(比例8:1:1)只有10%空间没用。这样做的缺点是万一存活对象大于10%则必须依赖老年代进行分配担保。    2.2 不适合对象存活率高的情况，这样频繁复制影响效率。适合新生代，不适合老年代。3.标记-整理算法。所有存活对象移动到一边，清除边界外的内存。优点：    3.1 适合老年代对象存活率高的情况。4.分代回收算法。新生代采用复制算法，老年代采用标记-整理或标记清除算法。</code></pre><p> 总结：</p><pre><code>Java垃圾回收一般是采用分代回收的，将java堆分成老年代和新生代。新生代特点对象存活率低，采用复制算法，老年代反之采用标记-整理/标记-清除算法。</code></pre></li><li><p>JVM 垃圾收集器核心内容？</p><p> 首先看个整体图，连线表示可以搭配使用。</p><p> <img src="https://i.imgur.com/4mNb2Rd.png" alt=""></p><p> 新生代（复制算法）：</p><pre><code>1.Serial 收集器优点：    1.1 单线程、单CPU效率高、适合Client模式。缺点：    1.1 暂停所有工作线程（STW）,会有不良体验。2.ParNew 收集器优点：    2.1 多线程收集、适合Server模式。    2.1 除Serial外，唯一可以和CMS组合使用的收集器。缺点：    2.1 仍然不可避免STW。3.Parallel Scavenge 收集器 优点：    3.1 吞吐量可控、自适应调节策略。</code></pre><p> 老年代：</p><pre><code>4.Serial Old 收集器（标记-整理）优点：    4.1 单线程、单CPU效率高、适合Client模式。缺点：    4.1 暂停所有工作线程（STW）,会有不良体验。5.Parallel Old 收集器（标记-整理）优点：    5.1 多线程，搭配 Parallel Scavenge 使用效率高，适合Server端。6.CMS 收集器（标记-清除）整个过程：    1.初始标记（STW）    2.并发标记    3.重新标记（STW）    4.并发清除优点：    6.1 最少回收停顿时间。因为在并发标记和并发清除时，用户线程和收集线程并发工作。缺点：    6.1 多线程多CPU资源敏感。CPU不足时，垃圾收集线程占CPU将近50%，这大大降低了用户程序的执行速度。    6.2 无法处理浮动垃圾。浮动垃圾指在并发清除时，用户线程新产生的垃圾。由于这些垃圾的产生所以在设置-XX:CMSInitiatingOccupancyFraction（启动CMS时内存的阈值）时得注意给CMS    收集线程预留内存，否则会出现“Concurrent Model Failure”,临时启用Serial Old（单线程），性能下降。    6.3 会产生内存碎片。通过设置-XX：+UseCMSCompactAtFullCollection参数，在要进行Full GC时碎片整理。默认值为0表示每次要进入Full GC 时进行碎片整理。7.G1收集器</code></pre></li></ol><p><a href="https://www.cnblogs.com/duanxz/p/6102580.html" target="_blank" rel="noopener">G1 收集器的详解</a></p><pre><code>重点部分总结：7.1 Region区域图解如下：</code></pre><p><img src="https://i.imgur.com/aM4TR6l.png" alt=""></p><pre><code>    1.划分Region区域（默认2048），逻辑连续物理不连续，每个Region大小范围1M到32M(2的n次方)是通过参数堆的大小和Region个数计算出来的。其中humongous代表一组连续的Region区域，    用于存放大小超过默认Region大小50%的对象。7.2 年轻代的回收模式    1.主要是对Eden区进行GC，会发生Stop The World事件、同时会计算Eden和Survivor的大小7.3 mix GC模式    mixed gc中也有一个阈值参数 -XX:InitiatingHeapOccupancyPercent，当老年代大小占整个堆大小百分比达到该阈值时，会触发一次mixed gc.    步骤：        1.初始标记(STW)        2.并发标记        3.最终标记（STW）        4.筛选回收7.3 Full GC模式：单线程、全局扫描堆然后标记清除代价昂贵。优点：    1.解决了CMS中内存碎片的问题。    2.能够在指定时间片内优先回收价值最大的Region。</code></pre><p>5.哪些对象会进入到老年代？</p><pre><code>1.大对象。对Serial和parNew收集器而言，参数-XX:PretenureSizeThreshold代表对象大小如果大于它的值，则直接分配到老年代。2.年龄达到阈值（默认15岁）。Minor GC 进入到Survivor，此时年龄为1，继续存活年龄将不断增加。3.动态年龄判定。Surviovr区中年龄相等的对象占了整个Survivor大小的一半以上，则年龄大于或等于该年龄的对象将进入老年代。4.空间分配担保。如果晋升到老年代的对象的平均大小 小于 老年代的剩余空间则发生担保，Eden内的所有存活对象进入到老年代，否则担保失败，发生Full GC.(比Minor GC 慢10倍)</code></pre><ol start="5"><li>Java内存结构？ </li></ol><p><img src="https://i.imgur.com/SwBcYyJ.png" alt=""></p><pre><code>JVM内存溢出情况：</code></pre><p><img src="https://i.imgur.com/FFDc1GQ.png" alt=""></p><pre><code>1.线程共享：方法区（永久代）和堆区。2.线程私有：虚拟机栈（栈内存）、程序计数器和本地方法栈（native方法）。3.堆内存存放内容：java对象、数组。4.方法区存放内容：常量、静态变量、虚拟机加载的类信息和即时编译器编译后的代码。注：4.1 运行时常量池（常量池）是方法区的一部分。4.2 Class文件内容组成：类的版本、字段、方法、接口等描述信息和常量池；常量池放编译期生成的(.class文件)各种字面量和符号引用。5.对象的内存布局：对象头、实例数据和对齐填充。对象头包括：哈希码、GC分代年龄、锁状态标志、线程持有的锁等。</code></pre><ol start="6"><li>Object object = new Object(); 初始化的顺序是什么？在JVM各区域做了什么？</li></ol><p><a href="https://blog.csdn.net/Rainnnbow/article/details/52149586https://blog.csdn.net/Rainnnbow/article/details/52149586" target="_blank" rel="noopener">new之后JVM都做了什么？</a></p><pre><code>步骤：1.检查类加载2.堆中分配内存，初始化为零（除对象头）3.设置对象对象头信息4.程序中自定义的数据</code></pre><ol start="7"><li>加载器双亲委派模型及破坏？</li></ol><ol start="8"><li><p>JVM 新生代为什么分为eden区和survivor区？为什么是8：1：1，为什么会有两个suvivor区？</p><p> <a href="https://blog.csdn.net/antony9118/article/details/51425581#commentBox" target="_blank" rel="noopener">为什么新生代内存需要有两个Survivor区？</a></p></li><li><p>syn锁，jvm里面分成偏向锁、轻量级锁、重量级锁，其之间的转换过程是怎么样的，各自适用场景是什么样的，偏向锁情况产生竞争一定会膨胀成轻量级锁吗，为什么只能单向转换，比如偏向锁变成轻量级锁变成重量级锁之后不会在竞争消失之后在回到偏向锁，必须要重启jvm才行，是出于什么情况考虑的？</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;&lt;p&gt;Java类加载以及类初始化顺序？&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1.类加载的生命周期：

加载、连接（验证、准备、解析）、初始化、使用、卸载。

2.类初始化（类加载）的时机：

    2.1 new 关键字、直接调用类的静态变量、静态方法（final修
      
    
    </summary>
    
      <category term="面试总结" scheme="http://www.xuchunfa.cn/categories/%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/"/>
    
      <category term="java虚拟机" scheme="http://www.xuchunfa.cn/categories/%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/java%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
    
  </entry>
  
  <entry>
    <title>代理模式</title>
    <link href="http://www.xuchunfa.cn/2018/11/08/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/"/>
    <id>http://www.xuchunfa.cn/2018/11/08/代理模式/</id>
    <published>2018-11-08T11:15:37.000Z</published>
    <updated>2018-11-13T12:25:00.560Z</updated>
    
    <content type="html"><![CDATA[<p>代理模式分很多种，下面一一简单总结介绍：</p><p>详细内容见博客：</p><p><a href="https://www.cnblogs.com/zuoxiaolong/p/pattern3.html" target="_blank" rel="noopener">左潇龙讲代理模式</a></p><ul><li><p>静态代理</p><pre><code>1.采用静态代理我们通常会使用组合的方式。2.代理类一般要持有一个被代理的对象的引用。3.对于我们不关心的方法，全部委托给被代理的对象处理。4.自己处理我们关心的方法。</code></pre></li><li><p>动态代理</p><pre><code>1.代理一系列类的某一些方法。</code></pre></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;代理模式分很多种，下面一一简单总结介绍：&lt;/p&gt;
&lt;p&gt;详细内容见博客：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/zuoxiaolong/p/pattern3.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;
      
    
    </summary>
    
      <category term="Java设计模式" scheme="http://www.xuchunfa.cn/categories/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>CountDownLatch详解</title>
    <link href="http://www.xuchunfa.cn/2018/11/04/CountDownLatch%E8%AF%A6%E8%A7%A3/"/>
    <id>http://www.xuchunfa.cn/2018/11/04/CountDownLatch详解/</id>
    <published>2018-11-04T13:15:07.000Z</published>
    <updated>2018-11-04T14:02:29.761Z</updated>
    
    <content type="html"><![CDATA[<h4 id="与CyclicBarrier的区别？"><a href="#与CyclicBarrier的区别？" class="headerlink" title="与CyclicBarrier的区别？"></a>与CyclicBarrier的区别？</h4><pre><code>1.CyclicBarrier主要用于一组线程之间的相互等待，而CountDownLatch一般用于一组线程等待另一组些线程。2.即 CountDownLatch中的countDown()+await() = CyclicBarrier中的await()。注意：在一个线程中先调用countDown()，然后调用await()。</code></pre><p>CyclicBarrier可以重复使用，CountDownLatch不能，原因在CyclicBarrier中：</p><pre><code> public void reset() {    final ReentrantLock lock = this.lock;    lock.lock();    try {        breakBarrier();   // break the current generation        nextGeneration(); // start a new generation    } finally {        lock.unlock();    }}</code></pre><ul><li>CountDownLatch</li></ul><p>等待其他线程都执行完后，主线程才继续往下执行。</p><p>构造函数：</p><pre><code>public CountDownLatch(int count) {    if (count &lt; 0) throw new IllegalArgumentException(&quot;count &lt; 0&quot;);    this.sync = new Sync(count);}</code></pre><p>内部类Sync：</p><pre><code>private static final class Sync extends AbstractQueuedSynchronizer {    private static final long serialVersionUID = 4982264981922014374L;    //AbstractQueuedSynchronizer.java 同步器    //private volatile int state;    Sync(int count) {        setState(count);    }    int getCount() {        return getState();    }    protected int tryAcquireShared(int acquires) {        return (getState() == 0) ? 1 : -1;    }    protected boolean tryReleaseShared(int releases) {        // Decrement count; signal when transition to zero        for (;;) {            int c = getState();            if (c == 0)                return false;            int nextc = c-1;            //如果state为c，则更新state为nextc.            //防止在getState()方法和compareAndSetState()方法调用之间对state进行了更改            if (compareAndSetState(c, nextc))                return nextc == 0;        }    }}</code></pre><p>重要方法：await()</p><pre><code>//CountDownLatch.javapublic void await() throws InterruptedException {    //调用上述的tryAcquireShared()    //state为0：表示调用该方法的线程可以继续往下执行    //state不为0: 表示该线程阻塞    sync.acquireSharedInterruptibly(1);}</code></pre><p>重要方法:countDown()</p><pre><code>public void countDown() {    sync.releaseShared(1);}</code></pre><p>首先进入：</p><pre><code>public final boolean releaseShared(int arg) {    if (tryReleaseShared(arg)) {        //由最后一个执行countDown()方法的线程唤醒调用await()方法的线程        //这里唤醒的线程可能是多个        doReleaseShared();        return true;    }    return false;}</code></pre><p>再看看重要的：</p><pre><code>//AbstractQueuedSynchronizer.java//唤醒等待线程private void doReleaseShared() {    for (;;) {        Node h = head;        //在等待队列中，头节点中并没有保存正在等待的线程，其只是一个空的Node对象，真正等待的线程是从头节点的下一个节点开始存放的，        因而会有对头结点是否等于尾节点的判断        if (h != null &amp;&amp; h != tail) {            int ws = h.waitStatus;            if (ws == Node.SIGNAL) {                if (!compareAndSetWaitStatus(h, Node.SIGNAL, 0))                    continue;            // loop to recheck cases                unparkSuccessor(h);            }            else if (ws == 0 &amp;&amp;                     !compareAndSetWaitStatus(h, 0, Node.PROPAGATE))                continue;                // loop on failed CAS        }        if (h == head)                   // loop if head changed            break;    }}</code></pre><p>最后看一眼：</p><pre><code>//AbstractQueuedSynchronizer.javaprivate void unparkSuccessor(Node node) {    int ws = node.waitStatus;    if (ws &lt; 0)        compareAndSetWaitStatus(node, ws, 0);    Node s = node.next;    if (s == null || s.waitStatus &gt; 0) {        s = null;        for (Node t = tail; t != null &amp;&amp; t != node; t = t.prev)            if (t.waitStatus &lt;= 0)//没有结束，继续向前。                s = t;    }    if (s != null)        LockSupport.unpark(s.thread); //唤醒离传入节点最近的处于等待状态的节点线程}</code></pre><p>最后调用    countDown() 的线程会触发所有调用await()阻塞的线程。</p><p>分析：</p><pre><code>public void await() throws InterruptedException {    sync.acquireSharedInterruptibly(1);}</code></pre><p>进入：</p><pre><code>//AbstractQueuedSynchronizer.javapublic final void acquireSharedInterruptibly(int arg)        throws InterruptedException {    if (Thread.interrupted())        throw new InterruptedException();    if (tryAcquireShared(arg) &lt; 0)//自己Sync重写的方法        doAcquireSharedInterruptibly(arg);}</code></pre><p>重要方法:</p><pre><code>private void doAcquireSharedInterruptibly(int arg)    throws InterruptedException {    final Node node = addWaiter(Node.SHARED);    boolean failed = true;    try {        for (;;) {            final Node p = node.predecessor();            if (p == head) {                //唤醒后，tryAcquireShared(arg)将会大于0                int r = tryAcquireShared(arg);                if (r &gt;= 0) {                    setHeadAndPropagate(node, r);//当前节点设置为头节点，继续唤醒后面的节点                    p.next = null; // help GC                    failed = false;                    return;                }            }            //所有线程阻塞的地方            if (shouldParkAfterFailedAcquire(p, node) &amp;&amp;                parkAndCheckInterrupt())                throw new InterruptedException();        }    } finally {        if (failed)            cancelAcquire(node);    }}</code></pre><p>最后简单看一下：</p><pre><code>private void setHeadAndPropagate(Node node, int propagate) {    Node h = head; // Record old head for check below    setHead(node);    if (propagate &gt; 0 || h == null || h.waitStatus &lt; 0 ||        (h = head) == null || h.waitStatus &lt; 0) {        Node s = node.next;        if (s == null || s.isShared())            doReleaseShared();//继续唤醒下一个    }}</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;与CyclicBarrier的区别？&quot;&gt;&lt;a href=&quot;#与CyclicBarrier的区别？&quot; class=&quot;headerlink&quot; title=&quot;与CyclicBarrier的区别？&quot;&gt;&lt;/a&gt;与CyclicBarrier的区别？&lt;/h4&gt;&lt;pre&gt;&lt;cod
      
    
    </summary>
    
      <category term="Java并发编程" scheme="http://www.xuchunfa.cn/categories/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
    
  </entry>
  
  <entry>
    <title>适配器模式</title>
    <link href="http://www.xuchunfa.cn/2018/10/31/%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
    <id>http://www.xuchunfa.cn/2018/10/31/适配器模式/</id>
    <published>2018-10-31T02:09:23.000Z</published>
    <updated>2018-11-08T02:19:01.749Z</updated>
    
    <content type="html"><![CDATA[<p>类适配器UML图：</p><p><img src="https://i.imgur.com/0yrww9E.png" alt=""></p><p>对象适配器UML图：</p><p><img src="https://i.imgur.com/Q9tMtJ5.png" alt=""></p><p>适配器模式分三种：</p><ul><li><p>类适配器模式</p></li><li><p>对象适配器模式</p></li><li><p>特殊的缺省适配模式</p></li></ul><p>详解见博客：</p><p><a href="https://www.cnblogs.com/java-my-life/archive/2012/04/13/2442795.html" target="_blank" rel="noopener">java适配器详解</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;类适配器UML图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/0yrww9E.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;对象适配器UML图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/Q9tMtJ5.png&quot; a
      
    
    </summary>
    
      <category term="Java设计模式" scheme="http://www.xuchunfa.cn/categories/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>装饰者模式</title>
    <link href="http://www.xuchunfa.cn/2018/10/30/%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <id>http://www.xuchunfa.cn/2018/10/30/装饰者模式/</id>
    <published>2018-10-30T13:45:15.000Z</published>
    <updated>2018-11-08T06:42:39.776Z</updated>
    
    <content type="html"><![CDATA[<p>UML类图：</p><p><img src="https://i.imgur.com/4VrgAqN.jpg" alt=""></p><p>1.Component接口(也可以是抽象类)</p><pre><code>public interface Component {    void method()；}</code></pre><p>2.待装饰的对象:</p><pre><code>public class ConcreteComponent implements Component{public void method() {    System.out.println(&quot;原来的方法&quot;);}}</code></pre><p>3.抽象装饰器父类（并不是必须的）</p><pre><code>public abstract class Decorator implements Component{protected Component component;//组合待装饰的接口或者抽象类，更加灵活public Decorator(Component component) {    super();    this.component = component;}public void method() {    component.method();}}</code></pre><p>4.具体的装饰类：</p><pre><code>package com.decorator;public class ConcreteDecoratorA extends Decorator{public ConcreteDecoratorA(Component component) {    super(component);}public void methodA(){    System.out.println(&quot;被装饰器A扩展的功能&quot;);}public void method(){    System.out.println(&quot;针对该方法加一层A包装&quot;);    super.method();    System.out.println(&quot;A包装结束&quot;);}}</code></pre><ul><li>JAVA中的IO就是装饰者模式的具体应用：</li></ul><p><img src="https://i.imgur.com/RxUg3EW.jpg" alt=""></p><p>总结：</p><pre><code>装饰者模式能够很好的解决了，因为需求的变化需要重复添加功能相似的代码，即代码冗余；这种结构也能很好的解决“类爆炸”的情况。</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;UML类图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/4VrgAqN.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;1.Component接口(也可以是抽象类)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;public interface Component 
      
    
    </summary>
    
      <category term="Java设计模式" scheme="http://www.xuchunfa.cn/categories/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>观察者模式</title>
    <link href="http://www.xuchunfa.cn/2018/10/30/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <id>http://www.xuchunfa.cn/2018/10/30/观察者模式/</id>
    <published>2018-10-30T09:10:33.000Z</published>
    <updated>2018-10-30T12:50:13.744Z</updated>
    
    <content type="html"><![CDATA[<p>举个公众号订阅-发布消息的例子：</p><p>1.抽象观察者：</p><pre><code>public interface Observer{    public void update (String message);}</code></pre><p>2.具体观察者：</p><pre><code>public class User implements Observer {    private String name;    public User(String name) {        this.name = name;    }    @override    public void update (String message){           System.out.println(this.name + &quot;收到通知-&quot; + message);    }}</code></pre><p>3.抽象被观察者：</p><pre><code>public interface Subject{    public void addObserver (Observer Observer);    public void removeObserver (Observer Observer);    public void notify(String message);}</code></pre><p>4.具体被观察者：</p><pre><code>public class ConcreteSubject implements Subject {private List&lt;Observer&gt; usersList = new ArrayList&lt;Observer&gt;();@Overridepublic void addObserver (Observer observer) {    usersList.add(observer);}@Overridepublic void removeObserver (Observer observer) {    usersList.remove(observer);}@Overridepublic void notify(String message) {    for (Observer observer : usersList) {        observer.update(message);    }}}</code></pre><ul><li>下面是JDK1.8的观察者模式</li></ul><p>观察者：</p><pre><code>//每一个观察者都必须实现这个接口    public interface Observer {//第一个代表被观察者void update(Observable o, Object arg);}</code></pre><p>被观察者：</p><pre><code>public class Observable {    private boolean changed = false;    private Vector&lt;Observer&gt; obs;    public Observable() {        obs = new Vector&lt;&gt;();    }public synchronized void addObserver(Observer o) {    if (o == null)        throw new NullPointerException();    if (!obs.contains(o)) {        obs.addElement(o);    }}public synchronized void deleteObserver(Observer o) {    obs.removeElement(o);}public void notifyObservers() {    notifyObservers(null);}public void notifyObservers(Object arg) {    //一个临时的数组，用于并发访问被观察者时，留住观察者列表的当前状态    Object[] arrLocal;    //注意这个同步块，它表示在获取观察者列表时，该对象是被锁定的    //也就是说，在我获取到观察者列表之前，不允许其他线程改变观察者列表    synchronized (this) {        if (!changed)            return;        arrLocal = obs.toArray();        //将改变标识重新置回未改变        clearChanged();    }    //注意这个for循环没有在同步块，此时已经释放了被观察者的锁，其他线程可以改变观察者列表    //但是这并不影响我们当前进行的操作，因为我们已经将观察者列表复制到临时数组    //在通知时我们只通知数组中的观察者，当前删除和添加观察者，都不会影响我们通知的对象    for (int i = arrLocal.length-1; i&gt;=0; i--)        ((Observer)arrLocal[i]).update(this, arg);}</code></pre><p>再举个别人的例子：读者和作者的例子，多对多的关系。</p><p>实现观察者：</p><pre><code>//读者类，要实现观察者接口public class Reader implements Observer{private String name;public Reader(String name) {    super();    this.name = name;}public String getName() {    return name;}//读者可以关注某一位作者，关注则代表把自己加到作者的观察者列表里public void subscribe(String writerName)    //订阅的时候添加观察者    WriterManager.getInstance().getWriter(writerName).addObserver(this);}//读者可以取消关注某一位作者，取消关注则代表把自己从作者的观察者列表里删除public void unsubscribe(String writerName){    //取消订阅的时候添加观察者    WriterManager.getInstance().getWriter(writerName).deleteObserver(this);}//当关注的作者发表新小说时，会通知读者去看public void update(Observable o, Object obj) {    if (o instanceof Writer) {        Writer writer = (Writer) o;        System.out.println(name+&quot;知道&quot; + writer.getName() + &quot;发布了新书《&quot; + writer.getLastNovel() + &quot;》，非要去看！&quot;);    }}   }</code></pre><p>实现被观察者：</p><pre><code>//作者类，要继承自被观察者类public class Writer extends Observable{private String name;//作者的名称private String lastNovel;//记录作者最新发布的小说public Writer(String name) {    super();    this.name = name;    WriterManager.getInstance().add(this);}//作者发布新小说了，要通知所有关注自己的读者public void addNovel(String novel) {    System.out.println(name + &quot;发布了新书《&quot; + novel + &quot;》！&quot;);    lastNovel = novel;    setChanged();//被观察者状态的改变    notifyObservers();//通知观察者}public String getLastNovel() {    return lastNovel;}public String getName() {    return name;}}    </code></pre><p>作者管理器：单例模式实现。</p><pre><code>//管理器，保持一份独有的作者列表public class WriterManager{private Map&lt;String, Writer&gt; writerMap = new HashMap&lt;String, Writer&gt;();//添加作者public void add(Writer writer){    writerMap.put(writer.getName(), writer);}//根据作者姓名获取作者public Writer getWriter(String name){    return writerMap.get(name);}//单例private WriterManager(){}//静态内部类实现延迟初始化的单例模式public static WriterManager getInstance(){    return WriterManagerInstance.instance;}private static class WriterManagerInstance{    private static final WriterManager instance = new WriterManager();}}</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;举个公众号订阅-发布消息的例子：&lt;/p&gt;
&lt;p&gt;1.抽象观察者：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;public interface Observer{
    public void update (String message);
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2.具
      
    
    </summary>
    
      <category term="Java设计模式" scheme="http://www.xuchunfa.cn/categories/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>工厂方法模式</title>
    <link href="http://www.xuchunfa.cn/2018/10/30/%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F%E5%92%8C%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    <id>http://www.xuchunfa.cn/2018/10/30/工厂方法模式和抽象工厂模式/</id>
    <published>2018-10-30T03:32:40.000Z</published>
    <updated>2018-11-14T10:48:15.591Z</updated>
    
    <content type="html"><![CDATA[<ul><li>模式分类</li></ul><p><img src="https://i.imgur.com/Hdg4Ylc.png" alt=""></p><p>举个生产手机的例子增加印象：</p><p>1.抽象产品类：</p><pre><code>public abstract class Phone {//两种手机都可以打电话public void Call() {   //公共方法的实现}//两种手机都有品牌,但是品牌不同，所以是抽象的public abstract void PhoneBrand();}</code></pre><p>2.具体产品类：</p><pre><code>public class HUAWEIPhone extends Phone {   //品牌   @Override   public void PhoneBrand() {   Log.e(&quot;qzs&quot;,&quot;我的品牌是华为&quot;);   }}public class MIPhone extends Phone {  //品牌  @Override  public void PhoneBrand() {   Log.e(&quot;qzs&quot;,&quot;我的品牌是小米&quot;);   }}</code></pre><p>3.抽象工厂类：</p><pre><code>public abstract class PhoneFactory  {       public abstract &lt;T extends Phone&gt; T createPhone(Class&lt;T&gt; c);}</code></pre><p>4.具体工厂类：</p><pre><code>public class ConcretePhoneFactory extends PhoneFactory {  @Override   public &lt;T extends Phone&gt; T createPhone(Class&lt;T&gt; c) {   Phone phone=null;   try{       phone =(Phone)Class.forName(c.getName()).newInstance();       Log.e(&quot;qzs&quot;,&quot;生产了一个手机&quot;);       phone.PhoneBrand();   }catch (Exception e){   }   return (T) phone;   }}</code></pre><p>调用：</p><pre><code>PhoneFactory phoneFactory=new ConcretePhoneFactory();Phone huaiweiphone=phoneFactory.createPhone(HUAWEIPhone.class);Phone miphone=phoneFactory.createPhone(MIPhone.class);</code></pre><ul><li>工厂方法的延申</li></ul><p>1.简单工厂模式（静态工厂模式）</p><p>去掉工厂抽象类，具体工厂类的方法上加上static.</p><pre><code>public class ConcretePhoneFactory {   public  static &lt;T extends Phone&gt; T createPhone(Class&lt;T&gt; c) {   Phone phone=null;   try{       phone =(Phone)Class.forName(c.getName()).newInstance();       Log.e(&quot;qzs&quot;,&quot;生产了一个手机&quot;);       phone.PhoneBrand();   }catch (Exception e){   }   return (T) phone;   }}</code></pre><p>2.多工厂方法模式</p><p>每个产品都有自己的工厂，抽象工厂的方法不用再传参了。</p><p>抽象工厂类：</p><pre><code>public abstract class PhoneFactory  {    public abstract  Phone createPhone();}</code></pre><p>具体工厂类：</p><pre><code>public class ConcreteHUAWEIFactory extends PhoneFactory {   @Override   public Phone createPhone() {   Log.e(&quot;qzs&quot;,&quot;生产了一个华为手机&quot;);   return new HUAWEIPhone();   }}public class ConcreteMIFactory extends PhoneFactory {   @Override   public Phone createPhone() {        Log.e(&quot;qzs&quot;,&quot;生产了一个小米手机&quot;);   return new MIPhone();   }}</code></pre><p>3.工厂方法模式实现单例模式</p><p>单例类：</p><pre><code>public class Singleton {     private Singleton() {     }     public void doSomething() {     System.out.println(&quot;具体逻辑&quot;);     }  }</code></pre><p>单例工厂类：</p><pre><code>public class SingletonFactory {     private static Singleton singleton;     static {     try {         Class clazz = Class.forName(Singleton.class.getName());         Constructor constructor = clazz.getDeclaredConstructor();         constructor.setAccessible(true);         singleton = (Singleton) constructor.newInstance();     } catch (Exception e) {     }    }     public static Singleton getSingleton() {         return singleton;     }  }</code></pre><p>特点：</p><ul><li>在工厂方法模式中，客户端不需要知道具体产品类的类名，只需要知道所对应的工厂即可；</li></ul><p>优点：</p><ul><li><p>更符合开-闭原则。新增一种产品时，只需要增加相应的具体产品类和相应的工厂子类即可。例如增加苹果手机，增加一个IPhone具体类和一个IPhoneFactory类即可。</p></li><li><p>符合单一职责原则。每个具体工厂类只负责创建对应的产品。</p></li></ul><p>缺点：</p><ul><li>添加新产品时，系统类的个数会成倍增加，增加了额外的开销。</li></ul><hr><h4 id="抽象工厂模式和工厂方法模式的不同处？"><a href="#抽象工厂模式和工厂方法模式的不同处？" class="headerlink" title="抽象工厂模式和工厂方法模式的不同处？"></a>抽象工厂模式和工厂方法模式的不同处？</h4><pre><code>工厂方法模式在增加一个具体产品的时候，都要增加对应的工厂。但是抽象工厂模式只有在新增一个类型的具体产品时才需要新增工厂。例如跑车、商务车、越野车是不同的类型。抽象工厂模式中的具体工厂生产的是：一种类型的具体产品。</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;模式分类&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/Hdg4Ylc.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;举个生产手机的例子增加印象：&lt;/p&gt;
&lt;p&gt;1.抽象产品类：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;public a
      
    
    </summary>
    
      <category term="Java设计模式" scheme="http://www.xuchunfa.cn/categories/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>CopyOnWrite容器</title>
    <link href="http://www.xuchunfa.cn/2018/10/29/CopyOnWrite%E5%AE%B9%E5%99%A8/"/>
    <id>http://www.xuchunfa.cn/2018/10/29/CopyOnWrite容器/</id>
    <published>2018-10-29T06:14:34.000Z</published>
    <updated>2018-10-29T07:34:38.050Z</updated>
    
    <content type="html"><![CDATA[<h4 id="含义："><a href="#含义：" class="headerlink" title="含义："></a>含义：</h4><p>即写时复制的容器，往一个容器添加元素的时候，不直接往当前容器添加，而是先将当前容器进行Copy，复制出一个新的容器，然后新的容器里添加元素，添加完元素之后，再将原容器的引用指向新的容器。</p><pre><code>相比于ReentrantReadWriteLock的特性：写锁被写线程获取后，读写线程都会被阻塞。而COW不会被阻塞，性能又提升了。不同点：读写锁：读线程任何时候都是获取到最新的数据，满足数据实时性。原因在于--为了实现数据实时性，在写锁被获取后，读线程会等待或者当读锁被获取后，写线程会等待，从而解决“脏读”等问题。COW: 牺牲数据实时性满足数据的最终一致性。即读线程对数据的更新是延时感知的，因此读线程不会存在等待的情况。相同点：1. 两者都是通过读写分离的思想实现。2. 读线程间是互不阻塞的。</code></pre><ul><li>CopyOnWriteArrayList<e>：</e></li></ul><p>写操作：需要加锁。</p><pre><code>//CopyOnWriteArrayList.javapublic boolean add(E e) {    final ReentrantLock lock = this.lock;    lock.lock();    try {        Object[] elements = getArray();        int len = elements.length;        Object[] newElements = Arrays.copyOf(elements, len + 1);        newElements[len] = e;        setArray(newElements);//原引用指向新的容器        return true;    } finally {        lock.unlock();    }}//注意：private transient volatile Object[] array//volatile保证可见性，在进行写时看到的已经是最新的数据的，但是只读的话就有可能是未更新的数据。final void setArray(Object[] a) {    array = a;}</code></pre><p>读操作：不需要加锁，存在并发读，读到的可能是旧数据。</p><pre><code>public E get(int index) {    return get(getArray(), index);}</code></pre><h4 id="适用场景："><a href="#适用场景：" class="headerlink" title="适用场景："></a>适用场景：</h4><ul><li>CopyOnWriteArrayList适合使用在读操作远远大于写操作的场景里，比如缓存。</li></ul><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><pre><code>1.内存占用问题。2.数据一致性问题。</code></pre><p>- </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;含义：&quot;&gt;&lt;a href=&quot;#含义：&quot; class=&quot;headerlink&quot; title=&quot;含义：&quot;&gt;&lt;/a&gt;含义：&lt;/h4&gt;&lt;p&gt;即写时复制的容器，往一个容器添加元素的时候，不直接往当前容器添加，而是先将当前容器进行Copy，复制出一个新的容器，然后新的容器里添
      
    
    </summary>
    
      <category term="Java并发编程" scheme="http://www.xuchunfa.cn/categories/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
    
  </entry>
  
  <entry>
    <title>Redis基础</title>
    <link href="http://www.xuchunfa.cn/2018/10/25/Redis%E5%9F%BA%E7%A1%80/"/>
    <id>http://www.xuchunfa.cn/2018/10/25/Redis基础/</id>
    <published>2018-10-25T11:43:16.000Z</published>
    <updated>2018-10-26T02:26:21.270Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>Redis 命令</p><p>  1.expire key seconds ：为key指定过期时间，单位是秒。</p><p>  2.ttl key ：返回设置了过期时间的key的剩余过期秒数。</p></li></ul><pre><code>**String类型：**3.incr/decr key : 对key的值做加加/减减操作，值要为Integer类型。key不存在的话，则设置key为1。4.incrby/decrby key integer : 加减指定值。**List类型：就是一个每个子元素都是string类型的双向链表。**5.lpush/rpush key string : 在key对应list的头部/尾部添加字符串元素。6.llen key : 返回key对应list的长度。7.lrange key start end ：返回指定区间内的元素，下标从0开始，负值表示从后面计算，-1表示倒数第一个元素。8.ltrim key start end : 让列表只保留指定区间内的元素，不在指定区间之内的元素都将被删除。**Set类型：**8.sadd key member ：添加一个string元素到key对应的set集合中。9.smembers key ：返回key对应set的所有元素，结果是无序的。10.srem key member : 从key对应set中移除给定元素。11.srandmember key : 随机取set中的一个元素，但是不删除元素(spop会删除)。12.scard key ：返回set的元素个数。13.sismember key member ：判断member是否在set中。14.sinter key1 key2...keyN : 返回所有给定key的交集。15.sinterstore dstkey key1...keyN ：同sinter，但是会同时将交集存到dstkey下。可以推荐别人的共同好友给你。16.sunion key1 key2...keyN ：返回所有给定key的并集。17.sdiff key1 key2...keyN ：返回所有给定key的差集。18.sdiffstore dstkey key1...keyN ：同sdiff，并同时保存差集到dstkey下。**Zset类型：**19.zadd key score member ：添加元素到集合，元素在集合中存在则更新对应score。20.zincrby key incr member ：增加对应member的score值，然后移动元素并保持skip list有序。返回更新后的score值。21.zrank key member ：返回指定元素在集合中的排名（下标，非score）,集合中元素是按score从小到大排序的。第一排名返回的是0。22.zrevrank key member ：同上,但是集合中元素是按score从大到小排序。23.zrange/zrevrange key start end ：从集合中取指定区间的元素。返回的是有序结果，按score有序/逆序。24.zrangebyscore key min max ：返回集合中score在给定区间的元素。结果按score从小到大排序。25.zcount key min max ：返回集合中score在给定区间的数量。26.zcard key ：返回集合中元素个数。27.zscore key element ：返回给定元素对应的score。28.zremrangebyrank/zremrangebyscore key min max ：删除集合中排名/Score在给定区间的元素。**Hash类型：**29.hset key field value ： 设置hash field为指定值，如果key不存在，则先创建。30.hget key field ：获取指定的hash field。31.hincrby key field integer ：增加hash域的值。</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;p&gt;Redis 命令&lt;/p&gt;
&lt;p&gt;  1.expire key seconds ：为key指定过期时间，单位是秒。&lt;/p&gt;
&lt;p&gt;  2.ttl key ：返回设置了过期时间的key的剩余过期秒数。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;**
      
    
    </summary>
    
      <category term="Redis" scheme="http://www.xuchunfa.cn/categories/Redis/"/>
    
    
  </entry>
  
  <entry>
    <title>Kafka基础</title>
    <link href="http://www.xuchunfa.cn/2018/10/24/Kafka%E5%9F%BA%E7%A1%80/"/>
    <id>http://www.xuchunfa.cn/2018/10/24/Kafka基础/</id>
    <published>2018-10-24T08:21:58.000Z</published>
    <updated>2018-10-24T11:57:08.636Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>消息只能被消费组里面的一个消费者消费，如果被多个消费者消费，这些消费者必须在不同的消费组里面。</p></li><li><p>Kafka需要维持的元数据只有一个offset值，Consumer每消费一个消息，offset就会加1，消息的状态完全是由Consumer控制的，Consumer可以跟踪和重设这个offset值，这样的话Consumer就可以读取任意位置的消息。</p></li></ul><ul><li><p>replication-factor是以partition为单位的，只有一个partition的副本会被选举成leader作为读写用.</p></li><li><p>Producer在发送消息后，会得到一个响应，出现了一个重要的参数：默认值好像是0，在Producer中配置。</p><pre><code>acks = 0 : 表示producer不会等待broker的响应.acks = 1 : 表示producer会在leader partition收到消息时得到broker的一个确认.acks = -1 : producer会在所有备份的partition收到消息时得到broker的确认.</code></pre></li><li><p>Consumers的示意图：</p></li></ul><p><img src="https://i.imgur.com/Zz6TdbW.png" alt=""></p><ul><li><p>消息可靠性的保障</p><p>  Producer端：等待broker成功接收到消息的反馈。</p><p>  Consumer端：Broker记录了partition中的一个offset值,可以通过这个offset值重新找到上一个出错消息，再重新进行处理。</p></li><li><p>Producer Config的重要参数</p><pre><code>1.metadata.broker.list：启动时producer查询brokers的列表，可以是集群中所有brokers的一个子集。格式：host1:port1,host2:port2。2.request.required.acks：见上面的详解。3.request.timeout.ms：等待 Broker ack的超时时间，若等待时间超过此值，会返回客户端错误信息。4.producer.type：async表示异步，sync表示同步。如果设置成异步模式，可以允许生产者以batch的形式push数据，这样会极大的提高broker性能，推荐设置为异步</code></pre></li><li><p>Consumer Config的重要参数</p><pre><code>1.group.id：消费组id.2.zookeeper.connect:Consumer的zookeeper连接串，要和broker的配置一致.3.consumer.id : 默认为null,设置会自动生成。4.auto.commit.enable:默认值为true.Consumer会周期性的把当前消费的offset值保存到zookeeper。当consumer失败重启之后将会使用此值作为新开始消费的值。5.auto.commit.interval.ms:上述操作更新的频率。Consumer提交offset值到zookeeper的周期。</code></pre></li></ul><p>这里补充一下offset更新的方式：</p><pre><code>1.自动提交：设置enable.auto.commit=true，更新的频率根据参数【auto.commit.interval.ms】来定。这种方式也被称为【at most once】，“最多一次”fetch到消息后就可以更新offset，无论是否消费成功。2.手动提交：设置enable.auto.commit=false，这种方式称为【at least once】。“最少一次”fetch到消息后，等消费完成再调用方法【consumer.commitSync()】，手动更新offset；如果消费失败，则offset也不会更新，此条消息会被重复消费一次。</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;p&gt;消息只能被消费组里面的一个消费者消费，如果被多个消费者消费，这些消费者必须在不同的消费组里面。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Kafka需要维持的元数据只有一个offset值，Consumer每消费一个消息，offset就会加1，消息的状态完全是由Co
      
    
    </summary>
    
      <category term="大数据基础" scheme="http://www.xuchunfa.cn/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
  <entry>
    <title>Storm基础</title>
    <link href="http://www.xuchunfa.cn/2018/10/11/Storm%E5%9F%BA%E7%A1%80/"/>
    <id>http://www.xuchunfa.cn/2018/10/11/Storm基础/</id>
    <published>2018-10-11T01:26:53.000Z</published>
    <updated>2018-10-25T07:34:13.200Z</updated>
    
    <content type="html"><![CDATA[<p>1.元组（tuple）: 元组中的多个值将以逗号的形式分隔。一个元组是一个有序的数值列表，每个数组都被赋予一个命名。</p><p>2.GlobalGrouping ：所有的 tuple 都分发到 task ID最小的task实例上。</p><p>3.默认情况下，parallelism_hint将同时设置执行器和任务，可以自己修改任务数。</p><pre><code>builder.setSpout(&quot;wordSpout&quot;,new WordSpout(),4).setNumTasks(5)</code></pre><p>4.Storm的消息保障机制</p><ul><li><p>为了保障消息能被有效的处理，必须使用一个可以支持元组回放的可靠数据源(Kafka、RabbitMQspout等)</p></li><li><p>支持可靠性的三个重要因子</p><pre><code>1.具有可靠的spout数据源2.提供锚定元组的数据源3.具备知晓元组执行结果并且能通报错误的拓扑</code></pre></li><li><p>Spout发射锚定元组</p><pre><code>public abstract class BaseRichSpout extends BaseComponent implements IRichSpout {    @Override    public void ack(Object msgId) {    }    @Override    public void fail(Object msgId) {    }}</code></pre></li></ul><ul><li><p>Bolt隐式锚定、应答和容错</p><pre><code>BaseBasicBolt:自动提供了线程的锚定和应答功能。(BaseBasicBolt)注意：如果出现这种情况，处理聚合和合并的bolt往往要处理一大堆的tuple之后才能被ack，而这类tuple通常都是多输入的tuple，此时就应该使用下面的Bolt.</code></pre></li><li><p>Bolt显示锚定、应答和容错</p><pre><code>锚定：_collector.emit(tuple, new Values(word));应答：_collector.ack(tuple);容错：_collector.fail(tuple);</code></pre></li><li><p>Tuple树中的锚定</p><pre><code>//在BaseBasicBolt中发出的元组自动锚定到输入的元组（隐式的锚定）public void execute(Tuple tuple) {    String sentence = tuple.getString(0);    for(String word: sentence.split(&quot; &quot;)) {        //在BaseRichBolt中的显式锚定        //构建以spout元组作为根结点的消息树        _collector.emit(tuple, new Values(word));    }    _collector.ack(tuple);}</code></pre></li><li><p>Storm的asker任务</p><p>  作用是：保持对元组树的跟踪，检测一个spout元组是否经历了完整的处理过程，asker任务发现一棵元组树执行完成时，<br>  会发射一个消息到最初发射该元组的spout,此时spout会调用ask方法。（调用的是产生这个元组的Spout任务）。</p><p>  配置：Storm默认TOPOLOGY_ACKER_EXECUTORS和拓扑中配置的Worker的数量相同。可以配置TOPOLOGY_ACKER_EXECUTORS。</p></li><li><p>回放语义</p><pre><code>1.最多一次处理：不会发生任何重放事务。例如使用BaseBasicBolt时，把元组从spout发射出来时，不对元组增加锚定。2.至少一次处理：对单一元组进行多次重放，直至成功。3.仅一次处理：</code></pre></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1.元组（tuple）: 元组中的多个值将以逗号的形式分隔。一个元组是一个有序的数值列表，每个数组都被赋予一个命名。&lt;/p&gt;
&lt;p&gt;2.GlobalGrouping ：所有的 tuple 都分发到 task ID最小的task实例上。&lt;/p&gt;
&lt;p&gt;3.默认情况下，para
      
    
    </summary>
    
      <category term="Storm" scheme="http://www.xuchunfa.cn/categories/Storm/"/>
    
    
  </entry>
  
</feed>
