<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Flying in the ocean of knowledge</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.xuchunfa.cn/"/>
  <updated>2018-11-13T12:25:00.560Z</updated>
  <id>http://www.xuchunfa.cn/</id>
  
  <author>
    <name>Xu chunfa</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>代理模式</title>
    <link href="http://www.xuchunfa.cn/2018/11/08/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/"/>
    <id>http://www.xuchunfa.cn/2018/11/08/代理模式/</id>
    <published>2018-11-08T11:15:37.000Z</published>
    <updated>2018-11-13T12:25:00.560Z</updated>
    
    <content type="html"><![CDATA[<p>代理模式分很多种，下面一一简单总结介绍：</p><p>详细内容见博客：</p><p><a href="https://www.cnblogs.com/zuoxiaolong/p/pattern3.html" target="_blank" rel="noopener">左潇龙讲代理模式</a></p><ul><li><p>静态代理</p><pre><code>1.采用静态代理我们通常会使用组合的方式。2.代理类一般要持有一个被代理的对象的引用。3.对于我们不关心的方法，全部委托给被代理的对象处理。4.自己处理我们关心的方法。</code></pre></li><li><p>动态代理</p><pre><code>1.代理一系列类的某一些方法。</code></pre></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;代理模式分很多种，下面一一简单总结介绍：&lt;/p&gt;
&lt;p&gt;详细内容见博客：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/zuoxiaolong/p/pattern3.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;
      
    
    </summary>
    
      <category term="Java设计模式" scheme="http://www.xuchunfa.cn/categories/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>CountDownLatch详解</title>
    <link href="http://www.xuchunfa.cn/2018/11/04/CountDownLatch%E8%AF%A6%E8%A7%A3/"/>
    <id>http://www.xuchunfa.cn/2018/11/04/CountDownLatch详解/</id>
    <published>2018-11-04T13:15:07.000Z</published>
    <updated>2018-11-04T14:02:29.761Z</updated>
    
    <content type="html"><![CDATA[<h4 id="与CyclicBarrier的区别？"><a href="#与CyclicBarrier的区别？" class="headerlink" title="与CyclicBarrier的区别？"></a>与CyclicBarrier的区别？</h4><pre><code>1.CyclicBarrier主要用于一组线程之间的相互等待，而CountDownLatch一般用于一组线程等待另一组些线程。2.即 CountDownLatch中的countDown()+await() = CyclicBarrier中的await()。注意：在一个线程中先调用countDown()，然后调用await()。</code></pre><p>CyclicBarrier可以重复使用，CountDownLatch不能，原因在CyclicBarrier中：</p><pre><code> public void reset() {    final ReentrantLock lock = this.lock;    lock.lock();    try {        breakBarrier();   // break the current generation        nextGeneration(); // start a new generation    } finally {        lock.unlock();    }}</code></pre><ul><li>CountDownLatch</li></ul><p>等待其他线程都执行完后，主线程才继续往下执行。</p><p>构造函数：</p><pre><code>public CountDownLatch(int count) {    if (count &lt; 0) throw new IllegalArgumentException(&quot;count &lt; 0&quot;);    this.sync = new Sync(count);}</code></pre><p>内部类Sync：</p><pre><code>private static final class Sync extends AbstractQueuedSynchronizer {    private static final long serialVersionUID = 4982264981922014374L;    //AbstractQueuedSynchronizer.java 同步器    //private volatile int state;    Sync(int count) {        setState(count);    }    int getCount() {        return getState();    }    protected int tryAcquireShared(int acquires) {        return (getState() == 0) ? 1 : -1;    }    protected boolean tryReleaseShared(int releases) {        // Decrement count; signal when transition to zero        for (;;) {            int c = getState();            if (c == 0)                return false;            int nextc = c-1;            //如果state为c，则更新state为nextc.            //防止在getState()方法和compareAndSetState()方法调用之间对state进行了更改            if (compareAndSetState(c, nextc))                return nextc == 0;        }    }}</code></pre><p>重要方法：await()</p><pre><code>//CountDownLatch.javapublic void await() throws InterruptedException {    //调用上述的tryAcquireShared()    //state为0：表示调用该方法的线程可以继续往下执行    //state不为0: 表示该线程阻塞    sync.acquireSharedInterruptibly(1);}</code></pre><p>重要方法:countDown()</p><pre><code>public void countDown() {    sync.releaseShared(1);}</code></pre><p>首先进入：</p><pre><code>public final boolean releaseShared(int arg) {    if (tryReleaseShared(arg)) {        //由最后一个执行countDown()方法的线程唤醒调用await()方法的线程        //这里唤醒的线程可能是多个        doReleaseShared();        return true;    }    return false;}</code></pre><p>再看看重要的：</p><pre><code>//AbstractQueuedSynchronizer.java//唤醒等待线程private void doReleaseShared() {    for (;;) {        Node h = head;        //在等待队列中，头节点中并没有保存正在等待的线程，其只是一个空的Node对象，真正等待的线程是从头节点的下一个节点开始存放的，        因而会有对头结点是否等于尾节点的判断        if (h != null &amp;&amp; h != tail) {            int ws = h.waitStatus;            if (ws == Node.SIGNAL) {                if (!compareAndSetWaitStatus(h, Node.SIGNAL, 0))                    continue;            // loop to recheck cases                unparkSuccessor(h);            }            else if (ws == 0 &amp;&amp;                     !compareAndSetWaitStatus(h, 0, Node.PROPAGATE))                continue;                // loop on failed CAS        }        if (h == head)                   // loop if head changed            break;    }}</code></pre><p>最后看一眼：</p><pre><code>//AbstractQueuedSynchronizer.javaprivate void unparkSuccessor(Node node) {    int ws = node.waitStatus;    if (ws &lt; 0)        compareAndSetWaitStatus(node, ws, 0);    Node s = node.next;    if (s == null || s.waitStatus &gt; 0) {        s = null;        for (Node t = tail; t != null &amp;&amp; t != node; t = t.prev)            if (t.waitStatus &lt;= 0)//没有结束，继续向前。                s = t;    }    if (s != null)        LockSupport.unpark(s.thread); //唤醒离传入节点最近的处于等待状态的节点线程}</code></pre><p>最后调用    countDown() 的线程会触发所有调用await()阻塞的线程。</p><p>分析：</p><pre><code>public void await() throws InterruptedException {    sync.acquireSharedInterruptibly(1);}</code></pre><p>进入：</p><pre><code>//AbstractQueuedSynchronizer.javapublic final void acquireSharedInterruptibly(int arg)        throws InterruptedException {    if (Thread.interrupted())        throw new InterruptedException();    if (tryAcquireShared(arg) &lt; 0)//自己Sync重写的方法        doAcquireSharedInterruptibly(arg);}</code></pre><p>重要方法:</p><pre><code>private void doAcquireSharedInterruptibly(int arg)    throws InterruptedException {    final Node node = addWaiter(Node.SHARED);    boolean failed = true;    try {        for (;;) {            final Node p = node.predecessor();            if (p == head) {                //唤醒后，tryAcquireShared(arg)将会大于0                int r = tryAcquireShared(arg);                if (r &gt;= 0) {                    setHeadAndPropagate(node, r);//当前节点设置为头节点，继续唤醒后面的节点                    p.next = null; // help GC                    failed = false;                    return;                }            }            //所有线程阻塞的地方            if (shouldParkAfterFailedAcquire(p, node) &amp;&amp;                parkAndCheckInterrupt())                throw new InterruptedException();        }    } finally {        if (failed)            cancelAcquire(node);    }}</code></pre><p>最后简单看一下：</p><pre><code>private void setHeadAndPropagate(Node node, int propagate) {    Node h = head; // Record old head for check below    setHead(node);    if (propagate &gt; 0 || h == null || h.waitStatus &lt; 0 ||        (h = head) == null || h.waitStatus &lt; 0) {        Node s = node.next;        if (s == null || s.isShared())            doReleaseShared();//继续唤醒下一个    }}</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;与CyclicBarrier的区别？&quot;&gt;&lt;a href=&quot;#与CyclicBarrier的区别？&quot; class=&quot;headerlink&quot; title=&quot;与CyclicBarrier的区别？&quot;&gt;&lt;/a&gt;与CyclicBarrier的区别？&lt;/h4&gt;&lt;pre&gt;&lt;cod
      
    
    </summary>
    
      <category term="Java并发编程" scheme="http://www.xuchunfa.cn/categories/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
    
  </entry>
  
  <entry>
    <title>适配器模式</title>
    <link href="http://www.xuchunfa.cn/2018/10/31/%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
    <id>http://www.xuchunfa.cn/2018/10/31/适配器模式/</id>
    <published>2018-10-31T02:09:23.000Z</published>
    <updated>2018-11-08T02:19:01.749Z</updated>
    
    <content type="html"><![CDATA[<p>类适配器UML图：</p><p><img src="https://i.imgur.com/0yrww9E.png" alt=""></p><p>对象适配器UML图：</p><p><img src="https://i.imgur.com/Q9tMtJ5.png" alt=""></p><p>适配器模式分三种：</p><ul><li><p>类适配器模式</p></li><li><p>对象适配器模式</p></li><li><p>特殊的缺省适配模式</p></li></ul><p>详解见博客：</p><p><a href="https://www.cnblogs.com/java-my-life/archive/2012/04/13/2442795.html" target="_blank" rel="noopener">java适配器详解</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;类适配器UML图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/0yrww9E.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;对象适配器UML图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/Q9tMtJ5.png&quot; a
      
    
    </summary>
    
      <category term="Java设计模式" scheme="http://www.xuchunfa.cn/categories/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>装饰者模式</title>
    <link href="http://www.xuchunfa.cn/2018/10/30/%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <id>http://www.xuchunfa.cn/2018/10/30/装饰者模式/</id>
    <published>2018-10-30T13:45:15.000Z</published>
    <updated>2018-11-08T06:42:39.776Z</updated>
    
    <content type="html"><![CDATA[<p>UML类图：</p><p><img src="https://i.imgur.com/4VrgAqN.jpg" alt=""></p><p>1.Component接口(也可以是抽象类)</p><pre><code>public interface Component {    void method()；}</code></pre><p>2.待装饰的对象:</p><pre><code>public class ConcreteComponent implements Component{public void method() {    System.out.println(&quot;原来的方法&quot;);}}</code></pre><p>3.抽象装饰器父类（并不是必须的）</p><pre><code>public abstract class Decorator implements Component{protected Component component;//组合待装饰的接口或者抽象类，更加灵活public Decorator(Component component) {    super();    this.component = component;}public void method() {    component.method();}}</code></pre><p>4.具体的装饰类：</p><pre><code>package com.decorator;public class ConcreteDecoratorA extends Decorator{public ConcreteDecoratorA(Component component) {    super(component);}public void methodA(){    System.out.println(&quot;被装饰器A扩展的功能&quot;);}public void method(){    System.out.println(&quot;针对该方法加一层A包装&quot;);    super.method();    System.out.println(&quot;A包装结束&quot;);}}</code></pre><ul><li>JAVA中的IO就是装饰者模式的具体应用：</li></ul><p><img src="https://i.imgur.com/RxUg3EW.jpg" alt=""></p><p>总结：</p><pre><code>装饰者模式能够很好的解决了，因为需求的变化需要重复添加功能相似的代码，即代码冗余；这种结构也能很好的解决“类爆炸”的情况。</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;UML类图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/4VrgAqN.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;1.Component接口(也可以是抽象类)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;public interface Component 
      
    
    </summary>
    
      <category term="Java设计模式" scheme="http://www.xuchunfa.cn/categories/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>观察者模式</title>
    <link href="http://www.xuchunfa.cn/2018/10/30/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <id>http://www.xuchunfa.cn/2018/10/30/观察者模式/</id>
    <published>2018-10-30T09:10:33.000Z</published>
    <updated>2018-10-30T12:50:13.744Z</updated>
    
    <content type="html"><![CDATA[<p>举个公众号订阅-发布消息的例子：</p><p>1.抽象观察者：</p><pre><code>public interface Observer{    public void update (String message);}</code></pre><p>2.具体观察者：</p><pre><code>public class User implements Observer {    private String name;    public User(String name) {        this.name = name;    }    @override    public void update (String message){           System.out.println(this.name + &quot;收到通知-&quot; + message);    }}</code></pre><p>3.抽象被观察者：</p><pre><code>public interface Subject{    public void addObserver (Observer Observer);    public void removeObserver (Observer Observer);    public void notify(String message);}</code></pre><p>4.具体被观察者：</p><pre><code>public class ConcreteSubject implements Subject {private List&lt;Observer&gt; usersList = new ArrayList&lt;Observer&gt;();@Overridepublic void addObserver (Observer observer) {    usersList.add(observer);}@Overridepublic void removeObserver (Observer observer) {    usersList.remove(observer);}@Overridepublic void notify(String message) {    for (Observer observer : usersList) {        observer.update(message);    }}}</code></pre><ul><li>下面是JDK1.8的观察者模式</li></ul><p>观察者：</p><pre><code>//每一个观察者都必须实现这个接口    public interface Observer {//第一个代表被观察者void update(Observable o, Object arg);}</code></pre><p>被观察者：</p><pre><code>public class Observable {    private boolean changed = false;    private Vector&lt;Observer&gt; obs;    public Observable() {        obs = new Vector&lt;&gt;();    }public synchronized void addObserver(Observer o) {    if (o == null)        throw new NullPointerException();    if (!obs.contains(o)) {        obs.addElement(o);    }}public synchronized void deleteObserver(Observer o) {    obs.removeElement(o);}public void notifyObservers() {    notifyObservers(null);}public void notifyObservers(Object arg) {    //一个临时的数组，用于并发访问被观察者时，留住观察者列表的当前状态    Object[] arrLocal;    //注意这个同步块，它表示在获取观察者列表时，该对象是被锁定的    //也就是说，在我获取到观察者列表之前，不允许其他线程改变观察者列表    synchronized (this) {        if (!changed)            return;        arrLocal = obs.toArray();        //将改变标识重新置回未改变        clearChanged();    }    //注意这个for循环没有在同步块，此时已经释放了被观察者的锁，其他线程可以改变观察者列表    //但是这并不影响我们当前进行的操作，因为我们已经将观察者列表复制到临时数组    //在通知时我们只通知数组中的观察者，当前删除和添加观察者，都不会影响我们通知的对象    for (int i = arrLocal.length-1; i&gt;=0; i--)        ((Observer)arrLocal[i]).update(this, arg);}</code></pre><p>再举个别人的例子：读者和作者的例子，多对多的关系。</p><p>实现观察者：</p><pre><code>//读者类，要实现观察者接口public class Reader implements Observer{private String name;public Reader(String name) {    super();    this.name = name;}public String getName() {    return name;}//读者可以关注某一位作者，关注则代表把自己加到作者的观察者列表里public void subscribe(String writerName)    //订阅的时候添加观察者    WriterManager.getInstance().getWriter(writerName).addObserver(this);}//读者可以取消关注某一位作者，取消关注则代表把自己从作者的观察者列表里删除public void unsubscribe(String writerName){    //取消订阅的时候添加观察者    WriterManager.getInstance().getWriter(writerName).deleteObserver(this);}//当关注的作者发表新小说时，会通知读者去看public void update(Observable o, Object obj) {    if (o instanceof Writer) {        Writer writer = (Writer) o;        System.out.println(name+&quot;知道&quot; + writer.getName() + &quot;发布了新书《&quot; + writer.getLastNovel() + &quot;》，非要去看！&quot;);    }}   }</code></pre><p>实现被观察者：</p><pre><code>//作者类，要继承自被观察者类public class Writer extends Observable{private String name;//作者的名称private String lastNovel;//记录作者最新发布的小说public Writer(String name) {    super();    this.name = name;    WriterManager.getInstance().add(this);}//作者发布新小说了，要通知所有关注自己的读者public void addNovel(String novel) {    System.out.println(name + &quot;发布了新书《&quot; + novel + &quot;》！&quot;);    lastNovel = novel;    setChanged();//被观察者状态的改变    notifyObservers();//通知观察者}public String getLastNovel() {    return lastNovel;}public String getName() {    return name;}}    </code></pre><p>作者管理器：单例模式实现。</p><pre><code>//管理器，保持一份独有的作者列表public class WriterManager{private Map&lt;String, Writer&gt; writerMap = new HashMap&lt;String, Writer&gt;();//添加作者public void add(Writer writer){    writerMap.put(writer.getName(), writer);}//根据作者姓名获取作者public Writer getWriter(String name){    return writerMap.get(name);}//单例private WriterManager(){}//静态内部类实现延迟初始化的单例模式public static WriterManager getInstance(){    return WriterManagerInstance.instance;}private static class WriterManagerInstance{    private static final WriterManager instance = new WriterManager();}}</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;举个公众号订阅-发布消息的例子：&lt;/p&gt;
&lt;p&gt;1.抽象观察者：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;public interface Observer{
    public void update (String message);
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2.具
      
    
    </summary>
    
      <category term="Java设计模式" scheme="http://www.xuchunfa.cn/categories/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>工厂方法模式</title>
    <link href="http://www.xuchunfa.cn/2018/10/30/%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F%E5%92%8C%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    <id>http://www.xuchunfa.cn/2018/10/30/工厂方法模式和抽象工厂模式/</id>
    <published>2018-10-30T03:32:40.000Z</published>
    <updated>2018-11-14T10:48:15.591Z</updated>
    
    <content type="html"><![CDATA[<ul><li>模式分类</li></ul><p><img src="https://i.imgur.com/Hdg4Ylc.png" alt=""></p><p>举个生产手机的例子增加印象：</p><p>1.抽象产品类：</p><pre><code>public abstract class Phone {//两种手机都可以打电话public void Call() {   //公共方法的实现}//两种手机都有品牌,但是品牌不同，所以是抽象的public abstract void PhoneBrand();}</code></pre><p>2.具体产品类：</p><pre><code>public class HUAWEIPhone extends Phone {   //品牌   @Override   public void PhoneBrand() {   Log.e(&quot;qzs&quot;,&quot;我的品牌是华为&quot;);   }}public class MIPhone extends Phone {  //品牌  @Override  public void PhoneBrand() {   Log.e(&quot;qzs&quot;,&quot;我的品牌是小米&quot;);   }}</code></pre><p>3.抽象工厂类：</p><pre><code>public abstract class PhoneFactory  {       public abstract &lt;T extends Phone&gt; T createPhone(Class&lt;T&gt; c);}</code></pre><p>4.具体工厂类：</p><pre><code>public class ConcretePhoneFactory extends PhoneFactory {  @Override   public &lt;T extends Phone&gt; T createPhone(Class&lt;T&gt; c) {   Phone phone=null;   try{       phone =(Phone)Class.forName(c.getName()).newInstance();       Log.e(&quot;qzs&quot;,&quot;生产了一个手机&quot;);       phone.PhoneBrand();   }catch (Exception e){   }   return (T) phone;   }}</code></pre><p>调用：</p><pre><code>PhoneFactory phoneFactory=new ConcretePhoneFactory();Phone huaiweiphone=phoneFactory.createPhone(HUAWEIPhone.class);Phone miphone=phoneFactory.createPhone(MIPhone.class);</code></pre><ul><li>工厂方法的延申</li></ul><p>1.简单工厂模式（静态工厂模式）</p><p>去掉工厂抽象类，具体工厂类的方法上加上static.</p><pre><code>public class ConcretePhoneFactory {   public  static &lt;T extends Phone&gt; T createPhone(Class&lt;T&gt; c) {   Phone phone=null;   try{       phone =(Phone)Class.forName(c.getName()).newInstance();       Log.e(&quot;qzs&quot;,&quot;生产了一个手机&quot;);       phone.PhoneBrand();   }catch (Exception e){   }   return (T) phone;   }}</code></pre><p>2.多工厂方法模式</p><p>每个产品都有自己的工厂，抽象工厂的方法不用再传参了。</p><p>抽象工厂类：</p><pre><code>public abstract class PhoneFactory  {    public abstract  Phone createPhone();}</code></pre><p>具体工厂类：</p><pre><code>public class ConcreteHUAWEIFactory extends PhoneFactory {   @Override   public Phone createPhone() {   Log.e(&quot;qzs&quot;,&quot;生产了一个华为手机&quot;);   return new HUAWEIPhone();   }}public class ConcreteMIFactory extends PhoneFactory {   @Override   public Phone createPhone() {        Log.e(&quot;qzs&quot;,&quot;生产了一个小米手机&quot;);   return new MIPhone();   }}</code></pre><p>3.工厂方法模式实现单例模式</p><p>单例类：</p><pre><code>public class Singleton {     private Singleton() {     }     public void doSomething() {     System.out.println(&quot;具体逻辑&quot;);     }  }</code></pre><p>单例工厂类：</p><pre><code>public class SingletonFactory {     private static Singleton singleton;     static {     try {         Class clazz = Class.forName(Singleton.class.getName());         Constructor constructor = clazz.getDeclaredConstructor();         constructor.setAccessible(true);         singleton = (Singleton) constructor.newInstance();     } catch (Exception e) {     }    }     public static Singleton getSingleton() {         return singleton;     }  }</code></pre><p>特点：</p><ul><li>在工厂方法模式中，客户端不需要知道具体产品类的类名，只需要知道所对应的工厂即可；</li></ul><p>优点：</p><ul><li><p>更符合开-闭原则。新增一种产品时，只需要增加相应的具体产品类和相应的工厂子类即可。例如增加苹果手机，增加一个IPhone具体类和一个IPhoneFactory类即可。</p></li><li><p>符合单一职责原则。每个具体工厂类只负责创建对应的产品。</p></li></ul><p>缺点：</p><ul><li>添加新产品时，系统类的个数会成倍增加，增加了额外的开销。</li></ul><hr><h4 id="抽象工厂模式和工厂方法模式的不同处？"><a href="#抽象工厂模式和工厂方法模式的不同处？" class="headerlink" title="抽象工厂模式和工厂方法模式的不同处？"></a>抽象工厂模式和工厂方法模式的不同处？</h4><pre><code>工厂方法模式在增加一个具体产品的时候，都要增加对应的工厂。但是抽象工厂模式只有在新增一个类型的具体产品时才需要新增工厂。例如跑车、商务车、越野车是不同的类型。抽象工厂模式中的具体工厂生产的是：一种类型的具体产品。</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;模式分类&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/Hdg4Ylc.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;举个生产手机的例子增加印象：&lt;/p&gt;
&lt;p&gt;1.抽象产品类：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;public a
      
    
    </summary>
    
      <category term="Java设计模式" scheme="http://www.xuchunfa.cn/categories/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>CopyOnWrite容器</title>
    <link href="http://www.xuchunfa.cn/2018/10/29/CopyOnWrite%E5%AE%B9%E5%99%A8/"/>
    <id>http://www.xuchunfa.cn/2018/10/29/CopyOnWrite容器/</id>
    <published>2018-10-29T06:14:34.000Z</published>
    <updated>2018-10-29T07:34:38.050Z</updated>
    
    <content type="html"><![CDATA[<h4 id="含义："><a href="#含义：" class="headerlink" title="含义："></a>含义：</h4><p>即写时复制的容器，往一个容器添加元素的时候，不直接往当前容器添加，而是先将当前容器进行Copy，复制出一个新的容器，然后新的容器里添加元素，添加完元素之后，再将原容器的引用指向新的容器。</p><pre><code>相比于ReentrantReadWriteLock的特性：写锁被写线程获取后，读写线程都会被阻塞。而COW不会被阻塞，性能又提升了。不同点：读写锁：读线程任何时候都是获取到最新的数据，满足数据实时性。原因在于--为了实现数据实时性，在写锁被获取后，读线程会等待或者当读锁被获取后，写线程会等待，从而解决“脏读”等问题。COW: 牺牲数据实时性满足数据的最终一致性。即读线程对数据的更新是延时感知的，因此读线程不会存在等待的情况。相同点：1. 两者都是通过读写分离的思想实现。2. 读线程间是互不阻塞的。</code></pre><ul><li>CopyOnWriteArrayList<e>：</e></li></ul><p>写操作：需要加锁。</p><pre><code>//CopyOnWriteArrayList.javapublic boolean add(E e) {    final ReentrantLock lock = this.lock;    lock.lock();    try {        Object[] elements = getArray();        int len = elements.length;        Object[] newElements = Arrays.copyOf(elements, len + 1);        newElements[len] = e;        setArray(newElements);//原引用指向新的容器        return true;    } finally {        lock.unlock();    }}//注意：private transient volatile Object[] array//volatile保证可见性，在进行写时看到的已经是最新的数据的，但是只读的话就有可能是未更新的数据。final void setArray(Object[] a) {    array = a;}</code></pre><p>读操作：不需要加锁，存在并发读，读到的可能是旧数据。</p><pre><code>public E get(int index) {    return get(getArray(), index);}</code></pre><h4 id="适用场景："><a href="#适用场景：" class="headerlink" title="适用场景："></a>适用场景：</h4><ul><li>CopyOnWriteArrayList适合使用在读操作远远大于写操作的场景里，比如缓存。</li></ul><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><pre><code>1.内存占用问题。2.数据一致性问题。</code></pre><p>- </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;含义：&quot;&gt;&lt;a href=&quot;#含义：&quot; class=&quot;headerlink&quot; title=&quot;含义：&quot;&gt;&lt;/a&gt;含义：&lt;/h4&gt;&lt;p&gt;即写时复制的容器，往一个容器添加元素的时候，不直接往当前容器添加，而是先将当前容器进行Copy，复制出一个新的容器，然后新的容器里添
      
    
    </summary>
    
      <category term="Java并发编程" scheme="http://www.xuchunfa.cn/categories/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
    
  </entry>
  
  <entry>
    <title>Redis基础</title>
    <link href="http://www.xuchunfa.cn/2018/10/25/Redis%E5%9F%BA%E7%A1%80/"/>
    <id>http://www.xuchunfa.cn/2018/10/25/Redis基础/</id>
    <published>2018-10-25T11:43:16.000Z</published>
    <updated>2018-10-26T02:26:21.270Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>Redis 命令</p><p>  1.expire key seconds ：为key指定过期时间，单位是秒。</p><p>  2.ttl key ：返回设置了过期时间的key的剩余过期秒数。</p></li></ul><pre><code>**String类型：**3.incr/decr key : 对key的值做加加/减减操作，值要为Integer类型。key不存在的话，则设置key为1。4.incrby/decrby key integer : 加减指定值。**List类型：就是一个每个子元素都是string类型的双向链表。**5.lpush/rpush key string : 在key对应list的头部/尾部添加字符串元素。6.llen key : 返回key对应list的长度。7.lrange key start end ：返回指定区间内的元素，下标从0开始，负值表示从后面计算，-1表示倒数第一个元素。8.ltrim key start end : 让列表只保留指定区间内的元素，不在指定区间之内的元素都将被删除。**Set类型：**8.sadd key member ：添加一个string元素到key对应的set集合中。9.smembers key ：返回key对应set的所有元素，结果是无序的。10.srem key member : 从key对应set中移除给定元素。11.srandmember key : 随机取set中的一个元素，但是不删除元素(spop会删除)。12.scard key ：返回set的元素个数。13.sismember key member ：判断member是否在set中。14.sinter key1 key2...keyN : 返回所有给定key的交集。15.sinterstore dstkey key1...keyN ：同sinter，但是会同时将交集存到dstkey下。可以推荐别人的共同好友给你。16.sunion key1 key2...keyN ：返回所有给定key的并集。17.sdiff key1 key2...keyN ：返回所有给定key的差集。18.sdiffstore dstkey key1...keyN ：同sdiff，并同时保存差集到dstkey下。**Zset类型：**19.zadd key score member ：添加元素到集合，元素在集合中存在则更新对应score。20.zincrby key incr member ：增加对应member的score值，然后移动元素并保持skip list有序。返回更新后的score值。21.zrank key member ：返回指定元素在集合中的排名（下标，非score）,集合中元素是按score从小到大排序的。第一排名返回的是0。22.zrevrank key member ：同上,但是集合中元素是按score从大到小排序。23.zrange/zrevrange key start end ：从集合中取指定区间的元素。返回的是有序结果，按score有序/逆序。24.zrangebyscore key min max ：返回集合中score在给定区间的元素。结果按score从小到大排序。25.zcount key min max ：返回集合中score在给定区间的数量。26.zcard key ：返回集合中元素个数。27.zscore key element ：返回给定元素对应的score。28.zremrangebyrank/zremrangebyscore key min max ：删除集合中排名/Score在给定区间的元素。**Hash类型：**29.hset key field value ： 设置hash field为指定值，如果key不存在，则先创建。30.hget key field ：获取指定的hash field。31.hincrby key field integer ：增加hash域的值。</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;p&gt;Redis 命令&lt;/p&gt;
&lt;p&gt;  1.expire key seconds ：为key指定过期时间，单位是秒。&lt;/p&gt;
&lt;p&gt;  2.ttl key ：返回设置了过期时间的key的剩余过期秒数。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;**
      
    
    </summary>
    
      <category term="Redis" scheme="http://www.xuchunfa.cn/categories/Redis/"/>
    
    
  </entry>
  
  <entry>
    <title>Kafka基础</title>
    <link href="http://www.xuchunfa.cn/2018/10/24/Kafka%E5%9F%BA%E7%A1%80/"/>
    <id>http://www.xuchunfa.cn/2018/10/24/Kafka基础/</id>
    <published>2018-10-24T08:21:58.000Z</published>
    <updated>2018-10-24T11:57:08.636Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>消息只能被消费组里面的一个消费者消费，如果被多个消费者消费，这些消费者必须在不同的消费组里面。</p></li><li><p>Kafka需要维持的元数据只有一个offset值，Consumer每消费一个消息，offset就会加1，消息的状态完全是由Consumer控制的，Consumer可以跟踪和重设这个offset值，这样的话Consumer就可以读取任意位置的消息。</p></li></ul><ul><li><p>replication-factor是以partition为单位的，只有一个partition的副本会被选举成leader作为读写用.</p></li><li><p>Producer在发送消息后，会得到一个响应，出现了一个重要的参数：默认值好像是0，在Producer中配置。</p><pre><code>acks = 0 : 表示producer不会等待broker的响应.acks = 1 : 表示producer会在leader partition收到消息时得到broker的一个确认.acks = -1 : producer会在所有备份的partition收到消息时得到broker的确认.</code></pre></li><li><p>Consumers的示意图：</p></li></ul><p><img src="https://i.imgur.com/Zz6TdbW.png" alt=""></p><ul><li><p>消息可靠性的保障</p><p>  Producer端：等待broker成功接收到消息的反馈。</p><p>  Consumer端：Broker记录了partition中的一个offset值,可以通过这个offset值重新找到上一个出错消息，再重新进行处理。</p></li><li><p>Producer Config的重要参数</p><pre><code>1.metadata.broker.list：启动时producer查询brokers的列表，可以是集群中所有brokers的一个子集。格式：host1:port1,host2:port2。2.request.required.acks：见上面的详解。3.request.timeout.ms：等待 Broker ack的超时时间，若等待时间超过此值，会返回客户端错误信息。4.producer.type：async表示异步，sync表示同步。如果设置成异步模式，可以允许生产者以batch的形式push数据，这样会极大的提高broker性能，推荐设置为异步</code></pre></li><li><p>Consumer Config的重要参数</p><pre><code>1.group.id：消费组id.2.zookeeper.connect:Consumer的zookeeper连接串，要和broker的配置一致.3.consumer.id : 默认为null,设置会自动生成。4.auto.commit.enable:默认值为true.Consumer会周期性的把当前消费的offset值保存到zookeeper。当consumer失败重启之后将会使用此值作为新开始消费的值。5.auto.commit.interval.ms:上述操作更新的频率。Consumer提交offset值到zookeeper的周期。</code></pre></li></ul><p>这里补充一下offset更新的方式：</p><pre><code>1.自动提交：设置enable.auto.commit=true，更新的频率根据参数【auto.commit.interval.ms】来定。这种方式也被称为【at most once】，“最多一次”fetch到消息后就可以更新offset，无论是否消费成功。2.手动提交：设置enable.auto.commit=false，这种方式称为【at least once】。“最少一次”fetch到消息后，等消费完成再调用方法【consumer.commitSync()】，手动更新offset；如果消费失败，则offset也不会更新，此条消息会被重复消费一次。</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;p&gt;消息只能被消费组里面的一个消费者消费，如果被多个消费者消费，这些消费者必须在不同的消费组里面。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Kafka需要维持的元数据只有一个offset值，Consumer每消费一个消息，offset就会加1，消息的状态完全是由Co
      
    
    </summary>
    
      <category term="大数据基础" scheme="http://www.xuchunfa.cn/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
  <entry>
    <title>Storm基础</title>
    <link href="http://www.xuchunfa.cn/2018/10/11/Storm%E5%9F%BA%E7%A1%80/"/>
    <id>http://www.xuchunfa.cn/2018/10/11/Storm基础/</id>
    <published>2018-10-11T01:26:53.000Z</published>
    <updated>2018-10-25T07:34:13.200Z</updated>
    
    <content type="html"><![CDATA[<p>1.元组（tuple）: 元组中的多个值将以逗号的形式分隔。一个元组是一个有序的数值列表，每个数组都被赋予一个命名。</p><p>2.GlobalGrouping ：所有的 tuple 都分发到 task ID最小的task实例上。</p><p>3.默认情况下，parallelism_hint将同时设置执行器和任务，可以自己修改任务数。</p><pre><code>builder.setSpout(&quot;wordSpout&quot;,new WordSpout(),4).setNumTasks(5)</code></pre><p>4.Storm的消息保障机制</p><ul><li><p>为了保障消息能被有效的处理，必须使用一个可以支持元组回放的可靠数据源(Kafka、RabbitMQspout等)</p></li><li><p>支持可靠性的三个重要因子</p><pre><code>1.具有可靠的spout数据源2.提供锚定元组的数据源3.具备知晓元组执行结果并且能通报错误的拓扑</code></pre></li><li><p>Spout发射锚定元组</p><pre><code>public abstract class BaseRichSpout extends BaseComponent implements IRichSpout {    @Override    public void ack(Object msgId) {    }    @Override    public void fail(Object msgId) {    }}</code></pre></li></ul><ul><li><p>Bolt隐式锚定、应答和容错</p><pre><code>BaseBasicBolt:自动提供了线程的锚定和应答功能。(BaseBasicBolt)注意：如果出现这种情况，处理聚合和合并的bolt往往要处理一大堆的tuple之后才能被ack，而这类tuple通常都是多输入的tuple，此时就应该使用下面的Bolt.</code></pre></li><li><p>Bolt显示锚定、应答和容错</p><pre><code>锚定：_collector.emit(tuple, new Values(word));应答：_collector.ack(tuple);容错：_collector.fail(tuple);</code></pre></li><li><p>Tuple树中的锚定</p><pre><code>//在BaseBasicBolt中发出的元组自动锚定到输入的元组（隐式的锚定）public void execute(Tuple tuple) {    String sentence = tuple.getString(0);    for(String word: sentence.split(&quot; &quot;)) {        //在BaseRichBolt中的显式锚定        //构建以spout元组作为根结点的消息树        _collector.emit(tuple, new Values(word));    }    _collector.ack(tuple);}</code></pre></li><li><p>Storm的asker任务</p><p>  作用是：保持对元组树的跟踪，检测一个spout元组是否经历了完整的处理过程，asker任务发现一棵元组树执行完成时，<br>  会发射一个消息到最初发射该元组的spout,此时spout会调用ask方法。（调用的是产生这个元组的Spout任务）。</p><p>  配置：Storm默认TOPOLOGY_ACKER_EXECUTORS和拓扑中配置的Worker的数量相同。可以配置TOPOLOGY_ACKER_EXECUTORS。</p></li><li><p>回放语义</p><pre><code>1.最多一次处理：不会发生任何重放事务。例如使用BaseBasicBolt时，把元组从spout发射出来时，不对元组增加锚定。2.至少一次处理：对单一元组进行多次重放，直至成功。3.仅一次处理：</code></pre></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1.元组（tuple）: 元组中的多个值将以逗号的形式分隔。一个元组是一个有序的数值列表，每个数组都被赋予一个命名。&lt;/p&gt;
&lt;p&gt;2.GlobalGrouping ：所有的 tuple 都分发到 task ID最小的task实例上。&lt;/p&gt;
&lt;p&gt;3.默认情况下，para
      
    
    </summary>
    
      <category term="Storm" scheme="http://www.xuchunfa.cn/categories/Storm/"/>
    
    
  </entry>
  
  <entry>
    <title>Spring源码分析</title>
    <link href="http://www.xuchunfa.cn/2018/10/07/Spring%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    <id>http://www.xuchunfa.cn/2018/10/07/Spring源码分析/</id>
    <published>2018-10-07T01:05:37.000Z</published>
    <updated>2018-10-08T13:51:34.443Z</updated>
    
    <content type="html"><![CDATA[<p>1.在初始化ClassPathXmlApplicationContext时会调用到一个比较重要的方法，refresh()：</p><pre><code>//AbstractApplicationContext.javapublic void refresh() throws BeansException, IllegalStateException {    synchronized (this.startupShutdownMonitor) {        // 准备工作，记录下容器的启动时间、标记“已启动”状态、处理配置文件中的占位符        prepareRefresh();        //解析XML中的&lt;bean&gt;,将最后得到的beanDefinition注册到DefaultListableBeanFactory中去        ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();        // 设置 BeanFactory 的类加载器，添加几个 BeanPostProcessor，手动注册几个特殊的 bean        prepareBeanFactory(beanFactory);        try {            // 【这里需要知道 BeanFactoryPostProcessor 这个知识点，Bean 如果实现了此接口，             // 那么在容器初始化以后，Spring 会负责调用里面的 postProcessBeanFactory 方法。】            // 这里是提供给子类的扩展点，到这里的时候，所有的 Bean 都加载、注册完成了，但是都还没有初始化             // 具体的子类可以在这步的时候添加一些特殊的 BeanFactoryPostProcessor 的实现类或做点什么事            postProcessBeanFactory(beanFactory);            // 调用 BeanFactoryPostProcessor 各个实现类的 postProcessBeanFactory(factory) 方法            invokeBeanFactoryPostProcessors(beanFactory);            // 注册 BeanPostProcessor 的实现类，注意看和 BeanFactoryPostProcessor 的区别             // 此接口两个方法: postProcessBeforeInitialization 和 postProcessAfterInitialization             // 两个方法分别在 Bean 初始化之前和初始化之后得到执行。注意，到这里 Bean 还没初始化            registerBeanPostProcessors(beanFactory);            // Initialize message source for this context.            initMessageSource();            // Initialize event multicaster for this context.            initApplicationEventMulticaster();            // Initialize other special beans in specific context subclasses.            onRefresh();            // Check for listener beans and register them.            registerListeners();            // 重点，重点，重点             // 初始化所有的 singleton beans             //（lazy-init 的除外）            finishBeanFactoryInitialization(beanFactory);            // Last step: publish corresponding event.            finishRefresh();        }</code></pre><p>里面做了比较重要的事情：注册加载bean的定义信息，这里有两个重要的接口出现了，按先后顺序：</p><pre><code>//加载Bean的定义信息，包括属性啥的，但是此时还没有实例化Beanpublic interface BeanFactoryPostProcessor {void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) throws BeansException;}</code></pre><p>接下来：</p><pre><code>public interface BeanPostProcessor {//Bean 初始化之前执行的方法@Nullabledefault Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException {    return bean;}//Bean 初始化之后执行的方法@Nullabledefault Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException {    return bean;}}</code></pre><p>详细分析一下AbstractApplicationContext中的refresh()方法，按先后顺序挑重点看：</p><p>1.第一个重要方法：</p><pre><code>//AbstractApplicationContext.javaConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();</code></pre><p>里面涉及到了下面过程的分析。</p><p>在里面调用了重要方法：</p><pre><code>//AbstractRefreshableApplicationContext.java它是AbstractApplicationContext的子类refreshBeanFactory(){    DefaultListableBeanFactory beanFactory = createBeanFactory();    beanFactory.setSerializationId(getId());    customizeBeanFactory(beanFactory);    loadBeanDefinitions(beanFactory);}</code></pre><p>在这里容器中出现了比较重要的实例：DefaultListableBeanFactory。先看一下结构图：</p><p><img src="https://i.imgur.com/2mEAJAA.png" alt=""></p><p>然后调用了方法：</p><pre><code>//AbstractXmlApplicationContext.java//根据配置加载各个Bean 到 BeanFactory中去protected void loadBeanDefinitions(DefaultListableBeanFactory beanFactory) throws BeansException, IOException {    XmlBeanDefinitionReader beanDefinitionReader = new XmlBeanDefinitionReader(beanFactory);    beanDefinitionReader.setEnvironment(this.getEnvironment());    beanDefinitionReader.setResourceLoader(this);    beanDefinitionReader.setEntityResolver(new ResourceEntityResolver(this));    //加载XML文件    initBeanDefinitionReader(beanDefinitionReader);    loadBeanDefinitions(beanDefinitionReader);}</code></pre><p>其中加载各个Bean主要通过XmlBeanDefinitionReader实例完成。</p><p>然后经过一系列的巴拉巴拉操作将XML文件中的Bean进行解析，一个Bean解析成一个BeanDefinitionHolder实例：</p><pre><code>//BeanDefinitionHolder.javapublic class BeanDefinitionHolder implements BeanMetadataElement {private final BeanDefinition beanDefinition;private final String beanName;@Nullableprivate final String[] aliases;.....}</code></pre><p>然后开始了注册Bean的重头戏,其实就是将BeanDefinition放到beanDefinitionMap中去。</p><pre><code>//DefaultBeanDefinitionDocumentReader.javaprotected void processBeanDefinition(Element ele, BeanDefinitionParserDelegate delegate) {    BeanDefinitionHolder bdHolder = delegate.parseBeanDefinitionElement(ele);    if (bdHolder != null) {        bdHolder = delegate.decorateBeanDefinitionIfRequired(ele, bdHolder);        try {            //从这里开始注册            BeanDefinitionReaderUtils.registerBeanDefinition(bdHolder, getReaderContext().getRegistry());        }    }}</code></pre><p>接着来到：</p><pre><code>//BeanDefinitionReaderUtils.javapublic static void registerBeanDefinition(        BeanDefinitionHolder definitionHolder, BeanDefinitionRegistry registry)        throws BeanDefinitionStoreException {    String beanName = definitionHolder.getBeanName();    //真正开始注册    registry.registerBeanDefinition(beanName, definitionHolder.getBeanDefinition());    String[] aliases = definitionHolder.getAliases();    if (aliases != null) {        for (String alias : aliases) {            registry.registerAlias(beanName, alias);        }    }}</code></pre><p>最后进入：</p><pre><code>//DefaultListableBeanFactory.javapublic void registerBeanDefinition(String beanName, BeanDefinition beanDefinition)        throws BeanDefinitionStoreException {......    this.beanDefinitionMap.put(beanName, beanDefinition);    this.beanDefinitionNames.add(beanName);    this.manualSingletonNames.remove(beanName);......}</code></pre><p>至此为止，refresh()方法中的第一个方法obtainFreshBeanFactory()分析完毕。</p><hr><p>在执行到第二个重要方法之前已经完成的事：、</p><pre><code>BeanFactory 已经创建完成，并且所有的实现了 BeanFactoryPostProcessor 接口的 Bean 都已经初始化，并且其中的 postProcessBeanFactory(factory) 方法已经得到执行了。所有实现了 BeanPostProcessor 接口的 Bean 也都完成了初始化。剩下的就是初始化其他还没被初始化的 singleton beans 了，我们知道它们是单例的，如果没有设置懒加载，那么 Spring 会在接下来初始化所有的 singleton beans。</code></pre><p>第二个重要的方法：</p><pre><code>//AbstractApplicationContext.javaprotected void finishBeanFactoryInitialization(ConfigurableListableBeanFactory beanFactory) {    // Initialize conversion service for this context.    if (beanFactory.containsBean(CONVERSION_SERVICE_BEAN_NAME) &amp;&amp;            beanFactory.isTypeMatch(CONVERSION_SERVICE_BEAN_NAME, ConversionService.class)) {        beanFactory.setConversionService(                beanFactory.getBean(CONVERSION_SERVICE_BEAN_NAME, ConversionService.class));    }    // Register a default embedded value resolver if no bean post-processor    // (such as a PropertyPlaceholderConfigurer bean) registered any before:    // at this point, primarily for resolution in annotation attribute values.    if (!beanFactory.hasEmbeddedValueResolver()) {        beanFactory.addEmbeddedValueResolver(strVal -&gt; getEnvironment().resolvePlaceholders(strVal));    }    // Initialize LoadTimeWeaverAware beans early to allow for registering their transformers early.    String[] weaverAwareNames = beanFactory.getBeanNamesForType(LoadTimeWeaverAware.class, false, false);    for (String weaverAwareName : weaverAwareNames) {        getBean(weaverAwareName);    }    // Stop using the temporary ClassLoader for type matching.    beanFactory.setTempClassLoader(null);    // Allow for caching all bean definition metadata, not expecting further changes.    beanFactory.freezeConfiguration();    // Instantiate all remaining (non-lazy-init) singletons.    // 开始初始化未设置懒加载的单例Bean    beanFactory.preInstantiateSingletons();}</code></pre><p>一大波准备工作后，进入到初始化的方法：</p><pre><code>//DefaultListableBeanFactory.javapublic void preInstantiateSingletons() throws BeansException {    ......    // 准备实例化单例Bean/FactoryBean    for (String beanName : beanNames) {        RootBeanDefinition bd = getMergedLocalBeanDefinition(beanName);        if (!bd.isAbstract() &amp;&amp; bd.isSingleton() &amp;&amp; !bd.isLazyInit()) {            if (isFactoryBean(beanName)) {                Object bean = getBean(FACTORY_BEAN_PREFIX + beanName);                if (bean instanceof FactoryBean) {                    final FactoryBean&lt;?&gt; factory = (FactoryBean&lt;?&gt;) bean;                    boolean isEagerInit;                    if (System.getSecurityManager() != null &amp;&amp; factory instanceof SmartFactoryBean) {                        isEagerInit = AccessController.doPrivileged((PrivilegedAction&lt;Boolean&gt;)                                        ((SmartFactoryBean&lt;?&gt;) factory)::isEagerInit,                                getAccessControlContext());                    }                    else {                        isEagerInit = (factory instanceof SmartFactoryBean &amp;&amp;                                ((SmartFactoryBean&lt;?&gt;) factory).isEagerInit());                    }                    if (isEagerInit) {                        getBean(beanName);                    }                }            }            else {                //正常的话，创建单例Bean的入口                getBean(beanName);            }        }    ......}</code></pre><p>然后进入getBean方法：</p><pre><code>//AbstractBeanFactory.javapublic Object getBean(String name) throws BeansException {    return doGetBean(name, null, null, false);}</code></pre><p>接下来继续调用：</p><pre><code>//AbstractBeanFactory.javaprotected &lt;T&gt; T doGetBean(final String name, @Nullable final Class&lt;T&gt; requiredType,        @Nullable final Object[] args, boolean typeCheckOnly) throws BeansException {一系列巴拉巴拉：判断是不是sharedInstance、检查Bean是不是已经创建过、注册依赖Bean//创建单例Beanif (mbd.isSingleton()) {            sharedInstance = getSingleton(beanName, () -&gt; {                try {                    //真正创建Bean了                    return createBean(beanName, mbd, args);                }                catch (BeansException ex) {                        destroySingleton(beanName);                        throw ex;                    }                });            bean = getObjectForBeanInstance(sharedInstance, name, beanName, mbd);        }......}</code></pre><p>来看看createBean方法做了哪些事情：</p><pre><code>//AbstractAutowireCapableBeanFactory.javaprotected Object createBean(String beanName, RootBeanDefinition mbd, @Nullable Object[] args)throws BeanCreationException {......try {        //这里好像开始使用BeanPostProcessor接口的方法        Object bean = resolveBeforeInstantiation(beanName, mbdToUse);        if (bean != null) {            return bean;        }    }.....//继续进入创建Bean的方法Object beanInstance = doCreateBean(beanName, mbdToUse, args);.....// Initialize the bean instance.   Object exposedObject = bean;   try {  // 这一步也是非常关键的，这一步负责属性装配，因为前面的实例只是实例化了，并没有设值，这里就是设值  populateBean(beanName, mbd, instanceWrapper);  if (exposedObject != null) {     // 还记得 init-method 吗？还有 InitializingBean 接口？还有 BeanPostProcessor 接口？     // 这里就是处理 bean 初始化完成后的各种回调     exposedObject = initializeBean(beanName, exposedObject, mbd);  }......}</code></pre><p>继续干吧：</p><pre><code>//AbstractAutowireCapableBeanFactory.javarotected Object doCreateBean(final String beanName, final RootBeanDefinition mbd, final @Nullable Object[] args) throws BeanCreationException {if (instanceWrapper == null) {        //终于创建了!!!!        instanceWrapper = createBeanInstance(beanName, mbd, args);    }.....}</code></pre><p>继续进入方法：</p><pre><code>//AbstractAutowireCapableBeanFactory.javaprotected BeanWrapper createBeanInstance(String beanName, RootBeanDefinition mbd, @Nullable Object[] args) {巴拉巴拉的采用工厂方法创建Bean实例......}</code></pre><p>然后里面还可以继续深入到：</p><pre><code>//SimpleInstantiationStrategy.java//这是通过构造方法实例化的，当然也可以使用工厂方法实例化public Object instantiate(RootBeanDefinition bd, String beanName, BeanFactory owner) { //利用构造方法进行实例化BeanUtils.instantiateClass(constructorToUse);}</code></pre><p>到此为止，实例化完成了。。。。。但是属性还没注入。属性是在populateBean方法中注入的：</p><pre><code>//AbstractAutowireCapableBeanFactory.javaprotected void populateBean(String beanName, RootBeanDefinition mbd, BeanWrapper bw) {..... InstantiationAwareBeanPostProcessor ibp = (InstantiationAwareBeanPostProcessor) bp; // 这里有个非常有用的 BeanPostProcessor 进到这里: AutowiredAnnotationBeanPostProcessor // 对采用 @Autowired、@Value 注解的依赖进行设值，这里的内容也是非常丰富的，不过本文不会展开说了，感兴趣的读者请自行研究 pvs = ibp.postProcessPropertyValues(pvs, filteredPds, bw.getWrappedInstance(), beanName); if (pvs == null) {     return; }......}</code></pre><p>最后一步initializeBean，处理各种回调：</p><pre><code>protected Object initializeBean(final String beanName, final Object bean, RootBeanDefinition mbd){else {  // 如果 bean 实现了 BeanNameAware、BeanClassLoaderAware 或 BeanFactoryAware 接口，回调  invokeAwareMethods(beanName, bean);}Object wrappedBean = bean;if (mbd == null || !mbd.isSynthetic()) {  // BeanPostProcessor 的 postProcessBeforeInitialization 回调  wrappedBean = applyBeanPostProcessorsBeforeInitialization(wrappedBean, beanName);}try {  // 处理 bean 中定义的 init-method，  // 或者如果 bean 实现了 InitializingBean 接口，调用 afterPropertiesSet() 方法  invokeInitMethods(beanName, wrappedBean, mbd);}catch (Throwable ex) {  throw new BeanCreationException(        (mbd != null ? mbd.getResourceDescription() : null),        beanName, &quot;Invocation of init method failed&quot;, ex);}if (mbd == null || !mbd.isSynthetic()) {  //BeanPostProcessor 的 postProcessAfterInitialization 回调  wrappedBean = applyBeanPostProcessorsAfterInitialization(wrappedBean, beanName);}return wrappedBean;}</code></pre><p>最后贴一张Spring Bean 的生命周期图：</p><p><img src="https://i.imgur.com/4OETcMX.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1.在初始化ClassPathXmlApplicationContext时会调用到一个比较重要的方法，refresh()：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;//AbstractApplicationContext.java
public void refresh() thro
      
    
    </summary>
    
      <category term="Spring入门" scheme="http://www.xuchunfa.cn/categories/Spring%E5%85%A5%E9%97%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>Spring动态代理</title>
    <link href="http://www.xuchunfa.cn/2018/09/16/Spring%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/"/>
    <id>http://www.xuchunfa.cn/2018/09/16/Spring动态代理/</id>
    <published>2018-09-16T08:24:56.000Z</published>
    <updated>2018-10-10T12:42:56.434Z</updated>
    
    <content type="html"><![CDATA[<h4 id="关于动态代理的需要注意的问题？"><a href="#关于动态代理的需要注意的问题？" class="headerlink" title="关于动态代理的需要注意的问题？"></a>关于动态代理的需要注意的问题？</h4><pre><code>如果是类自身的调用，而不是代理对象去调用，那么就不会产生AOP，这样就不会把自己的代码织入到约定的流程中去。</code></pre><p>举个书上的例子：</p><pre><code>public class UserServiceImpl implements UserService {@Autowiredprivate UserDao userDao = null;//这里@Transactional会失效，每次调用不会都产生一个新事务@Override@Transactional(isolation = Isolation.READ_COMMITTED, propagation=Propagation.REQUIRED)public int insertUsers(List&lt;User&gt; userList){    int count = 0;    for(User : user){        count += insertUser(user);    }}@Override@Transactional(isolation = Isolation.READ_COMMITTED)public int insertUser(User user) {    return userDao.insertUser(user);}}</code></pre><p>解决办法如下：</p><pre><code>public class UserServiceImpl implements UserService，ApplicationContextAware {@Autowiredprivate UserDao userDao = null;private ApplicationContext applicationContext = null;@Overridevoid setApplicationContext(ApplicationContext applicationContext) throws BeansException{    this.applicationContext = applicationContext;}//这里@Transactional会失效，每次调用不会都产生一个新事务@Override@Transactional(isolation = Isolation.READ_COMMITTED, propagation=Propagation.REQUIRED)public int insertUsers(List&lt;User&gt; userList){    int count = 0;    UserService userService = applicationContext.getBean(UserService.class);    for(User : user){        count += insertUser(user);    }}@Override@Transactional(isolation = Isolation.READ_COMMITTED)public int insertUser(User user) {    return userDao.insertUser(user);}}    </code></pre><p>1.每一个动态代理类都必须要实现InvocationHandler这个接口.</p><pre><code>//该接口中的唯一方法public Object invoke(Object proxy, Method method, Object[] args) throws Throwable;</code></pre><p>2.Proxy代理类的newProxyInstance()方法</p><pre><code>//生成代理实例的三个参数：类加载器（代理类的？？？）、要代理的接口、代理类通过//InvocationHandler实现对外服务public static Object newProxyInstance(ClassLoader loader,Class&lt;?&gt;[] interfaces,InvocationHandler h)</code></pre><p>3.通过代理对象调用目标对象接口的方法，这是会跳转到由这个代理对象关联的 Handler 中的invoke方法去执行，而这个 Handler 对象又接受了一个 HelloServiceImpl 类型的参数，表示代理的就是这个真实对象。</p><p>4.通过 Proxy.newProxyInstance 创建的代理对象是在jvm运行时动态生成的一个对象，它并不是我们InvocationHandler类型，也不是我们定义的那组接口的类型，而是在运行时动态生成的一个对象，并且命名方式都是这样的形式，以$开头proxy为中，最后一个数字表示对象的标号。</p><p>5.代理类和委托类有同样的接口。</p><p>6.动态代理是代理一个接口下的多个实现类。代理的是接口所以代理类必须实现该接口.</p><pre><code>代理模式 = 接口 + 真实实现类 + 代理类。Spring AOP 要做的事情就是生成这个代理类。//AbstractAutoProxyCreator.javaprotected Object createProxy(Class&lt;?&gt; beanClass, @Nullable String beanName,        @Nullable Object[] specificInterceptors, TargetSource targetSource) {....ProxyFactory proxyFactory = new ProxyFactory();return proxyFactory.getProxy(getProxyClassLoader());}</code></pre><p>然后进入了ProxyFactory中：</p><pre><code>//ProxyFactory.javapublic Object getProxy(ClassLoader classLoader) {return createAopProxy().getProxy(classLoader);}</code></pre><p>首先创建一个AopProxy的实例：</p><pre><code>//ProxyCreatorSupport.javaprotected final synchronized AopProxy createAopProxy() {if (!this.active) {  activate();}return getAopProxyFactory().createAopProxy(this);}</code></pre><p>接着来到真正创建Aop代理实例的地方了：</p><pre><code>//DefaultAopProxyFactory.javapublic class DefaultAopProxyFactory implements AopProxyFactory, Serializable {@Overridepublic AopProxy createAopProxy(AdvisedSupport config) throws AopConfigException {  // (我也没用过这个optimize，默认false) || (proxy-target-class=true) || (没有接口)  if (config.isOptimize() || config.isProxyTargetClass() || hasNoUserSuppliedProxyInterfaces(config)) {     Class&lt;?&gt; targetClass = config.getTargetClass();     if (targetClass == null) {        throw new AopConfigException(&quot;TargetSource cannot determine target class: &quot; +              &quot;Either an interface or a target is required for proxy creation.&quot;);     }     // 如果要代理的类本身就是接口，也会用 JDK 动态代理     // 我也没用过这个。。。     if (targetClass.isInterface() || Proxy.isProxyClass(targetClass)) {        return new JdkDynamicAopProxy(config);     }     return new ObjenesisCglibAopProxy(config);  }  else {     // 如果有接口，会跑到这个分支     return new JdkDynamicAopProxy(config);  }}// 判断是否有实现自定义的接口private boolean hasNoUserSuppliedProxyInterfaces(AdvisedSupport config) {  Class&lt;?&gt;[] ifcs = config.getProxiedInterfaces();  return (ifcs.length == 0 || (ifcs.length == 1 &amp;&amp; SpringProxy.class.isAssignableFrom(ifcs[0])));}</code></pre><p>再回到原来通过工厂创建AopProxy代理实例的地方：</p><pre><code>createAopProxy().getProxy(classLoader);</code></pre><p>看看其中一个实现类 JdkDynamicAopProxy 的 getProxy 方法源码：</p><pre><code>public Object getProxy(@Nullable ClassLoader classLoader) {    if (logger.isDebugEnabled()) {        logger.debug(&quot;Creating JDK dynamic proxy: target source is &quot; + this.advised.getTargetSource());    }    Class&lt;?&gt;[] proxiedInterfaces = AopProxyUtils.completeProxiedInterfaces(this.advised, true);    findDefinedEqualsAndHashCodeMethods(proxiedInterfaces);    //this 代表 InvocationHandler 实例，因为 JdkDynamicAopProxy 本身实现了    //InvocationHandler接口    return Proxy.newProxyInstance(classLoader, proxiedInterfaces, this);}</code></pre><p>看一下 JdkDynamicAopProxy 源码的invoke方法：</p><pre><code>public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {    MethodInvocation invocation;    Object oldProxy = null;    boolean setProxyContext = false;    TargetSource targetSource = this.advised.targetSource;    Object target = null;    try {        if (!this.equalsDefined &amp;&amp; AopUtils.isEqualsMethod(method)) {            // The target does not implement the equals(Object) method itself.            //这个方法 equals 和 hashCode方法都不会产生代理内容            return equals(args[0]);        }        else if (!this.hashCodeDefined &amp;&amp; AopUtils.isHashCodeMethod(method)) {            // The target does not implement the hashCode() method itself.            return hashCode();        }        else if (method.getDeclaringClass() == DecoratingProxy.class) {            // There is only getDecoratedClass() declared -&gt; dispatch to proxy config.            return AopProxyUtils.ultimateTargetClass(this.advised);        }        else if (!this.advised.opaque &amp;&amp; method.getDeclaringClass().isInterface() &amp;&amp;                method.getDeclaringClass().isAssignableFrom(Advised.class)) {            // Service invocations on ProxyConfig with the proxy config...            return AopUtils.invokeJoinpointUsingReflection(this.advised, method, args);        }        Object retVal;        if (this.advised.exposeProxy) {            // Make invocation available if necessary.            oldProxy = AopContext.setCurrentProxy(proxy);            setProxyContext = true;        }        // Get as late as possible to minimize the time we &quot;own&quot; the target,        // in case it comes from a pool.        target = targetSource.getTarget();        Class&lt;?&gt; targetClass = (target != null ? target.getClass() : null);        // Get the interception chain for this method.        List&lt;Object&gt; chain = this.advised.getInterceptorsAndDynamicInterceptionAdvice(method, targetClass);        // Check whether we have any advice. If we don&apos;t, we can fallback on direct        // reflective invocation of the target, and avoid creating a MethodInvocation.        if (chain.isEmpty()) {            // We can skip creating a MethodInvocation: just invoke the target directly            // Note that the final invoker must be an InvokerInterceptor so we know it does            // nothing but a reflective operation on the target, and no hot swapping or fancy proxying.            Object[] argsToUse = AopProxyUtils.adaptArgumentsIfNecessary(method, args);            retVal = AopUtils.invokeJoinpointUsingReflection(target, method, argsToUse);        }        else {            invocation = new ReflectiveMethodInvocation(proxy, target, method, args, targetClass, chain);            //进行方法的拦截            retVal = invocation.proceed();        }        // Massage return value if necessary.        Class&lt;?&gt; returnType = method.getReturnType();        if (retVal != null &amp;&amp; retVal == target &amp;&amp;                returnType != Object.class &amp;&amp; returnType.isInstance(proxy) &amp;&amp;                !RawTargetAccess.class.isAssignableFrom(method.getDeclaringClass())) {            // Special case: it returned &quot;this&quot; and the return type of the method            // is type-compatible. Note that we can&apos;t help if the target sets            // a reference to itself in another returned object.            retVal = proxy;        }        else if (retVal == null &amp;&amp; returnType != Void.TYPE &amp;&amp; returnType.isPrimitive()) {            throw new AopInvocationException(                    &quot;Null return value from advice does not match primitive return type for: &quot; + method);        }        return retVal;    }    finally {        if (target != null &amp;&amp; !targetSource.isStatic()) {            // Must have come from TargetSource.            targetSource.releaseTarget(target);        }        if (setProxyContext) {            // Restore old proxy.            AopContext.setCurrentProxy(oldProxy);        }    }}</code></pre><p>7.动态代理类的字节码在程序运行时由Java反射机制动态生成.</p><p>8.代理类可以为委托类进行消息的预处理.</p><blockquote><p>静态代理类</p></blockquote><p>1.代理类和实现类都实现了要代理的接口.</p><p>2.将实现类的对象传到代理类中(通过构造方法),实际上就是调用要代理对象的方法.</p><hr><h4 id="什么叫切面"><a href="#什么叫切面" class="headerlink" title="什么叫切面?"></a>什么叫切面?</h4><pre><code>所谓&quot;切面&quot;，简单说就是那些与业务无关，却为业务模块所共同调用的逻辑或责任封装起来，便于减少系统的重复代码，降低模块之间的耦合度，并有利于未来的可操作性和可维护性。</code></pre><h4 id="多个切面的情况"><a href="#多个切面的情况" class="headerlink" title="多个切面的情况"></a>多个切面的情况</h4><pre><code>&lt;aop:config&gt;    //timeHandler相当于实现 InvocationHandler 接口的调用器,最后调用的是真实对象的方法(invoke方法实现)    &lt;aop:aspect id=&quot;time&quot; ref=&quot;timeHandler&quot; order=&quot;1&quot;&gt;        &lt;aop:pointcut id=&quot;addTime&quot; expression=&quot;execution(* com.xrq.aop.HelloWorld.print*(..))&quot; /&gt;        //抽取出来的业务模块的共同方法        &lt;aop:before method=&quot;printTime&quot; pointcut-ref=&quot;addTime&quot; /&gt;        &lt;aop:after method=&quot;printTime&quot; pointcut-ref=&quot;addTime&quot; /&gt;    &lt;/aop:aspect&gt;    &lt;aop:aspect id=&quot;log&quot; ref=&quot;logHandler&quot; order=&quot;2&quot;&gt;        &lt;aop:pointcut id=&quot;printLog&quot; expression=&quot;execution(* com.xrq.aop.HelloWorld.do*(..))&quot; /&gt;        &lt;aop:before method=&quot;LogBefore&quot; pointcut-ref=&quot;printLog&quot; /&gt;        &lt;aop:after method=&quot;LogAfter&quot; pointcut-ref=&quot;printLog&quot; /&gt;    &lt;/aop:aspect&gt;&lt;/aop:config&gt;</code></pre><p>输出:</p><pre><code>CurrentTime = 1446130273734Log before methodEnter HelloWorldImpl1.printHelloWorld()Log after methodCurrentTime = 1446130273735</code></pre><p>Spring默认以aspect的定义顺序作为织入顺序.order属性可以改变横切点的顺序.</p><hr><p>生成代理的底层原理：</p><pre><code>Bean生成代理的时机：在每个Bean初始化之后,先是AbstractAutowireCapableBeanFactory的initializeBean方法进行初始化。</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;关于动态代理的需要注意的问题？&quot;&gt;&lt;a href=&quot;#关于动态代理的需要注意的问题？&quot; class=&quot;headerlink&quot; title=&quot;关于动态代理的需要注意的问题？&quot;&gt;&lt;/a&gt;关于动态代理的需要注意的问题？&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;如果是类自身的调用，
      
    
    </summary>
    
      <category term="Java设计模式" scheme="http://www.xuchunfa.cn/categories/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>Linux基础</title>
    <link href="http://www.xuchunfa.cn/2018/09/09/Linux%E5%9F%BA%E7%A1%80/"/>
    <id>http://www.xuchunfa.cn/2018/09/09/Linux基础/</id>
    <published>2018-09-09T08:47:26.000Z</published>
    <updated>2018-09-09T08:53:24.522Z</updated>
    
    <content type="html"><![CDATA[<p>1.硬链接和软链接</p><p>硬链接装的是原文件的inode节点，软链接装的是原文件所在的路径。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1.硬链接和软链接&lt;/p&gt;
&lt;p&gt;硬链接装的是原文件的inode节点，软链接装的是原文件所在的路径。&lt;/p&gt;

      
    
    </summary>
    
      <category term="Linux基础" scheme="http://www.xuchunfa.cn/categories/Linux%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
  <entry>
    <title>面试常见Linux指令</title>
    <link href="http://www.xuchunfa.cn/2018/09/08/%E9%9D%A2%E8%AF%95%E5%B8%B8%E8%A7%81Linux%E6%8C%87%E4%BB%A4/"/>
    <id>http://www.xuchunfa.cn/2018/09/08/面试常见Linux指令/</id>
    <published>2018-09-08T08:12:30.000Z</published>
    <updated>2018-09-08T08:12:30.730Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>SpringBoot菜鸡入门</title>
    <link href="http://www.xuchunfa.cn/2018/09/07/SpringBoot%E8%8F%9C%E9%B8%A1%E5%85%A5%E9%97%A8/"/>
    <id>http://www.xuchunfa.cn/2018/09/07/SpringBoot菜鸡入门/</id>
    <published>2018-09-07T14:37:45.000Z</published>
    <updated>2018-10-09T01:21:42.024Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Bean-为什么是单例的？"><a href="#Bean-为什么是单例的？" class="headerlink" title="Bean 为什么是单例的？"></a>Bean 为什么是单例的？</h4><blockquote><p>SpringBoot干货</p></blockquote><p>1.spring-boot-starter-parent：提供相关的Maven依赖。</p><p>2.起步依赖 spring-boot-starter-xx:自动封装好你想要实现的功能的依赖。本质上是一个Maven对象模型。</p><p>3.Spring Boot Maven插件:把项目打包成可执行的JAR,所有的依赖都打进JAR包中。</p><p>4.注解</p><ul><li><p>@SpringBootApplication：开启自动配置。主要依靠的是其中的@EnableAutoConfiguration和@ComponentScan两个注解。</p></li><li><p>@ConfigurationProperties(prefix = “com.dudu”)：绑定一个对象的bean(例子中指的是ConfigBean)，解决在成员属性上一个个加@Value属性的麻烦。</p></li><li><p>@EnableConfigurationProperties(${ConfigBean.Class}):Spring Boot 入口类上的注解，指明要加载那个Bean.</p></li><li><p>@Configuration：代表是一个Java配置文件.用于定义配置类，可替换xml配置文件，被注解的类内部包含有一个或多个被@Bean注解的方法，这些方法将会被AnnotationConfigApplicationContext或者AnnotationConfigWebApplicationContext类进行扫描，并用于构建bean定义，初始化Spring容器</p></li><li><p>@Component:表明是哪个类被扫描进入Spring IoC 容器。相当于XML的配置。</p></li><li><p>@Bean:用在@Configuration注解的类中。</p></li><li><p>@ComponentScan:采用何种策略去扫描装配Bean，告诉 Spring 去哪里找到 bean</p><pre><code>The @ComponentScan annotation is used to automatically create beans for every class annotated with @Component, @Service, @Controller, @RestController, @Repository, ... and adds them to the Spring container (allowing them to be @Autowired).所以以上都是声明Bean的注解。</code></pre></li><li><p>@Autowired:它根据属性的类型找到对应的Bean进行注入。如果对应类型的 Bean 不是唯一的话，那么将属性的名称和Bean的名称进行匹配。还能作用于方法，从Ioc容器中找到对应的Bean进行注入。有个属性required默认为true，即找不到Bean就报错。</p></li><li><p>@ImportResource：如果你必须使用XML的配置，你可以使用@ImportResource来加载指定的XML配置。</p></li><li><p>@Primary:告诉Spring IoC容器，当发现有多个同样类型的Bean时,将优先使用@Primary注解的Bean。</p></li><li><p>@Qualifier:和 @Autowired 一起使用，通过它能够按照名称和类型找到对应的Bean进行注入。</p><pre><code>@Autowired：ByType@Qualifier（&quot;dog&quot;）:ByNameprivate Animal animal = null;</code></pre></li><li><p>@PostConstruct:定义Bean的初始化方法。</p></li><li><p>@PreDestroy:定义Bean的销毁方法。</p></li><li><p>@PropertySource:定义对应的属性文件</p><pre><code>@PropertySource(value = {&quot;classpath:jdbc.properties&quot;})</code></pre></li><li><p>@Conditional:条件装配 Bean,但需要实现Condition接口实现功能。</p><pre><code>@Conditional(DatabaseConditional.class)</code></pre></li><li><p>@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE):定义作用域的类型。</p></li><li><p>@ImportResource(value = {classpath:spring-other.xml}):引入 XML 配置的 Bean。</p></li><li><p>@Aspect:定义切面。</p><p>  约定的流程如下：</p><pre><code>1.@Pointcut(...)public void pointCut(){}2.Before(&quot;pointCut()&quot;)3.After(&quot;pointCut()&quot;)4.AfterReturning(&quot;pointCut()&quot;)5.AfterThrowing(&quot;pointCut()&quot;)</code></pre></li><li><p>@Pointcut:向Spring描述哪些类的哪些方法需要启用AOP编程。</p><pre><code>//Pointcut表达式@Pointcut(&quot;execution(* com.springboot.chapter4.*.*.*.*.print(..)) &amp;&amp; bean(&apos;userServiceImpl&apos;)&quot;)//Point签名public void pointCut()</code></pre><p>  1.*：表示任意返回类型的方法。</p><p>  2.（..）:表示任意参数进行匹配。</p></li><li><p>@RequestMapping():定义类的请求路径。用于读取Request请求的body部分数据，使用系统默认配置的HttpMessageConverter进行解析，然后把相应的数据绑定到要返回的对象上</p></li><li><p>ResponseBody:该注解用于将Controller的方法返回的对象，通过适当HttpMessageConverter转换为指定格式后，写入到Response对象的body数据区。以JSON的格式展现。</p></li><li><p>RequestBody:可以将JSON数据集转换成java对象。通常用来注解参数，从前端输入JSON数据集，数据会自动转换成@RequestBody注解的对象。</p></li><li><p>@DeclareParents:引入新的接口。</p><pre><code>@DeclareParents(value= &quot;com.springboot.chapter4.aspect.service.impl.UserServiceImpl+&quot;, defaultImpl=UserValidatorImpl.class)public UserValidator userValidator;</code></pre></li><li><p>@Order:指定切面的执行顺序。eg:@Order(1)</p></li><li><p>@RestController：就是@Controller+@ResponseBody组合，返回json字符串。使用@RestController这个注解，就不能返回jsp,html页面，视图解析器无法解析jsp,html页面。</p></li><li><p>SpringBootApplication：@SpringBootConfiguration + @EnableAutoConfiguration + @ComponentScan的组合体</p></li></ul><ul><li>@EnableAutoConfiguration：能够自动配置spring的上下文，试图猜测和配置你想要的bean类，通常会自动根据你的类路径和你的bean定义自动配置。</li></ul><ul><li><p>@GetMapping：是@RequestMapping(method = RequestMethod.GET)的缩写,组合注解是方法级别的只能用在方法上。获取数据。</p></li><li><p>@PostMapping：是@RequestMapping(method = RequestMethod.POST)的缩写。创建或更新数据。</p></li><li><p>@PutMapping:更新数据，对象的属性要全。</p></li><li><p>@DeleteMapping：删除数据。</p></li><li><p>@Result:修饰返回的结果集，关联实体类属性和数据库字段一一对应，如果实体类属性和数据库属性名保持一致，就不需要这个属性来修饰。和@Results注解一起使用。</p></li><li><p>@RequestParam：指定HTTP参数与控制器方法参数的映射关系。默认情况下被注解的参数是不允许为空的，可以通过required=false来设置。</p></li><li><p>@PathVariable：从request中接收请求的，用在REST风格中，对应URI.</p></li></ul><p>5.动态代理的方式？</p><p>当需要使用 AOP 的类拥有接口时，它会以 JDK 动态代理的方式运行，否则以CGLIB 运行。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;Bean-为什么是单例的？&quot;&gt;&lt;a href=&quot;#Bean-为什么是单例的？&quot; class=&quot;headerlink&quot; title=&quot;Bean 为什么是单例的？&quot;&gt;&lt;/a&gt;Bean 为什么是单例的？&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;SpringBoot干货&lt;
      
    
    </summary>
    
      <category term="Spring入门" scheme="http://www.xuchunfa.cn/categories/Spring%E5%85%A5%E9%97%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>树算法中好的思想</title>
    <link href="http://www.xuchunfa.cn/2018/09/06/%E6%A0%91%E7%AE%97%E6%B3%95%E4%B8%AD%E5%A5%BD%E7%9A%84%E6%80%9D%E6%83%B3/"/>
    <id>http://www.xuchunfa.cn/2018/09/06/树算法中好的思想/</id>
    <published>2018-09-06T03:16:41.000Z</published>
    <updated>2018-09-06T08:45:30.937Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>遍历直到叶子结点</p></blockquote><pre><code>//处理到达叶子结点时候的情况boolean isLeaf = pRoot.left == null &amp;&amp; pRoot.right == null;//前序遍历if(pRoot.left != null)     sumOfTrace(pRoot.left,sumValue);if(pRoot.right != null)     sumOfTrace(pRoot.right, sumValue);//处理到达叶子结点但未满足条件的情况......</code></pre><blockquote><p>提前结束树的遍历</p></blockquote><pre><code>//如果在左子树中找到结果 结果直接为Trueboolean isExisted = findPath(pRoot.left,node,list);//若不为True,继续遍历右子树if(!isExisted){     isExisted = findPath(pRoot.right,node,list);}</code></pre><blockquote><p>在需要辅助指针的时候可以从另一个函数里面传进去，而不需要定义成员变量</p></blockquote><pre><code>public BinaryTreeNode bstLinkedList(BinaryTreeNode pRoot){    BinaryTreeNode lastVisited = null;    //传入初始化为null的指针    reverse(pRoot,lastVisited);}</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;遍历直到叶子结点&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;//处理到达叶子结点时候的情况
boolean isLeaf = pRoot.left == null &amp;amp;&amp;amp; pRoot.right == null;

/
      
    
    </summary>
    
      <category term="树" scheme="http://www.xuchunfa.cn/categories/%E6%A0%91/"/>
    
    
  </entry>
  
  <entry>
    <title>Mysql笔记</title>
    <link href="http://www.xuchunfa.cn/2018/09/04/Mysql%E7%AC%94%E8%AE%B0/"/>
    <id>http://www.xuchunfa.cn/2018/09/04/Mysql笔记/</id>
    <published>2018-09-04T03:26:20.000Z</published>
    <updated>2018-11-06T02:27:33.823Z</updated>
    
    <content type="html"><![CDATA[<p><strong>1.数据类型理解</strong></p><p>int(M)： M表示的不是数据的最大长度，只是数据宽度，并不影响存储多少位长度的数据；</p><p>varchar(M)： M表示的是varchar类型数据在数据库中存储的最大长度，超过则不存；</p><p>char(N):存放的是字符的个数</p><p><strong>2.关键字的执行顺序</strong></p><p>（8）SELECT（9）DISTINCT (select_list)</p><p>（1）FROM (left_table)</p><p>（3）(join_type) JOIN (right_table)</p><p>（2）ON (join_condition)</p><p>（4）WHERE (where_condition)</p><p>（5）GROUP BY (group_by_list)</p><p>（6）WITH {CUTE|ROLLUP}</p><p>（7）HAVING (having_condition)</p><p>（10）ORDER BY (order_by_list)</p><p>（11）LIMIT (limit_number)</p><p><strong>3.LEFT JOIN 和 RIGHT JOIN 的区别</strong></p><ul><li><p>CROSS JOIN: 返回两个表的笛卡儿积。</p><p>  返回结果集的行号：<br>  set @mycnt = 0;<br>  select (@mycnt := @mycnt + 1) as ROWNUM,c.customers_id,o.order_id from customers AS c,orders AS o<br>  WHERE c.customers_id = o.customers_id </p></li></ul><ul><li><p>LEFT JOIN：以左表为基础的，左表的记录将会全部表示出来,而右表只会显示符合搜索条件的记录(例子中为: A.aID = B.bID).右表记录不足的地方均为NULL.（必须指定 ON 子句）</p></li><li><p>RIGHT JOIN：与上面的情况相反。</p></li><li><p>INNER JOIN: INNER可以省略，直接写成 JOIN 。并不以谁为基础,它只显示符合条件的记录.产生A和B的交集。INNER JOIN中的 WHERE 的过滤条件可以写在 ON 子句中。</p><pre><code>select c.customers_id,o.order_id,c.city from customers AS c JOIN orders AS o ON c.customers_id = o.customers_id AND c.customers_id = &apos;14&apos;或者使用 USING 关键字来简化 ON 子句：select c.customers_id,o.order_id,c.city from customers AS c JOIN orders AS o USING(customers_id) WHERE c.customers_id = &apos;14&apos;</code></pre></li></ul><p>当没有ON语句的时候会将 INNER JOIN 理解成 CROSS JOIN</p><p><strong>4.WHERE过滤器常见错误</strong></p><ul><li><p>在ON条件过滤器后还是会添加保留表中被ON过滤掉的记录,而WHERE条件是永久的过滤。</p></li><li><p>在WHERE条件中使用列别名,不能使用Select中的列别名，因为Select比 Where 晚执行，但是可以使用 From中列别名。</p><pre><code>错误：SELECT customers_id AS c,order_id AS o FROM orders WHERE c = &apos;aa&apos;</code></pre></li><li><p>在WHERE条件中使用统计的过滤</p><pre><code>错误：SELECT COUNT(customers_id) ,order_id  FROM orders WHERE COUNT(customers_id) &gt; 1</code></pre></li></ul><p><strong>5.COUNT容易犯的错误</strong></p><ul><li>COUNT(*)会把通过 OUTER JOIN 添加的行统计入内。而 COUNT(column_name) 函数返回指定列的值的数目（NULL 不会计入在内）</li></ul><p><strong>6.ORDER BY </strong></p><ul><li>NULL值在 ORDER BY 中被视为最小。</li></ul><p><strong>8.Having</strong></p><p>1.Having 通常于 Group by 一起使用。</p><p>2.弥补了WHERE关键字不能与聚合函数联合使用的不足。</p><p><strong>7.LIMIT</strong></p><ul><li>LIMIT n,m : 表示从第 n 条记录开始选择 m 条记录。对于数据量非常大的情景该执行语句的效率比较低。n = 0 代表第一行，limit 0,5 等价于 limit 5 都是返回前5行。</li></ul><p><strong>8.IN</strong></p><ul><li>IN引导的子句只能返回一个字段而 EXIST 可以返回多个。</li><li>EXIST 子句不在乎返回什么，而是在乎是不是有结果集返回。用于检查子查询是否至少会返回一行数据，该子查询实际上并不返回任何数据，而是返回值True或False.</li></ul><p><strong>9.DISTINCT</strong></p><ul><li><p>distinct必须放在开头</p><pre><code>select id, distinct name from A;   --会提示错误，因为distinct必须放在开头</code></pre></li></ul><hr><blockquote><p>Mysql函数总结</p></blockquote><p>1.MOD(N,M)：表示 N 除以 M 的余数。</p><p>2.DATEDIFF(datepart,startdate,enddate)：返回两个日期之间的时间。</p><p>3.DATEADD(datepart,number,date)：在日期中添加或减去指定的时间间隔。</p><pre><code>eg:计算当前月的一天SELECT DATEADD(mm,DATEDIFF(mm,0,getdate()),0)</code></pre><p>4.IFNULL（expr1，expr2）：在 expr1 的值不为 NULL的情况下都返回 expr1，否则返回 expr2。</p><hr><blockquote><p>Mysql索引的数据结构</p></blockquote><p>1.B+树索引只能找到某条记录所在的页，需要根据二分查找法来进一步找到记录所在页的具体位置。</p><blockquote><p>InnoDB（Mysql5.5以后，支持事务，是表锁） B+ 树索引(叶结点的data域保存了完整的数据记录)</p></blockquote><ul><li>聚集索引（每页大小16K）</li></ul><p>1.根据主键创建的一棵 B+ 树。</p><p>2.叶结点的data域是数据记录。</p><ul><li>辅助索引（二级索引）</li></ul><p>1.根据索引键（例如：用户信息表，主键是用户ID，这里可以在名字上面建立索引，即根据名字创建了一棵B+树）创建的一棵 B+ 树。</p><p>2.叶结点的data域存放的是主键值。</p><pre><code>优点：这样行在面临页分裂时,不需要单独维护二级索引.</code></pre><blockquote><p>MyISAM（不支持事务，是表锁） B+ 树索引（索引文件和数据文件实现了分离）</p></blockquote><p>1.叶结点的data域存放的是数据记录的地址。</p><p>2.主索引要求 key 是唯一的，辅助索引的key可以重复。</p><ul><li>联合索引(最左前缀)</li></ul><h4 id="关于回表的理解？"><a href="#关于回表的理解？" class="headerlink" title="关于回表的理解？"></a>关于回表的理解？</h4><pre><code>索引其实也是个表，不过是存放了索引列的列值和主键的Id值rowid的表如果select子句中，只有索引列，只需访问索引对象即可，不应回表。如果select子句中包含非索引列，就要读取索引存放的对应rowid，然后按照rowid去表中访问对应行的非索引列，就是回表了。</code></pre><p>1.对表上多个列进行索引。可以对第二个键值进行排序。</p><p>2.查询条件中出现联合索引第一列,或者全部,则能利用联合索引.即索引不能隔着字段使用。</p><pre><code>create index test_union_k1_k2_k3_k4_k5_indexon test_union (k1, k2, k3, k4, k5)；EXPLAIN SELECT * FROM test_union where k1= 1 AND k3 = 1;//这里只使用到了k1索引</code></pre><p>3.建复合索引时应该将最常用（频率）作限制条件的列放在最左边，依次递减。</p><ul><li>覆盖索引（使用的标识：Using index）</li></ul><p>1.索引包含所有需要查询的字段的值。</p><p>2.它只扫描索引的数据。</p><p>3.覆盖索引对InnoDB表特别有用。InnoDB的二级索引在叶子节点中保存了行的主键值，所以如果二级主键能够覆盖查询，则可以避免对主键索引的二次查询。在所有这些场景中，索引中满足查询的成本一般比查询要小的多。</p><p>4.覆盖索引优化查询的例子</p><pre><code>alter table t1 add index liu(inventory_id,return_date)；select tid,return_date from t1 order by inventory_id limit 50000,10;</code></pre><ul><li>全文索引（存储引擎MyISAM支持，新版本MYSQL5.6的InnoDB支持全文索引）</li></ul><p>1.支持的字段类型：char、varchar和text。</p><pre><code>例如：ALTER TABLE articles ADD FULLTEXT (&apos;title&apos;,&apos;body&apos;);SELECT * FROM articlesWHERE MATCH (title,body) AGAINST (&apos;database&apos;);把 title 和 body 字段里有 database 的数据记录全部查询出来</code></pre><p>2.不支持中文的全文检索,且对英文检索时忽略大小写</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;1.数据类型理解&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;int(M)： M表示的不是数据的最大长度，只是数据宽度，并不影响存储多少位长度的数据；&lt;/p&gt;
&lt;p&gt;varchar(M)： M表示的是varchar类型数据在数据库中存储的最大长度，超过则不存；&lt;/p&gt;

      
    
    </summary>
    
      <category term="Mysql基础" scheme="http://www.xuchunfa.cn/categories/Mysql%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
  <entry>
    <title>结点的最近祖先</title>
    <link href="http://www.xuchunfa.cn/2018/09/03/%E7%BB%93%E7%82%B9%E7%9A%84%E6%9C%80%E8%BF%91%E7%A5%96%E5%85%88/"/>
    <id>http://www.xuchunfa.cn/2018/09/03/结点的最近祖先/</id>
    <published>2018-09-03T11:46:51.000Z</published>
    <updated>2018-09-03T11:49:04.504Z</updated>
    
    <content type="html"><![CDATA[<h4 id="两个结点的最近祖先？"><a href="#两个结点的最近祖先？" class="headerlink" title="两个结点的最近祖先？"></a>两个结点的最近祖先？</h4><pre><code>public class CommonAncestor {//树为二叉搜索树的情况，默认node1 node2已经存在树中public BinaryTreeNode findCommonAncestor(BinaryTreeNode pRoot,int node1,int node2){    if(pRoot.data &gt; node1 &amp;&amp; pRoot.data &lt; node2 || pRoot.data &lt; node1 &amp;&amp; pRoot.data &gt; node2)        return pRoot;    if(node1 &lt; pRoot.data &amp;&amp; node2 &lt; pRoot.data){        return findCommonAncestor(pRoot.left,node1,node2);    }else if(node1 &gt; pRoot.data &amp;&amp; node2 &gt; pRoot.data){        return findCommonAncestor(pRoot.right,node1,node2);    }    return null;}//树为普通二叉树递归解法public BinaryTreeNode findCommonAncestor1(BinaryTreeNode pRoot,int node1,int node2){    //判断两个结点在同一条分支上？？？    if(pRoot == null)        return null;    if(pathIsExisted(pRoot.left,node1)){        if(pathIsExisted(pRoot.right,node2)) {            return pRoot;        }else//两个结点都在左子树中继续向下递归            return findCommonAncestor1(pRoot.left,node1,node2);    }else {        if(pathIsExisted(pRoot.left,node2))            return pRoot;        else//两个结点都在右子树中继续向下递归            return findCommonAncestor1(pRoot.right,node1,node2);    }}//判断路径中是否存在指定结点的值public boolean pathIsExisted(BinaryTreeNode pRoot,int node){    if(pRoot == null)        return false;    if(pRoot.data == node)        return true;    boolean flag = pathIsExisted(pRoot.left,node);    //如果找到了就不用继续递归了    if(!flag){        flag = pathIsExisted(pRoot.right,node);    }    return flag;}//树为普通二叉树非递归解法public BinaryTreeNode findCommonAncestor2(BinaryTreeNode pRoot,int node1,int node2){    //list1和list2保存根节点到目标结点的路径    List&lt;BinaryTreeNode&gt; list1 = new ArrayList&lt;BinaryTreeNode&gt;();    boolean path1 = findPath(pRoot,node1,list1);    List&lt;BinaryTreeNode&gt; list2 = new ArrayList&lt;BinaryTreeNode&gt;();    boolean path2 = findPath(pRoot,node2,list2);    BinaryTreeNode ancestor = null;    Iterator list1Iterator = list1.iterator();    Iterator list2Iterator = list2.iterator();    int diffIndex = -1;//默认没有出现两个不同的节点    int i = 0;    //找到两条路径岔开的那个位置结点，那么前一个结点就是最后一个公共路径上的结点，也就是最近的祖先    if(path1 &amp;&amp; path2){        while (list1Iterator.hasNext() &amp;&amp; list2Iterator.hasNext()){            if(list1Iterator.next() != list2Iterator.next()){                diffIndex = --i;                break;            }            i++;        }    }    if(diffIndex &gt;= 0)        ancestor = list1.get(diffIndex);    //diffIndex = -1 表示node1和node2在同一条路径上    return ancestor;}//保存包含指定节点路径结点的方法public boolean findPath(BinaryTreeNode pRoot, int node, List&lt;BinaryTreeNode&gt; list){    if(pRoot ==  null)        return false;    list.add(pRoot);    if(pRoot.data == node)        return true;    boolean isExisted = findPath(pRoot.left,node,list);    if(!isExisted){        isExisted = findPath(pRoot.right,node,list);    }    if(!isExisted)        list.remove(list.size()-1);    return isExisted;}public static void main(String[] args){    BinaryTree tree = new BinaryTree();    tree.createBinaryTree(tree.getRoot(),8);    tree.createBinaryTree(tree.getRoot(),3);    tree.createBinaryTree(tree.getRoot(),2);    tree.createBinaryTree(tree.getRoot(),5);    tree.createBinaryTree(tree.getRoot(),1);    tree.createBinaryTree(tree.getRoot(),12);    tree.createBinaryTree(tree.getRoot(),9);    CommonAncestor test = new CommonAncestor();    System.out.println(test.findCommonAncestor1(tree.getRoot(),3,2).data);}}</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;两个结点的最近祖先？&quot;&gt;&lt;a href=&quot;#两个结点的最近祖先？&quot; class=&quot;headerlink&quot; title=&quot;两个结点的最近祖先？&quot;&gt;&lt;/a&gt;两个结点的最近祖先？&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;public class CommonAncestor {

      
    
    </summary>
    
      <category term="树" scheme="http://www.xuchunfa.cn/categories/%E6%A0%91/"/>
    
    
  </entry>
  
  <entry>
    <title>丑数</title>
    <link href="http://www.xuchunfa.cn/2018/09/03/%E4%B8%91%E6%95%B0/"/>
    <id>http://www.xuchunfa.cn/2018/09/03/丑数/</id>
    <published>2018-09-03T02:30:46.000Z</published>
    <updated>2018-09-03T02:33:02.339Z</updated>
    
    <content type="html"><![CDATA[<h4 id="求解指定索引的丑数？"><a href="#求解指定索引的丑数？" class="headerlink" title="求解指定索引的丑数？"></a>求解指定索引的丑数？</h4><pre><code>public class UglyNumber {public static int resolve(int index){    if(index &lt;= 0){        throw new RuntimeException(&quot;参数非法&quot;);    }    int[] uglyNumber = new int[index];    uglyNumber[0] = 1;    int indexOf2,indexOf3,indexOf5;    indexOf2 = indexOf3 = indexOf5 = 0;    int uglyNumberIndex = 1;    while (uglyNumberIndex &lt; index){        int min = Min(uglyNumber[indexOf2]*2,uglyNumber[indexOf3]*3,uglyNumber[indexOf5]*5);        uglyNumber[uglyNumberIndex] = min;        //uglyNumber[uglyNumberIndex]代表的是目前数组中最大的丑数        while (uglyNumber[indexOf2]*2 &lt;= uglyNumber[uglyNumberIndex]){            indexOf2++;        }        //下次的uglyNumber[indexOf3]肯定就大于Max uglyNumber        while (uglyNumber[indexOf3]*3 &lt;= uglyNumber[uglyNumberIndex]){            indexOf3++;        }        while (uglyNumber[indexOf5]*5 &lt;= uglyNumber[uglyNumberIndex]){            indexOf5++;        }        uglyNumberIndex++;    }    return uglyNumber[index-1];}private static int Min(int i, int j, int k) {    int min;    return (min = i &lt; j ? i : j) &lt; k ? min : k;}public static void main(String[] args){    System.out.println(UglyNumber.resolve(100));}}</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;求解指定索引的丑数？&quot;&gt;&lt;a href=&quot;#求解指定索引的丑数？&quot; class=&quot;headerlink&quot; title=&quot;求解指定索引的丑数？&quot;&gt;&lt;/a&gt;求解指定索引的丑数？&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;public class UglyNumber {

pub
      
    
    </summary>
    
      <category term="策略类" scheme="http://www.xuchunfa.cn/categories/%E7%AD%96%E7%95%A5%E7%B1%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>逆序对的个数</title>
    <link href="http://www.xuchunfa.cn/2018/09/03/%E9%80%86%E5%BA%8F%E5%AF%B9%E7%9A%84%E4%B8%AA%E6%95%B0/"/>
    <id>http://www.xuchunfa.cn/2018/09/03/逆序对的个数/</id>
    <published>2018-09-03T02:28:22.000Z</published>
    <updated>2018-09-03T02:30:34.090Z</updated>
    
    <content type="html"><![CDATA[<h4 id="逆序对的个数？"><a href="#逆序对的个数？" class="headerlink" title="逆序对的个数？"></a>逆序对的个数？</h4><pre><code>public class InversePairNum {private int count = 0;private int[] temp;//保存排好序的中间结果，再将结果拷贝到原数组public int resolve(int[] num,int length){    temp = new int[length];    divideSort(num,0,length-1);    return count;}private void divideSort(int[] num, int left, int right) {    if(left &lt; right){        int mid = (left + right)/2;        //分成一个一个元素        divideSort(num,left,mid);        divideSort(num,mid+1,right);        mergeSort(num,left,mid,right);    }}private void mergeSort(int[] num, int left, int mid, int right) {    int leftEnd = mid;    int rightEnd = right;    int tempIndex = right;    //指针从后往前移    while (leftEnd &gt;= left &amp;&amp; rightEnd &gt;= mid + 1) {        if (num[leftEnd] &gt; num[rightEnd]) {            temp[tempIndex--] = num[leftEnd--];            //不是 right - mid 右边的指针是往前挪的            count += rightEnd - mid;        } else {            temp[tempIndex--] = num[rightEnd--];        }    }    //剩余元素    while (leftEnd &gt;= left) {        temp[tempIndex--] = num[leftEnd--];    }    while (rightEnd &gt;= mid + 1) {        temp[tempIndex--] = num[rightEnd--];    }    //利用临时数组temp来使得num数组左右两边都是有序的(递增的)    for (int i = left; i &lt;= right; i++) {        num[i] = temp[i];    }}public static void main(String[] args){    InversePairNum test = new InversePairNum();    int[] num = {4,6,3,1,5,7,2};    System.out.println(test.resolve(num,num.length));}}</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;逆序对的个数？&quot;&gt;&lt;a href=&quot;#逆序对的个数？&quot; class=&quot;headerlink&quot; title=&quot;逆序对的个数？&quot;&gt;&lt;/a&gt;逆序对的个数？&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;public class InversePairNum {

private int
      
    
    </summary>
    
      <category term="数组" scheme="http://www.xuchunfa.cn/categories/%E6%95%B0%E7%BB%84/"/>
    
    
  </entry>
  
</feed>
