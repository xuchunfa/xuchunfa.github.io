<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Flying in the ocean of knowledge</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.xuchunfa.cn/"/>
  <updated>2019-04-15T07:55:32.861Z</updated>
  <id>http://www.xuchunfa.cn/</id>
  
  <author>
    <name>Xu chunfa</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ReentrantLock中的Condition源码分析</title>
    <link href="http://www.xuchunfa.cn/2019/04/15/ReentrantLock%E4%B8%AD%E7%9A%84Condition%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    <id>http://www.xuchunfa.cn/2019/04/15/ReentrantLock中的Condition源码分析/</id>
    <published>2019-04-15T06:52:53.000Z</published>
    <updated>2019-04-15T07:55:32.861Z</updated>
    
    <content type="html"><![CDATA[<p>参考文献</p><p><a href="https://www.javadoop.com/post/AbstractQueuedSynchronizer-2" target="_blank" rel="noopener">Condition源码详解</a></p><p>上面的源码解析已经很清晰了，下面作简要的记录：</p><p>阻塞过程：</p><pre><code>public final void await() throws InterruptedException {    if (Thread.interrupted())        throw new InterruptedException();    //将节点加入到条件队列的队尾，并且清除掉Condition队列中所有取消的节点；    Node node = addConditionWaiter();    //释放掉线程获得锁，返回阻塞前的同步状态；    //synchronized中的 wait() 也是释放锁的；    int savedState = fullyRelease(node);    int interruptMode = 0;    while (!isOnSyncQueue(node)) {//判断节点是否在同步队列中        LockSupport.park(this);//不在Sync中挂起线程        if ((interruptMode = checkInterruptWhileWaiting(node)) != 0)            break;    }    if (acquireQueued(node, savedState) &amp;&amp; interruptMode != THROW_IE)        interruptMode = REINTERRUPT;    if (node.nextWaiter != null) // clean up if cancelled        unlinkCancelledWaiters();    if (interruptMode != 0)        reportInterruptAfterWait(interruptMode);}</code></pre><p>唤醒过程：</p><pre><code>public final void signal() {    if (!isHeldExclusively())        throw new IllegalMonitorStateException();    Node first = firstWaiter;    if (first != null)        doSignal(first);//唤醒Condition头节点}private void doSignal(Node first) {        do {            if ( (firstWaiter = first.nextWaiter) == null)                lastWaiter = null;            first.nextWaiter = null;        } while (!transferForSignal(first) &amp;&amp;//忽略取消节点，找到头节点并加入到同步队列                 (first = firstWaiter) != null);    }//Condition节点转移到Sync队列final boolean transferForSignal(Node node) {      //节点取消Condition排队    if (!compareAndSetWaitStatus(node, Node.CONDITION, 0))        return false;    Node p = enq(node);//返回的前驱节点    int ws = p.waitStatus;    if (ws &gt; 0 || !compareAndSetWaitStatus(p, ws, Node.SIGNAL))        LockSupport.unpark(node.thread);    return true;//正常情况下加入到阻塞队列}</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;参考文献&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.javadoop.com/post/AbstractQueuedSynchronizer-2&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Condition源码详解&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;
      
    
    </summary>
    
      <category term="面试总结" scheme="http://www.xuchunfa.cn/categories/%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/"/>
    
      <category term="Java并发编程" scheme="http://www.xuchunfa.cn/categories/%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
    
  </entry>
  
  <entry>
    <title>ReentrantLock源码分析</title>
    <link href="http://www.xuchunfa.cn/2019/04/15/ReentrantLock%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    <id>http://www.xuchunfa.cn/2019/04/15/ReentrantLock源码分析/</id>
    <published>2019-04-15T03:21:32.000Z</published>
    <updated>2019-04-15T03:50:52.905Z</updated>
    
    <content type="html"><![CDATA[<p>分公平锁和非公平锁两种，非公平锁的吞吐量更大，因为公平锁会进行大量的线程切换，造成性能下降，分别介绍：</p><p>主要区别：</p><pre><code>1.非公平锁在lock()方法中首先会通过CAS抢锁，若成功直接返回；否则和公平锁一样进入到tryAcquire方法；2.在tryAcquire方法中，若判断锁被释放（state=0），非公平锁会直接CAS抢锁，而公平锁会判断是否有其他线程更早地请求了该锁；</code></pre><p>公平锁源码：</p><pre><code>final void lock() {        acquire(1);    }protected final boolean tryAcquire(int acquires) {    final Thread current = Thread.currentThread();    int c = getState();    if (c == 0) {        //判断是否有其他线程正在等待        if (!hasQueuedPredecessors() &amp;&amp;            compareAndSetState(0, acquires)) {            setExclusiveOwnerThread(current);            return true;        }    }    else if (current == getExclusiveOwnerThread()) {        int nextc = c + acquires;        if (nextc &lt; 0)            throw new Error(&quot;Maximum lock count exceeded&quot;);        setState(nextc);        return true;    }    return false;}</code></pre><p>非公平锁：</p><pre><code>final void lock() {    if (compareAndSetState(0, 1))        setExclusiveOwnerThread(Thread.currentThread());    else        acquire(1);}protected final boolean tryAcquire(int acquires) {    return nonfairTryAcquire(acquires);}final boolean nonfairTryAcquire(int acquires) {    final Thread current = Thread.currentThread();    int c = getState();    if (c == 0) {        //直接尝试获取锁不考虑是否有线程等待        if (compareAndSetState(0, acquires)) {            setExclusiveOwnerThread(current);            return true;        }    }    else if (current == getExclusiveOwnerThread()) {        int nextc = c + acquires;        if (nextc &lt; 0) // overflow            throw new Error(&quot;Maximum lock count exceeded&quot;);        setState(nextc);        return true;    }    return false;}</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;分公平锁和非公平锁两种，非公平锁的吞吐量更大，因为公平锁会进行大量的线程切换，造成性能下降，分别介绍：&lt;/p&gt;
&lt;p&gt;主要区别：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1.非公平锁在lock()方法中首先会通过CAS抢锁，若成功直接返回；否则和公平锁一样进入到tryAcquire方
      
    
    </summary>
    
      <category term="面试总结" scheme="http://www.xuchunfa.cn/categories/%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/"/>
    
      <category term="Java并发编程" scheme="http://www.xuchunfa.cn/categories/%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
    
  </entry>
  
  <entry>
    <title>同步队列源码解析</title>
    <link href="http://www.xuchunfa.cn/2019/04/14/%E5%90%8C%E6%AD%A5%E9%98%9F%E5%88%97%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    <id>http://www.xuchunfa.cn/2019/04/14/同步队列源码解析/</id>
    <published>2019-04-14T11:12:09.000Z</published>
    <updated>2019-04-15T03:17:42.986Z</updated>
    
    <content type="html"><![CDATA[<p>1.总结下独占式的获取同步状态的流程，具体源码如下：</p><p>流程</p><pre><code>1.1 获取同步状态，若成功直接退出if语句，失败则准备加入同步队列；1.2 首先生成节点，再通过CAS的方法加入到队列尾部（for自旋)，若头节点为空，安全设置头节点；1.3 节点自旋获取同步状态,若前一个节点是头节点，则尝试获取同步状态；否则线程继续自旋；1.4 若获取同步状态成功，当前节点设置为头节点，成功返回，否则还是进入自旋等待；</code></pre><p>AQS的acquire方法源码：用户重写tryAcquire方法</p><pre><code>public final void acquire(int arg) {if (!tryAcquire(arg) &amp;&amp;//线程获取锁失败后，将会加入到同步队列    acquireQueued(addWaiter(Node.EXCLUSIVE), arg))    selfInterrupt();}</code></pre><p>看一下ReentrantLock的tryAcquire（公平锁FairSync）方法：</p><pre><code>protected final boolean tryAcquire(int acquires) {        final Thread current = Thread.currentThread();        int c = getState();        if (c == 0) {//当前没有线程获取到锁            if (!hasQueuedPredecessors() &amp;&amp;                compareAndSetState(0, acquires)) {                setExclusiveOwnerThread(current);                return true;            }        }        //当前线程重入到已经获得的锁，不存在并发        else if (current == getExclusiveOwnerThread()) {            int nextc = c + acquires;            if (nextc &lt; 0)                throw new Error(&quot;Maximum lock count exceeded&quot;);            setState(nextc);            return true;        }        return false;    }}</code></pre><p>若获取同步状态失败，进入addWaiter方法：</p><pre><code>private Node addWaiter(Node mode) {    Node node = new Node(Thread.currentThread(), mode);    // Try the fast path of enq; backup to full enq on failure    Node pred = tail;    if (pred != null) {        node.prev = pred;        //确保线程正确有序的加入到同步队列        if (compareAndSetTail(pred, node)) {            pred.next = node;            return node;        }    }    enq(node);    return node;}</code></pre><p>若尾节点被其他线程更改过了或者tail为空，则跳出if进入到enq(node)方法：</p><pre><code>private Node enq(final Node node) {    for (;;) {//节点加入到同步队列中去才退出循环        Node t = tail;        if (t == null) {             if (compareAndSetHead(new Node()))//同步队列的头节点                tail = head;        } else {            node.prev = t;            if (compareAndSetTail(t, node)) {                t.next = node;                return t;            }        }    }}</code></pre><p>加入到同步队列中的每个节点会通过自旋不断获取同步状态：详见acquire(arg)中的acquireQueued方法</p><pre><code>final boolean acquireQueued(final Node node, int arg) {    boolean failed = true;    try {        //        boolean interrupted = false;        for (;;) {//不断自旋获取同步状态            //直到节点的前一个节点释放锁，并且前一个节点是头节点            final Node p = node.predecessor();            if (p == head &amp;&amp; tryAcquire(arg)) {                setHead(node);                p.next = null; // help GC                failed = false;                return interrupted;            }            //执行到这说明当前节点的前驱不是head或者tryAcquire(arg)失败            if (shouldParkAfterFailedAcquire(p, node) &amp;&amp;                parkAndCheckInterrupt())                interrupted = true;        }    } finally {        if (failed)//tryAcquire()方法抛异常时            cancelAcquire(node);    }}</code></pre><p>如果当前节点获取锁失败的话，将会进行线程的挂起操作：</p><p>waitStatus的状态分析：代表后继节点的状态。</p><pre><code>ws = 0 : 默认加入节点的状态值；ws = -1 : 后继节点等待当前节点（前驱节点）被唤醒；ws = 1：等待节点等待超时或被中断取消了等待；ws = -2:后继节点等待在Condition队列中，其他线程对Condition调用signal（）方法后，节点将从等待队列转移到同步队列；private static boolean shouldParkAfterFailedAcquire(Node pred, Node node) {    int ws = pred.waitStatus;    if (ws == Node.SIGNAL)//前驱节点状态正常，需要将当前节点挂起        return true;    if (ws &gt; 0) {//说明前驱节点取消了排队，需要向前找到状态正常的节点        //waitStatus = 1表示线程取消了排队        do {            node.prev = pred = pred.prev;        } while (pred.waitStatus &gt; 0);        pred.next = node;    } else {        //正常情况下ws=0，CAS将前驱节点设置为Node.SIGNAL        compareAndSetWaitStatus(pred, ws, Node.SIGNAL);    }    return false;}//前提为true的条件下，LockSupport工具将线程挂起private final boolean parkAndCheckInterrupt() {    LockSupport.park(this);    return Thread.interrupted();}</code></pre><hr><p>再看一下释放锁的源码：</p><p>AQS中的release(int arg)方法：</p><pre><code>public final boolean release(int arg) {    if (tryRelease(arg)) {        Node h = head;        if (h != null &amp;&amp; h.waitStatus != 0)            unparkSuccessor(h);        return true;    }    return false;}</code></pre><p>其中以ReentrantLock为例，重写了tryRelease方法：</p><pre><code>protected final boolean tryRelease(int releases) {        int c = getState() - releases;        if (Thread.currentThread() != getExclusiveOwnerThread())            throw new IllegalMonitorStateException();        boolean free = false;        if (c == 0) {//没有出现重入直接释放锁            free = true;            setExclusiveOwnerThread(null);        }        setState(c);        return free;    }</code></pre><p>LockSupport唤醒线程：</p><pre><code>private void unparkSuccessor(Node node) {    int ws = node.waitStatus;    if (ws &lt; 0)        compareAndSetWaitStatus(node, ws, 0);    Node s = node.next;    if (s == null || s.waitStatus &gt; 0) {        s = null;        //从后往前找到最靠近头节点的即将被唤醒的线程（waitStatus&lt;=0）        for (Node t = tail; t != null &amp;&amp; t != node; t = t.prev)            if (t.waitStatus &lt;= 0)                s = t;    }    if (s != null)        LockSupport.unpark(s.thread);}</code></pre><p>参考文献：</p><p><a href="https://www.javadoop.com/post/AbstractQueuedSynchronizer" target="_blank" rel="noopener">同步队列源码分析第一篇</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1.总结下独占式的获取同步状态的流程，具体源码如下：&lt;/p&gt;
&lt;p&gt;流程&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1.1 获取同步状态，若成功直接退出if语句，失败则准备加入同步队列；

1.2 首先生成节点，再通过CAS的方法加入到队列尾部（for自旋)，若头节点为空，安全设置头节
      
    
    </summary>
    
      <category term="面试总结" scheme="http://www.xuchunfa.cn/categories/%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/"/>
    
      <category term="Java并发编程" scheme="http://www.xuchunfa.cn/categories/%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
    
  </entry>
  
  <entry>
    <title>判断数组是否是BST的后序遍历</title>
    <link href="http://www.xuchunfa.cn/2019/04/03/%E5%88%A4%E6%96%AD%E6%95%B0%E7%BB%84%E6%98%AF%E5%90%A6%E6%98%AFBST%E7%9A%84%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86/"/>
    <id>http://www.xuchunfa.cn/2019/04/03/判断数组是否是BST的后序遍历/</id>
    <published>2019-04-03T08:42:57.000Z</published>
    <updated>2019-04-03T08:44:02.447Z</updated>
    
    <content type="html"><![CDATA[<p><strong>判断数组是否是BST的后序遍历？</strong></p><pre><code>public boolean VerifySquenceOfBST(int [] sequence) {    if(sequence == null || sequence.length == 0){        return false;    }    return verify(sequence,0,sequence.length-1);}public boolean verify(int[] array,int left,int right){    if(left &gt;= right)        return true;    int i = right;    while (i &gt;= left &amp;&amp; array[i] &gt;= array[right])        i--;    for(int j = i;j &gt;= left;j--){        if(array[j] &gt; array[right])            return false;    }    return verify(array,left,i) &amp;&amp; verify(array,i+1,right-1);}</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;判断数组是否是BST的后序遍历？&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;public boolean VerifySquenceOfBST(int [] sequence) {
    if(sequence == null || sequence
      
    
    </summary>
    
      <category term="树" scheme="http://www.xuchunfa.cn/categories/%E6%A0%91/"/>
    
    
  </entry>
  
  <entry>
    <title>入栈序列和出栈序列是否匹配</title>
    <link href="http://www.xuchunfa.cn/2019/04/03/%E5%85%A5%E6%A0%88%E5%BA%8F%E5%88%97%E5%92%8C%E5%87%BA%E6%A0%88%E5%BA%8F%E5%88%97%E6%98%AF%E5%90%A6%E5%8C%B9%E9%85%8D/"/>
    <id>http://www.xuchunfa.cn/2019/04/03/入栈序列和出栈序列是否匹配/</id>
    <published>2019-04-03T03:33:53.000Z</published>
    <updated>2019-04-03T03:35:08.624Z</updated>
    
    <content type="html"><![CDATA[<p><strong>入栈序列和出栈序列是否匹配？</strong></p><pre><code>public boolean IsPopOrder(int[] pushA,int[] popA) {    if(pushA == null || popA == null || pushA.length == 0 || popA.length == 0){        return false;    }    if(pushA.length != popA.length){        return false;    }    int length = pushA.length;    int popIndex = 0;    Stack&lt;Integer&gt; assit = new Stack&lt;&gt;();    for(int i = 0; i &lt; length;i++){        assit.push(pushA[i]);        while (!assit.isEmpty() &amp;&amp; assit.peek() == popA[popIndex] &amp;&amp; popIndex &lt; length){            assit.pop();            popIndex++;        }    }    return  popIndex == length;}</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;入栈序列和出栈序列是否匹配？&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;public boolean IsPopOrder(int[] pushA,int[] popA) {
    if(pushA == null || popA == null |
      
    
    </summary>
    
      <category term="策略类" scheme="http://www.xuchunfa.cn/categories/%E7%AD%96%E7%95%A5%E7%B1%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>自定义栈返回最小值</title>
    <link href="http://www.xuchunfa.cn/2019/04/03/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%A0%88%E8%BF%94%E5%9B%9E%E6%9C%80%E5%B0%8F%E5%80%BC/"/>
    <id>http://www.xuchunfa.cn/2019/04/03/自定义栈返回最小值/</id>
    <published>2019-04-03T02:34:44.000Z</published>
    <updated>2019-04-03T02:38:04.571Z</updated>
    
    <content type="html"><![CDATA[<p><strong>自定义栈 O(1)时间内返回最小值？</strong></p><pre><code>public class MinStack {Stack&lt;Integer&gt; dataStack = new Stack&lt;&gt;();Stack&lt;Integer&gt; assistStack = new Stack&lt;&gt;();public void push(int node) {    dataStack.push(node);    if(assistStack.isEmpty() || node &lt; assistStack.peek()){        assistStack.push(node);    }else {        assistStack.push(assistStack.peek());//保证此位置出栈后能正确返回最小值    }}public void pop() {    if(!dataStack.isEmpty() &amp;&amp; !assistStack.isEmpty()){        dataStack.pop();        assistStack.pop();    }}public int top() {    if(dataStack.isEmpty())        throw new RuntimeException(&quot;error: stack is empty&quot;);    return dataStack.peek();}public int min() {    if(assistStack.isEmpty()){        throw new RuntimeException(&quot;error: stack is empty&quot;);    }    return assistStack.peek();}}</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;自定义栈 O(1)时间内返回最小值？&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;public class MinStack {

Stack&amp;lt;Integer&amp;gt; dataStack = new Stack&amp;lt;&amp;gt;();
Stack&amp;l
      
    
    </summary>
    
      <category term="策略类" scheme="http://www.xuchunfa.cn/categories/%E7%AD%96%E7%95%A5%E7%B1%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>判断树的子树</title>
    <link href="http://www.xuchunfa.cn/2019/04/02/%E5%88%A4%E6%96%AD%E6%A0%91%E7%9A%84%E5%AD%90%E6%A0%91/"/>
    <id>http://www.xuchunfa.cn/2019/04/02/判断树的子树/</id>
    <published>2019-04-02T12:24:20.000Z</published>
    <updated>2019-04-02T12:30:22.991Z</updated>
    
    <content type="html"><![CDATA[<pre><code>public static boolean isSubTree(BinaryTreeNode root1,BinaryTreeNode root2){    if(root2 == null){        return true;    }    if(root1 == null){//root1==null root2!=null        return false;    }    return root1.data == root2.data &amp;&amp; isSubTree(root1.left,root2.left) &amp;&amp; isSubTree(root1.right,root2.right);}public static boolean HasSubtree(BinaryTreeNode root1,BinaryTreeNode root2) {    if(root1 == null || root2 == null){        return false;    }    if(isSubTree(root1,root2)){        return true;    }    return HasSubtree(root1.left,root2) || HasSubtree(root1.right,root2);}</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;pre&gt;&lt;code&gt;public static boolean isSubTree(BinaryTreeNode root1,BinaryTreeNode root2){

    if(root2 == null){
        return true;
    }
  
      
    
    </summary>
    
      <category term="树" scheme="http://www.xuchunfa.cn/categories/%E6%A0%91/"/>
    
    
  </entry>
  
  <entry>
    <title>判断大于n的最小2的n次方的整数</title>
    <link href="http://www.xuchunfa.cn/2019/04/01/%E5%88%A4%E6%96%AD%E5%A4%A7%E4%BA%8En%E7%9A%84%E6%9C%80%E5%B0%8F2%E7%9A%84n%E6%AC%A1%E6%96%B9%E7%9A%84%E6%95%B4%E6%95%B0/"/>
    <id>http://www.xuchunfa.cn/2019/04/01/判断大于n的最小2的n次方的整数/</id>
    <published>2019-04-01T07:33:00.000Z</published>
    <updated>2019-04-01T08:32:56.505Z</updated>
    
    <content type="html"><![CDATA[<pre><code>  //时间复杂度：O(n)public int find(int n){    if(n == 0 || ((n-1)&amp;n) == 0){        return n;    }    int flag = 1;    while (flag &lt; n){        flag &lt;&lt;= 1;    }    return flag;}//最快的办法//时间复杂度：public int find1(int n){    n--;    n |= n &gt;&gt; 1;//右移优先于或    n |= n &gt;&gt; 2;    n |= n &gt;&gt; 4;    n |= n &gt;&gt; 8;    n |= n &gt;&gt; 16;    n++;    return n;}</code></pre><p><strong>小于n的最小2的n次方的整数</strong></p><pre><code>//小于n的最小2的n次方的整数public int small(int n){    int result = 0;    for(int i = n;i &gt;= 0;i--){        if(((i-1) &amp; i) == 0){            result = i;            break;        }    }    return result;}    </code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;pre&gt;&lt;code&gt;  //时间复杂度：O(n)
public int find(int n){
    if(n == 0 || ((n-1)&amp;amp;n) == 0){
        return n;
    }
    int flag = 1;
    while 
      
    
    </summary>
    
      <category term="位运算" scheme="http://www.xuchunfa.cn/categories/%E4%BD%8D%E8%BF%90%E7%AE%97/"/>
    
    
  </entry>
  
  <entry>
    <title>判断整数是否是2的整数次方</title>
    <link href="http://www.xuchunfa.cn/2019/04/01/%E5%88%A4%E6%96%AD%E6%95%B4%E6%95%B0%E6%98%AF%E5%90%A6%E6%98%AF2%E7%9A%84%E6%95%B4%E6%95%B0%E6%AC%A1%E6%96%B9/"/>
    <id>http://www.xuchunfa.cn/2019/04/01/判断整数是否是2的整数次方/</id>
    <published>2019-04-01T07:03:02.000Z</published>
    <updated>2019-04-01T07:04:53.038Z</updated>
    
    <content type="html"><![CDATA[<pre><code>//整数为0返回falseclass Solution {    public boolean checkPowerOf2(int n) {        if (n &lt; 1) {            return false;        } else {            return (n &amp; (n - 1)) == 0;    }}};</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;pre&gt;&lt;code&gt;//整数为0返回false
class Solution {
    public boolean checkPowerOf2(int n) {
        if (n &amp;lt; 1) {
            return false;
      
      
    
    </summary>
    
      <category term="位运算" scheme="http://www.xuchunfa.cn/categories/%E4%BD%8D%E8%BF%90%E7%AE%97/"/>
    
    
  </entry>
  
  <entry>
    <title>计算机网络基础</title>
    <link href="http://www.xuchunfa.cn/2019/03/28/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/"/>
    <id>http://www.xuchunfa.cn/2019/03/28/计算机网络基础/</id>
    <published>2019-03-28T01:07:05.000Z</published>
    <updated>2019-03-29T08:28:53.920Z</updated>
    
    <content type="html"><![CDATA[<p>1.TCP/IP vs OSI模型？</p><p><img src="https://i.imgur.com/6Lm1zUA.png" alt=""></p><p><img src="https://i.imgur.com/qDA1cTG.png" alt=""></p><pre><code>OSI:    1.清楚的区分服务、接口和协议，但实现起来困难；    2.网络层支持无连接和面向连接，传输层只支持面向连接的通信；TCP/IP:    1.网络层只支持无连接的通信，传输层同时支持连接和无连接；</code></pre><p>2.传输层</p><pre><code>2.1 传输层为应用进程之间提供了端对端的逻辑通信;网络层为主机之间提供逻辑通信；</code></pre><p>2.可靠传输的原理？</p><p>重传机制：</p><pre><code>1.发送完一个分组后要暂时保存已发送分组的副本；2.分组和确认分组需要进行编号；3.重传时间应当比数据在分组传输的平均往返时间更长一些；</code></pre><p>确认丢失和确认迟到：</p><pre><code>1.接收方丢弃重复的M1，重传确认M1;2.发送方丢弃收到的重复确认；</code></pre><p>3.UDP和TCP的报文段？</p><p><img src="https://i.imgur.com/SrXYECp.png" alt=""></p><p>字段解释：</p><pre><code>1.序号：本报文段的字节流数据中一个字节的序号；2.确认号：期望收到对方下一个报文段的第一个数据字节的序号；3.数据偏移：TCP报文段的首部字段；4.控制位    4.1 ACK:ACK=1确认字段才有效；    4.2 RST:RST=1拒绝一个非法的报文段或拒绝打开一个连接；    4.3 SYN:SYN=1 ACK=0表示连接请求报文段，SYN=1 ACK=1表示同意建立连接；    4.4 FIN:FIN=1表示此报文段发送发送方的数据已发送完毕，要求释放连接；5.窗口：允许发送方发送的数据量；</code></pre><p>4.滑动窗口模型</p><p>发送缓存VS发送窗口VS接收缓存VS接收窗口？</p><pre><code>1.对接收窗口中不按序到达的数据，接收方只能对按序收到了的数据中的最高序号给出确认；2.TCP要求接受方必须有累积确认功能，确认推迟的时间不应超过0.5秒；</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1.TCP/IP vs OSI模型？&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/6Lm1zUA.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/qDA1cTG.png&quot; alt=&quot;&quot;&gt;&lt;/p
      
    
    </summary>
    
      <category term="面试总结" scheme="http://www.xuchunfa.cn/categories/%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/"/>
    
      <category term="计算机网络" scheme="http://www.xuchunfa.cn/categories/%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
  </entry>
  
  <entry>
    <title>S型打印二叉树</title>
    <link href="http://www.xuchunfa.cn/2019/03/27/S%E5%9E%8B%E6%89%93%E5%8D%B0%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <id>http://www.xuchunfa.cn/2019/03/27/S型打印二叉树/</id>
    <published>2019-03-27T13:36:02.000Z</published>
    <updated>2019-03-27T13:39:30.982Z</updated>
    
    <content type="html"><![CDATA[<h2 id="S型打印二叉树？"><a href="#S型打印二叉树？" class="headerlink" title="S型打印二叉树？"></a>S型打印二叉树？</h2><pre><code>//S型层次遍历public void levelSOrder(BinaryTreeNode p){    Stack&lt;BinaryTreeNode&gt; stack1 = new Stack&lt;&gt;();    Stack&lt;BinaryTreeNode&gt; stack2 = new Stack&lt;&gt;();    int currentLevel = 1;    if(p != null){        stack1.push(p);    }    while(!stack1.isEmpty() || !stack2.isEmpty()){        int levelNumber = !stack1.isEmpty()?stack1.size():stack2.size();        for(int i = 0;i &lt; levelNumber;i++){            if((currentLevel &amp; 1) == 1){                p = stack1.pop();                System.out.print(p.data + &quot; &quot;);                if(p.right != null){                    stack2.push(p.right);                }                if(p.left != null){                    stack2.push(p.left);                }                if(stack1.empty()){                    currentLevel++;                }            }else {                p = stack2.pop();                System.out.print(p.data + &quot; &quot;);                if(p.left != null){                    stack1.push(p.left);                }                if(p.right != null){                    stack1.push(p.right);                }                if(stack2.empty()){                    currentLevel++;                }            }        }        System.out.println();    }}</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;S型打印二叉树？&quot;&gt;&lt;a href=&quot;#S型打印二叉树？&quot; class=&quot;headerlink&quot; title=&quot;S型打印二叉树？&quot;&gt;&lt;/a&gt;S型打印二叉树？&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;//S型层次遍历
public void levelSOrder(Binar
      
    
    </summary>
    
      <category term="树" scheme="http://www.xuchunfa.cn/categories/%E6%A0%91/"/>
    
    
  </entry>
  
  <entry>
    <title>未优化快排</title>
    <link href="http://www.xuchunfa.cn/2019/03/24/%E6%9C%AA%E4%BC%98%E5%8C%96%E5%BF%AB%E6%8E%92/"/>
    <id>http://www.xuchunfa.cn/2019/03/24/未优化快排/</id>
    <published>2019-03-24T12:10:30.000Z</published>
    <updated>2019-03-24T12:13:22.888Z</updated>
    
    <content type="html"><![CDATA[<pre><code>//有序数组直接选择第一个元素作轴效果不理想public class NormalQuickSort {public int partion(int[] a,int start,int end){    int pivot = a[start];    int i = start;    int j = end;    while (i &lt; j){        while (i &lt; j &amp;&amp; a[j] &gt;= pivot){            j--;        }        a[i] = a[j];        while (i &lt; j &amp;&amp; a[i] &lt;= pivot){            i++;        }        a[j] = a[i];    }    a[i] = pivot;    return i;}public void sort(int[] a,int start,int end){    if(start &lt; end){        int partition = partion(a,start,end);        sort(a,start,partition-1);        sort(a,partition+1,end);    }}@Testpublic void test(){    int[] a = {6,4,3,3,1,2,9,5};    sort(a,0,a.length-1);    System.out.println(Arrays.toString(a));}}    </code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;pre&gt;&lt;code&gt;//有序数组直接选择第一个元素作轴效果不理想
public class NormalQuickSort {

public int partion(int[] a,int start,int end){
    int pivot = a[start];
 
      
    
    </summary>
    
      <category term="排序" scheme="http://www.xuchunfa.cn/categories/%E6%8E%92%E5%BA%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>面试总结--计算机网络</title>
    <link href="http://www.xuchunfa.cn/2019/02/23/%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    <id>http://www.xuchunfa.cn/2019/02/23/面试总结-计算机网络/</id>
    <published>2019-02-23T01:57:49.000Z</published>
    <updated>2019-04-06T01:37:22.298Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>TCP和UDP的区别？</p><pre><code>1.TCP面向连接的，UDP无连接的。2.TCP传输可靠，UDP尽最大努力交付；TCP是全双工的可靠信道，UDP不可靠信道；通过TCP连接传送的数据，无差错，不丢失，不重复，且按序到达3.TCP面向字节流，UDP面向报文。UDP不对报文作处理，一次交付一个完整的报文；4.TCP连接是点对点的，UDP支持一对一、一对多、多对一和多对多。&quot;点&quot;代表的是socket(IP:PORT)；5.TCP首部20个字节，UDP是8个字节；</code></pre><p> TCP的特点：</p><pre><code>可靠、稳定、慢、效率低、占用系统资源高。</code></pre><p> UDP的特点：</p><pre><code>1.传递数据快、不可靠丢包、快速递交比精准递交更重要，例如：视频语音；</code></pre><p> 相关问题解释：</p><pre><code>1.TCP连接的发送方和接收方都有缓存，TCP不关心发送到TCP发送方缓存的报文长度，它会根据对方的窗口值和网络拥塞情况来决定一个报文段包含有多少字节。2.TCP发送方发送4个数据块，接收方可能2个数据块就能把字节流传到应用层；</code></pre></li><li><p>TCP如何保证可靠性，拥塞控制如何实现？</p><pre><code>1.确认和重传；2.数据校验；3.数据合理分片；4.流量控制：    1.当接收方来不及处理发送方的数据，能通过滑动窗口，提示发送方降低发送的速率，防止包丢失。    2.利用可变窗口rwnd值的变化来进行流量控制；5.拥塞控制；    5.1 慢开始和拥塞避免        1.慢开始（指数）：由小到大增加拥塞窗口的值，每经过一个传输轮次，拥塞窗口加倍；        2.拥塞避免（线性）：cwnd缓慢增大，每经过一个往返时间RRT就把发送方的拥塞窗口cwnd值加1；        3.加法增大乘法减小（AIMD）:&quot;乘法减小&quot;即不论在慢开始阶段还是在拥塞避免阶段，只要出现超时就把满开始门限ssthresh减半；        &quot;加法增大&quot;即执行拥塞避免算法使cwnd缓慢增大；    5.2 快重传和快恢复        1.快重传：接收方每收到一个失序的报文段后就立即发出重复确认，当发送方一连收到3个重复确认就立即重传对方尚未接收到的报文段。        2.快恢复：收到3个重复确认后，ssthresh减半，把cwnd的值设为ssthresh减半后的值；</code></pre></li></ol><ol start="3"><li><p>输入URL浏览器发生了什么？</p><pre><code>1.DNS域名解析找到IP地址；    1.1 解析顺序：本地域名服务器、根域名服务器、顶级域名服务器、权限域名服务器;    1.2 主机向本地域名服务器的查询采用的是递归查询，即替该主机继续查询，本地域名服务器向根域名服务器的查询采用的是迭代查询；    1.3 根域名服务器的作用：告诉本地域名服务器下一步去哪一个顶级域名服务器查询；2.TCP连接服务端和客户端；3.发送HTTP请求；4.服务器处理请求；5.返回响应结果；6.关闭TCP连接（长连接的时候不关闭）；7.浏览器解析HTML;8.浏览器布局渲染。</code></pre><p> 3.HTTP协议和TCP/IP协议区别？</p><pre><code>1.HTTP协议是应用层协议，主要解决如何包装数据；TCP/IP协议是运输层协议解决数据如何在网络中传输。</code></pre></li></ol><ol start="4"><li><p>进程和线程的区别？</p><pre><code>1.进程是资源（CPU、内存、磁盘等等）分配的基本单位，线程是调度（程序执行的）的基本单位。进程是是实实在在看得见的，Ctrl+Shift+Esc显示进程。2.同一进程的各个线程共享该进程的内存资源。但是当一个线程使用某些共享内存时，其他线程必须等待。3.进程有自己的独立地址空间，同一进程里的线程享有相同的地址空间；进程切换代价昂贵，线程切换代价小。4.多进程程序更强壮，多线程程序只要有一个线程挂了，进程就死掉了，但不会影响其他进程。</code></pre></li></ol><ol start="5"><li><p>进程的通信方式？</p><pre><code>1.管道：半双工、数据单向流动、具有亲缘关系（父子进程）的进程间。其中命名管道允许不具有亲缘关系的进程通信。2.信号量：计数器、控制多个进程访问共享资源。3.消息队列：克服了信号承载信号量小，管道只能承载无格式字节流以及缓冲区大小受限的缺点。4.信号：通知接受事件发生。5.共享内存：最快IPC通信、结合信号量使用。6.套接字（socket）：可用于不同机器间的进程通信。</code></pre></li><li><p>TCP的三次握手和四次挥手以及为什么是四次挥手？</p><p> 总结：</p><pre><code>1.第一次握手：标志位SYN=1 ACK=0,client_sequence=i,客户端SYN_SEND状态；2.第二次握手：检查并设置标志位ACK=1 SYN=1和发送确认序号ack number=i+1 server_sequence=j,服务端SYN_RECV状态；3.第三次握手：检查标志位ACK=1和发送确认序号ack=j+1和client_sequence=i+1,（有序）客户端进入ESTABLISH状态.(这里要是出现ack丢失的情况不会重传没有数据的ack,而是重传第二次握手时的数据)当服务端收到确认号以后，服务端进入到ESTABLISH状态，此时TCP连接才正式建立起来。</code></pre><p> 三次握手注意地方：</p><pre><code>1.ACK=1时ack number才有效；2.SYN(SYN=1)报文段不能携带数据；3.为什么最后一次还要发送确认？  主要是为了防止已经失效的连接请求报文段突然又传到服务端；第一次的连接请求因为网络原因延迟达到，服务器会认为是新的连接请求，  于是发出确认报文段建立连接，但客户端不会理会发过来的确认，所以建立的TCP连接浪费了，而如果有了最后一次确认，  客户端就不会向服务端发出确认，服务端就能知道客户端根本没有请求建立连接。4.几个状态？  客户端：SYN_SEND、ESTABLISHED.  服务端：SYN_RECV、ESTABLISHED.</code></pre></li></ol><pre><code>四次挥手：    4.第一次挥手: FIN=1,seq=u,客户端FIN_WAIT1状态；    5.第二次挥手：ACK=1 seq=v,ack=u+1,服务端CLOSED_WAIT状态（关闭服务器读通道）；客户端收到ACK进入FIN_WAIT2状态（关闭客户端写通道）；    6.第三次挥手：服务端发送完数据以后，向客户端发送FIN=1 ACK=1 seq=w ack=u+1,服务端进入到LAST_ACK状态；    7.第四次挥手：ACK=1 seq=u+1 ack=w+1，客户端进入TIME_WAIT状态（关闭客户端读通道），服务器收到ACK后（关闭服务器写通道）；注：    1.TIME_WAIT=2MSL(Maximum Segment Lifetime最长报文寿命)的原因？        1.1 保证Client最后发送的ACK报文段能够到达Server;假如立即关闭的话，ACK报文如果丢失，Server会重传FIN + ACK报文，Client无法收到重传报文段，于是Server无法进入CLOSED状态；        1.2 防止本次连接中失效的连接请求报文段进入到下一次TCP连接中去，通过这段持续时间能让本次连接产生的所有报文段从网络中消失；    2.为什么是4次挥手？        2.1 因为TCP是全双工模式。前两次挥手是关闭Client到Server的传输通道，此时Client仍然可以接收Server的数据；后两次挥手是关闭Server到Client的传输通道；        2.2 这里把ACK报文和FIN报文分开发是为了确保数据能完整得到传输。当收到对方的FIN报文通知时，它仅仅表示对方没有数据发送给你了；但未必你所有的数据都全部发送给对方了，所以你可以未必会马上会关闭SOCKET,也即可能你还需要发送一些数据给对方之后，再发送FIN报文给对方来表示你同意现在可以关闭连接了。    3.TCP第三次握手ACK丢失后的处理？        ACK丢失，服务端的TCP连接的撞状态为SYN_RECV，等待3s、6s、12s后重新发送SYN+ACK包，其中服务端重新发送SYN+ACK的次数默认值是5，如果仍未收到ACK,一段时间后服务端自动关闭这个连接，但是Client认为这个连接已经建立，如果Client端向Server写数据，Server端将以RST包(用于强制关闭tcp连接)响应，方能感知到Server的错误。    4.状态变化        客户端：ESTABLISHED、FIN_WAIT1、FIN_WAIT2、TIME_WAIT、CLOSED;        服务端：ESTABLISHED、CLOSE_WAIT、LAST_ACK、CLOSED;</code></pre><p>参考文献：</p><p><a href="https://blog.csdn.net/smileiam/article/details/78226816" target="_blank" rel="noopener">TCP的三次握手、四次挥手</a>        </p><ol start="7"><li>http协议？http和https的区别？http的结构及状态码？</li></ol><pre><code>1.http请求结构    1.1 请求行        eg:POST /addStudent/addStu.html HTTP/1.1    1.2 请求头        Accept:客户端接受什么类型的响应；eg:text/html        Cache-Control:响应数据在客户端的缓存控制；        Connection:请求完成后是否关掉TCP连接；eg:keep-alive;        Content-Type:请求的内容类型；eg:application/x-www-form-urlencoded标准的编码格式；        Cookie:保存server发送过来的set-Cookie内容；    1.3 请求体        eg:name=xuchunfa&amp;gender=male&amp;age=182.http响应结构    2.1 响应行        eg:HTTP/1.1 200 OK    状态码：        成功状态码：            1.1 200 OK:处理成功；            1.2 204 No Content:请求处理成功，但没有资源返回；        重定向状态码：            2.1 301 Moved Permanently:请求的网页已被永久移动到新位置。            2.2 302 Found:服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。            2.3 303 See Other:请求者应当对不同的位置使用单独的 GET 请求来检索响应时;            2.4 304 Not Modify:告诉客户端，你请求的这个资源至你上次取得后，并没有更改，你直接用你本地的缓存吧;            2.5 305 Use Proxy：必须通过代理访问资源，代理的地址在Response的Location中        客户端错误状态码：            4.1 400 Bad Request:请求报文中存在语法错误；            4.2 401 Unauthorized：未授权，需要有通过Http认证的认证信息；            4.3 403 Forbidden:访问被拒绝；            4.4 404 Not Found:页面不存在（无法找到请求资源）；            4.5 405 Method not allowed：禁用请求中指定的方法；        服务器错误状态码：            5.1 500 Internal Server Error：服务器内部发生错误；            5.2 501 Not Implemented:客户端发起的请求超出服务器的能力范围;            5.2 503 Service Unavailable：服务器处于超负荷或者正在停机维护；            5.3 505 HTTP Version Not Supported:不支持的HTTP版本；    2.2 响应头        Access-Control-Allow-Origin：响应头指定了该响应的资源是否被允许与给定的origin共享；eg:*表示允许所有域都具有访问资源的权限；        Location:指定的是需要将页面重新定向至的地址;        Set-cookie:服务器端向客户端发送的cookie；3.http协议    1.生成针对目标Web服务器的HTTP请求报文；    2.http协议是无状态的协议，服务器不会记录客户端的信息，解放了服务器但可能会传输大量重复信息。通过Cookie来维系客户端和服务器之间的状态。、4.http和https区别     1.HTTPS协议由HTTP+SSL(Secure Sockets Layer)协议构建的可进行加密传输数据、身份认证的网络协议。    2.HTTP端口号80，HTTPS端口号443;5.HTTPS工作原理    1.客户端发起HTTPS请求，三次握手；    2.服务端配置。配置数字证书，即公钥和密钥（非对称加密）；    3.服务端传送SSL证书，证书的内容包括：证书的颁发机构、有效期、公钥、证书持有者、签名等，解决了公钥获取的安全性；    4.客户端解析证书。证书是否有效，是否过期，有效则提取出公钥；(操作系统内置了受信任的证书颁发机构，取出颁发者CA的公钥对证书的签名进行解密，    浏览器使用hash算法计算证书的hash值，与证书签名作对比)    5.传输加密信息。浏览器随机生成一个对称加密的密钥k（临时会话密钥），密钥k是在客户端和服务端共享的，用证书中的公钥加密k,得到密文k&apos;；    6.服务端解密信息。用私钥拿到k，并使用密钥k加密传输的数据；    7.传输服务端加密后的信息；    8.客户端解密信息。使用共享密钥k解密数据。总结：    1.加密算法        对称加密：加密和解密都是通过同一个密钥进行，采用对称加密进行通信存在密钥协商过程的不安全性；        非对称加密：私钥加密后的密文只要是公钥都可以解密，但公钥加密后的密文只有私钥可以解密；        注意：            1.非对称加密算法保证了协商对称加密算法的过程；            2.非对称加密算法会有公钥被劫持的问题，通过CA颁发的证书保证安全；            3.最后客户端和服务端协商出了对称加密算法进行信息的加密传输；</code></pre><p>7.HTTP1.0/HTTP1.1/HTTP2.0的区别?</p><pre><code>1.HTTP1.1默认长连接Connection:keep-alive,HTTP1.0 每次请求都要创建连接；2.HTTP1.x的解析是基于文本，而HTTP2.0是基于二进制格式；3.HTTP1.1中若干个请求排队串行化单线程处理，后面的请求等待前面请求的返回才能获得执行机会，一旦有某请求超时等，后续请求只能被阻塞；HTTP2.0中多个请求可同时在一个连接上并行执行，某个请求任务耗时严重，不会影响到其它连接的正常执行；4.HTTP2.0中压缩header;5.HTTP2.0中实现服务端的推送，即服务端推送能把客户端所需要的资源伴随着index.html一起发送到客户端，减少了客户端重复请求的步骤，大大提升了速度；</code></pre><p>参考文献：</p><p><a href="https://blog.csdn.net/u010256388/article/details/68491509" target="_blank" rel="noopener">HTTP请求行、请求头、请求体详解</a>    </p><ol start="8"><li><p>Get请求和Post请求有什么区别？</p><pre><code>1.Get请求的数据会附在URI之后，Post把提交的数据放在HTTP请求体中；2.Get的长度受受限于浏览器URI的长度(2K个字节)，所以一般来说，GET请求传递的数据要比POST请求少；3.POST比GET安全性高。4.GET请求参数会被完整保留在浏览器历史记录里，而POST中的参数不会保留；5.GET只接受ASCII字符，POST没有限制；6.GET产生一个数据包：对于GET方式的请求，浏览器会把http header和data一并发送出去，服务器响应200（返回数据  POST请求产生二个数据包：浏览器先发送header，服务器响应100 continue，浏览器再发送data，服务器响应200 OK（返回数据）</code></pre></li></ol><ol start="9"><li><p>Session和Cookie的区别？</p><pre><code>Session:服务器端保存的数据结构；可以放在内存、数据库、文件中等；Session的实现对客户端Cookie有依赖关系。Cookie:客户端保存用户信息的机制，有限制，不能超过3K，实现Session的一种方式，如果Cookie被禁用会通过URL重写的技术来进行会话跟踪，uri后面会附有sid=...的信息；总结:1.cookie不安全，存在客户端硬盘上；session cookie存储在浏览器内存，是针对某一次会话而言；2.Cookie根据响应报文头中的Set-Cookie信息，通知客户端保存Cookie.</code></pre></li></ol><p>10.select和epoll的原理和区别？<br>11.协议层有哪些？说说五层协议、OSI、TCP/IP模型？</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;&lt;p&gt;TCP和UDP的区别？&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1.TCP面向连接的，UDP无连接的。

2.TCP传输可靠，UDP尽最大努力交付；TCP是全双工的可靠信道，UDP不可靠信道；通过TCP连接传送的数据，无差错，不丢失，不重复，且按序到达

3.TCP
      
    
    </summary>
    
      <category term="面试总结" scheme="http://www.xuchunfa.cn/categories/%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/"/>
    
      <category term="计算机网络" scheme="http://www.xuchunfa.cn/categories/%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
  </entry>
  
  <entry>
    <title>面试总结--操作系统</title>
    <link href="http://www.xuchunfa.cn/2019/02/23/%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    <id>http://www.xuchunfa.cn/2019/02/23/面试总结-操作系统/</id>
    <published>2019-02-23T01:56:09.000Z</published>
    <updated>2019-03-26T13:50:12.006Z</updated>
    
    <content type="html"><![CDATA[<ol><li>操作系统的内存管理机制？</li><li>CPU飙升怎么定位问题？</li><li>LRU算法？</li><li>性能调优看哪些命令？</li><li>操作系统有哪些页面置换算法？</li><li>线程和进程如何创建？</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;操作系统的内存管理机制？&lt;/li&gt;
&lt;li&gt;CPU飙升怎么定位问题？&lt;/li&gt;
&lt;li&gt;LRU算法？&lt;/li&gt;
&lt;li&gt;性能调优看哪些命令？&lt;/li&gt;
&lt;li&gt;操作系统有哪些页面置换算法？&lt;/li&gt;
&lt;li&gt;线程和进程如何创建？&lt;/li&gt;
&lt;/ol&gt;

      
    
    </summary>
    
      <category term="面试总结" scheme="http://www.xuchunfa.cn/categories/%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/"/>
    
      <category term="操作系统" scheme="http://www.xuchunfa.cn/categories/%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
  </entry>
  
  <entry>
    <title>面试总结--Spring框架基础</title>
    <link href="http://www.xuchunfa.cn/2019/02/18/%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93-Spring%E6%A1%86%E6%9E%B6%E5%9F%BA%E7%A1%80/"/>
    <id>http://www.xuchunfa.cn/2019/02/18/面试总结-Spring框架基础/</id>
    <published>2019-02-18T12:18:34.000Z</published>
    <updated>2019-03-23T13:59:46.487Z</updated>
    
    <content type="html"><![CDATA[<ol><li>AOP和IOC原理？</li><li>Spring怎样解决循环依赖的问题？</li><li>DispatchServlet怎样分发任务的？</li><li>注解的原理？</li><li>Spring的入口？</li><li>SpringMVC 的 Controller 中返回值有哪些？</li><li><p>Servlet 和 JSP 的区别？</p><pre><code>1.Servlet控制业务流程，JSP动态生成网页；2.JSP第一次被访问时会被容器编译为Servlet类；3.Servlet接受Tomcat发送过来的request和response;</code></pre><p> Servlet的四大域对象：</p><pre><code>1.Page域：作用域为整个JSP页面；2.Request域：一次请求一个request;3.Session域：一次会话一个session;4.Application域：作用于整个服务器端，服务器开启对象创建，关闭服务器对象销毁；例如ServletContext通过request.getServletContext（)获得；</code></pre><p> JSP的九大内置对象：</p><pre><code>1.request、response、pageContext、session、application、out、config、page、exception;</code></pre></li><li><p>Servlet创建的过程？</p></li></ol><ol start="8"><li><p>Servlet中的filter？</p><p> 生命周期：</p><pre><code>1.init()2.doFilter(ServletRequest req,ServletResponse resp,Filterchain chain)3.destroy()</code></pre></li></ol><ol start="9"><li><p>Servlet的生命周期，Servlet是单例的，如何判断？为什么要设计成单例的？</p><p> 生命周期：</p><pre><code>1.加载Servlet类并创建实例，若存在则不会创建了；2.init():每个Servlet只会被初始化一次；3.service():执行Post/GET/DELETE等等请求方法；4.destroy():仅执行一次；</code></pre><p> Servlet单实例多线程</p><pre><code>1.设计成单例减少了创建Servlet实例的开销；2.容器每接收到一个请求就会通过线程池分配到一个线程，同一请求的多个线程并发执行；3.所以为了线程安全最好不要在Servlet中用实例变量，或使用synchronied同步；4.不要使用线程不安全的集合；</code></pre><p> Servlet如何处理多个请求同时访问？</p><pre><code>1.Servlet加载实例化；2.容器初始化Servlet;3.Servlet容器通过调度线程给处理请求；4.线程执行service()方法；5.请求结束，放回线程池，等到被调用；</code></pre></li></ol><ol start="10"><li><p>Servlet中的变量是否需要加锁？</p><p>实例变量需要考虑同步。</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;AOP和IOC原理？&lt;/li&gt;
&lt;li&gt;Spring怎样解决循环依赖的问题？&lt;/li&gt;
&lt;li&gt;DispatchServlet怎样分发任务的？&lt;/li&gt;
&lt;li&gt;注解的原理？&lt;/li&gt;
&lt;li&gt;Spring的入口？&lt;/li&gt;
&lt;li&gt;SpringMVC 的 Co
      
    
    </summary>
    
      <category term="面试总结" scheme="http://www.xuchunfa.cn/categories/%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/"/>
    
      <category term="Spring框架基础" scheme="http://www.xuchunfa.cn/categories/%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/Spring%E6%A1%86%E6%9E%B6%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
  <entry>
    <title>面试总结--Java集合</title>
    <link href="http://www.xuchunfa.cn/2019/02/18/%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93-Java%E9%9B%86%E5%90%88/"/>
    <id>http://www.xuchunfa.cn/2019/02/18/面试总结-Java集合/</id>
    <published>2019-02-18T12:16:24.000Z</published>
    <updated>2019-04-08T02:27:12.150Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>可以用foreach循环直接删除ArrayList的特定元素吗？可能会出现什么问题？怎样解决？</p><pre><code>1.会抛ConcurrentModificationException异常，使用foreach会在内部创建迭代器，在使用next()方法时，会检查modCount != expectedModCount，前者发生了变化而后者没有故报错。2.使用自身迭代器解决上述问题。</code></pre></li></ol><ol start="2"><li>HashMap put()元素产生冲突，为什么用LinkedList（拉链法）而不用ArrayList解决，产生冲突时key值不等，新元素怎样加入链表，为什么这么设计（jdk1.8之前）？</li><li>ArrayList以及LinkedList？</li></ol><p>注意：</p><pre><code>1.remove(int index)设计到了本地方法：    System.arraycopy(array(数据要被拷贝的数组),srcPos(数据被拷贝的起始坐标)，destArray(目的数组)，destPos(目的数组的起始坐标)，len(要被拷贝的数据的长度))；</code></pre><p>总结：</p><pre><code>1.LinkedList底层双向链表，Node&lt;E&gt;节点，first和last指针，插入删除效率高，不需要扩容；2.ArrayList底层数组结构,数组动态扩容，无参构造数组大小为0，当添加第一个元素后，数组扩容为10，当添加第11个元素时进行扩容newCap = oldCap + oldCap*1.5,通过Arrays.copyOf(elementData,newCapacity)返回新数组；</code></pre><p>3.Vector、HashSet以及LinkedHashMap、TreeMap、TreeSet的底层理解？</p><p>   3.1.Vector VS ArrayList:</p><pre><code>1.Vector是线程安全的ArrayList;2.如果Vector指定了增长系数capacityIncrement&gt;0的话，扩容时增长的长度为capacityIncrement，否则增长的长度为oldCapacity。    int newCapacity = oldCapacity + ((capacityIncrement &gt; 0) ?                              capacityIncrement :oldCapacity);3.2 HashSet的理解    1.底层HashMap:      private transient HashMap&lt;E,Object&gt; map;    2.加入的元素作为key,value都为统一的PRESENT，HashMap新添加的Entry的value会覆盖原来Entry的value值，但key不会有任何变化；    public boolean add(E e) {        return map.put(e, PRESENT)==null;    }3.3 LinkedHashMap的理解    1.有序的HashMap，可以实现按插入排序（默认）和按访问排序，每次将访问的节点放置链表末尾；    2.通过Entry&lt;K,V&gt;的 before、after和header组合指针来维护一个双向列表；3.4 TreeSet的理解    1.基于TreeMap实现，底层红黑树结构，特点是：排序和唯一；    2.new TreeSet()默认的是自然排序；</code></pre><ol start="4"><li>HashMap线程不安全的原因？</li></ol><p>参考文献：</p><p><a href="http://www.importnew.com/22011.html" target="_blank" rel="noopener">HashMap线程不安全的体现</a>注：最后一步 next=null </p><p>不安全原因在于多线程发生扩容时：</p><pre><code>void resize(int newCapacity) {    Entry[] oldTable = table;    int oldCapacity = oldTable.length;    if (oldCapacity == MAXIMUM_CAPACITY) {        threshold = Integer.MAX_VALUE;        return;    }    Entry[] newTable = new Entry[newCapacity];    transfer(newTable, initHashSeedAsNeeded(newCapacity));    table = newTable;    threshold = (int)Math.min(newCapacity * loadFactor, MAXIMUM_CAPACITY + 1);}//多线程会形成循环链表void transfer(Entry[] newTable, boolean rehash) {    int newCapacity = newTable.length;    for (Entry&lt;K,V&gt; e : table) {        while(null != e) {            Entry&lt;K,V&gt; next = e.next;            if (rehash) {                e.hash = null == e.key ? 0 : hash(e.key);            }            int i = indexFor(e.hash, newCapacity);            e.next = newTable[i];//头插法时间复杂度低，但由于会反序导致线程不安全            newTable[i] = e;            e = next;        }    }</code></pre><p>5.关于concurrentHashMap的理解</p><p><a href="http://www.xuchunfa.cn/2018/08/08/ConcurrentHashMap%E7%9A%84%E7%90%86%E8%A7%A3/">concurrentHashMap JDK1.7和JDK1.8的理解</a></p><p>注意：</p><pre><code>1.JDK1.8 和JDK1.7 concurrentHashMap不允许key或value为null  当你通过get(k)获取对应的value时，如果获取到的是null时，你无法判断，它是put（k,v）的时候value为null，还是这个key从来没有做过映射;2.JDK1.7 concurrentHashMap的每个Segment中含有一个  transient volatile HashEntry&lt;K,V&gt;[]table，保证了entryAt/setEntryAt的可见性；</code></pre><p>总结：</p><pre><code>1.JDK1.8中的concurrentHashMap大量使用CAS算法，即无锁化的修改值的操作。算法思想：比较当前内存中的变量值与指定的expect变量的值是否相等，相等则修改expect变量的值为new value.2.JDK1.8 concurrentHashMap的put操作：    2.1 通过casTabAt(tab, i, null,new Node&lt;K,V&gt;(hash, key, value, null)方法中的        U.compareAndSwapObject(tab, ((long)i &lt;&lt; ASHIFT) + ABASE, c, v)CAS方法        在表头Node&lt;K,V&gt;[] table中插入节点；    2.2 采用synchronized + CAS的思想。synchronized锁住的是hash值相等的链表tab[i]的头节点；    2.3 采用尾插法插入新节点；3.JDK1.8 concurrentHashMap的get操作：    3.1 读操作没有加锁。key的hash值小于0就去红黑树中查找；hash值大于0就去链表中查找。    3.2 利用volatile线程可见性 (Node&lt;K,V&gt;)U.getObjectVolatile(tab,i);4.JDK1.7 concurrentHashMap的put操作：    4.1 获取segment的位置后尝试获取锁，获取到锁后node=null;没获取到锁的线程则通过scanAndLockForPut尝试获取锁；    4.2 scanAndLockForPut的思想是：通过自旋不断获取segment的锁，并在获取的过程中遍历链表，        没有找到和key equals的HashEntry则创建一个HashEntry并在获取到锁后返回它，当尝试次数超过        最大尝试次数MAX_SCAN_RETRIES则加锁等待。    4.3 因为插入节点采用的头插法，所以在scanAndLockForPut会判断first有无发生变化，发生变化（有线        程加入节点）则重新遍历链表；5.JDK1.7 concurrentHashMap的get操作：    5.1 读操作没有加锁。通过volatile读语义保证可见性。只有当put和remove调用    setEntryAt（table,i）方法后（已经释放锁），读操作才能读到变化的table;    5.2 通过UNSAFE.getObjectVolatile(table,i)获得Segment&lt;K,V&gt;或HashEntry&lt;K,V&gt;[]的表头节点    保证了线程之间的可见性；</code></pre><p>6.关于HashMap的理解</p><p>注意：</p><pre><code>1.JDK1.7 和 JDK1.8 的hashMap都允许key为null,放在table[0]里面；</code></pre><p>总结：</p><pre><code>1.JDK1.8 HashMap的resize操作：    1.1 新的数组长度和Threshold是旧数组对应原值的两倍；    1.2 旧数组中链表在新数组中的位置确定方法：        //loHead和loTail维护在新数组中位置不变的链表        //hiHead和hiTail维护在新数组中位置发生变化的链表        if(hash &amp; oldCap == 0){            newTab[j] = loHead;//在新数组中的位置保持不变        }else{            newTab[j+oldCap] = hiHead;//在新数组中的位置变成j+oldCap        } 2.JDK1.8 HashMap的get和put操作：    2.1 新加了红黑树的数据结构；3.JDK1.7 HashMap的resize操作：    3.1 重新计算每个元素在新数组中的位置，采用头插法插入元素到新数组中，线程不安全；4.JDK1.7 HashMap的get和put操作：    4.1 普通链表结构；</code></pre><p>7.TreeMap的实现原理？</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;&lt;p&gt;可以用foreach循环直接删除ArrayList的特定元素吗？可能会出现什么问题？怎样解决？&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1.会抛ConcurrentModificationException异常，使用foreach会在内部创建迭代器，在使用next(
      
    
    </summary>
    
      <category term="面试总结" scheme="http://www.xuchunfa.cn/categories/%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/"/>
    
      <category term="java集合" scheme="http://www.xuchunfa.cn/categories/%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/java%E9%9B%86%E5%90%88/"/>
    
    
  </entry>
  
  <entry>
    <title>面试总结--Linux基础</title>
    <link href="http://www.xuchunfa.cn/2019/02/18/%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93-Linux%E5%9F%BA%E7%A1%80/"/>
    <id>http://www.xuchunfa.cn/2019/02/18/面试总结-Linux基础/</id>
    <published>2019-02-18T12:13:51.000Z</published>
    <updated>2019-02-18T12:27:23.930Z</updated>
    
    <content type="html"><![CDATA[<ol><li>cpu 100%怎样定位？</li><li>进程间通信的方式有哪些？</li><li></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;cpu 100%怎样定位？&lt;/li&gt;
&lt;li&gt;进程间通信的方式有哪些？&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;

      
    
    </summary>
    
      <category term="面试总结" scheme="http://www.xuchunfa.cn/categories/%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/"/>
    
      <category term="Linux基础" scheme="http://www.xuchunfa.cn/categories/%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/Linux%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
  <entry>
    <title>面试总结--Mysql基础</title>
    <link href="http://www.xuchunfa.cn/2019/02/18/%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93-Mysql%E5%9F%BA%E7%A1%80/"/>
    <id>http://www.xuchunfa.cn/2019/02/18/面试总结-Mysql基础/</id>
    <published>2019-02-18T11:54:38.000Z</published>
    <updated>2019-04-09T01:06:48.318Z</updated>
    
    <content type="html"><![CDATA[<p>1.select count(*) 和 select count(列名)？</p><pre><code>前者会包含null的行，后者不会包括；</code></pre><ol><li>B树（B-树）和B+树是解决什么样的问题的，怎样演化过来，之间区别？</li></ol><p><a href="https://segmentfault.com/a/1190000004690721" title="B/B+树的结构示意图" target="_blank" rel="noopener">B/B+树的结构示意图</a></p><pre><code>1.作为文件系统以及数据库系统的索引结构；2.B树的关键字和data域放在了一起；3.B+树data域全放在叶子节点上，叶子节点增加了一个链指针；</code></pre><p>B树和B+树的区别？</p><pre><code>1.B树所有节点都带有卫星数据，B+树只有叶子节点带有；2.B+树的中间节点没有卫星数据，同样大小的磁盘页可以容纳更多的元素；树型更矮胖，减少了查询时候的IO次数；3.B+树查询性能稳定、范围查询效率更高；</code></pre><p>m阶（代表一个树节点最多有多少个查找路径）的B树特点：</p><pre><code>1.每个节点至多有m棵子树；2.除根节点外每个分支节点至少有 m/2取上整 棵子树；3.根节点至少有两棵子树；4.关键字的数量num：大于等于ceil(m/2)-1 ，小于等于 M-1；5.有k个子树的中间节点包含k-1个元素；</code></pre><p>m阶B+树；</p><pre><code>1.有k个子树的中间节点包含k个元素；2.叶子节点包含了全部元素信息以及指向这些元素记录的指针；3.所有的中间节点元素都同时存在于子节点，在子节点元素中是最大或最小元素；</code></pre><ol start="2"><li><p>Mysql给离散度低的字段建立索引会出现什么问题，具体说下原因？</p><pre><code>因为访问索引需要付出额外IO的代价，离散度低的字段数据会发生频繁访问IO的情况降低了性能；</code></pre></li></ol><ol start="3"><li>数据库事务特性以及四个隔离级别，Mysql属于哪一种？</li></ol><p><a href="https://www.hollischuang.com/archives/943" title="隔离级别详解" target="_blank" rel="noopener">隔离级别详解</a></p><pre><code>1.事务特性：原子性、一致性、隔离性和持久性；2.事务隔离级别：    2.1 读未提交：出现脏读，读取另一个未提交事务的数据；    2.2 读已提交：造成不可重复读，即在同一个事务中读到两次不同的结果；    2.3 可重复读：出现幻读，一个事务中读取的数据一致；</code></pre><p>幻读的例子：</p><p><img src="https://i.imgur.com/DUI0Os9.png" alt=""></p><pre><code>    2.4 串行化：最高隔离级别。出现以下现象：        1.事务1正在（强调正在）读取A表中的记录时，则事务2也能读取A表，但不能对A表做更新、新增、删除，直到事务1结束。(因为事务一对表增加了表级共享锁，其他事只能增务加共享锁读取数据，不能进行其他任何操作）        2.事务1正在更新A表中的记录时，则事务2不能读取A表的任意记录，更不可能对A表做更新、新增、删除，直到事务1结束。（事务一对表增加了表级排他锁，其他事务不能对表增加共享锁或排他锁，也就无法进行任何操作）3.MySQL的默认隔离级别：可重复读；</code></pre><ol start="4"><li>索引有哪几种？索引的好处？什么时候用？索引的原理？</li></ol><p><a href="https://www.jianshu.com/p/2b541c028157" title="MySQL索引使用" target="_blank" rel="noopener">MySQL索引使用</a></p><pre><code>1.普通索引    eg:ALTER TABLE stu add INDEX index_id(id);</code></pre><p>使用索引前：</p><p><img src="https://i.imgur.com/qnwHm9Q.png" alt=""></p><p>使用索引后：</p><p><img src="https://i.imgur.com/CuYvDQi.png" alt=""></p><pre><code>2.唯一索引：索引列的值必须唯一，但允许为空。    eg:ALTER TABLE stu add UNIQUE index_id(id);3.主键索引（聚集索引）：特殊的唯一索引，索引列的值不允许为空。</code></pre><p><img src="https://i.imgur.com/UvVpFDi.png" alt=""></p><pre><code>4.组合索引：默认最左前缀的结果。组合索引的好处是已经对第二个键值进行了排序，无需额外的排序。    eg:alter table stu add index id_name_note(id,name(10),note);     相当于分别建立了：    1.（id,name,note）索引    2.（id,name）索引    3.（id）索引5.全文索引：格式为Match(列名)Against(关键字)，是搜索引擎使用的一种关键技术；</code></pre><p>什么时候使用索引呢？</p><pre><code>1.考虑在where和order by命令上涉及的列上建立索引；2.和其他表作连接的字段需要加索引；</code></pre><p>索引失效的情况：</p><pre><code>1.“%aaa%” 不会使用索引,而like “aaa%”可以使用索引;2.在列上进行运算将会使索引失效，包括计算表达式、数据库函数；3.MySQL查询只使用一个索引，因此如果where子句中已经使用了索引的话，那么order by中的列是不会使用索引的。4.联合索引未使用最左匹配原则，例如组合索引（A，B），where B=b不会使用索引；5.不要使用 NOT IN、&lt;&gt;、！= 操作索引会失效，但&lt;，&lt;=，=，&gt;=，BETWEEN，IN是可以用到索引的；</code></pre><ol start="7"><li><p>数据库引擎有哪些？说说他们的区别？</p><p> MyISAM</p><pre><code>1.表级锁、不支持事务、全文索引(查询效率上MyISAM要高)、不支持外键；2.MyISAM保存表的具体行数，InnoDB执行select count(*) from table时全表扫描；3.MyISAM非聚集索引，索引保存的是数据文件的地址，数据文件和索引是分离的，主键索引和辅助索引是独立的。</code></pre></li></ol><pre><code>InnoDB:    1.行级锁、支持事务、支持外键、支持MVCC、MySQL5.6.4版本以后开始支持FULLTEXT类型的索引；    2.InnoDB是聚集索引，数据文件和索引绑定在一起，必须要有主键，没的话会自动生成主键，主键    索引效率高，但是辅助索引需要两次查询，先查到主键，再通过主键查到数据，主键不应该设太大；</code></pre><ol start="8"><li></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1.select count(*) 和 select count(列名)？&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;前者会包含null的行，后者不会包括；
&lt;/code&gt;&lt;/pre&gt;&lt;ol&gt;
&lt;li&gt;B树（B-树）和B+树是解决什么样的问题的，怎样演化过来，之间区别？&lt;/li&gt;
&lt;/
      
    
    </summary>
    
      <category term="面试总结" scheme="http://www.xuchunfa.cn/categories/%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/"/>
    
      <category term="Mysql基础" scheme="http://www.xuchunfa.cn/categories/%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/Mysql%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
  <entry>
    <title>面试总结--Java设计模式</title>
    <link href="http://www.xuchunfa.cn/2019/02/18/%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93-Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>http://www.xuchunfa.cn/2019/02/18/面试总结-Java设计模式/</id>
    <published>2019-02-18T11:52:34.000Z</published>
    <updated>2019-02-18T11:54:07.303Z</updated>
    
    <content type="html"><![CDATA[<ol><li>写一个你认为最好的单例模式？</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;写一个你认为最好的单例模式？&lt;/li&gt;
&lt;/ol&gt;

      
    
    </summary>
    
      <category term="面试总结" scheme="http://www.xuchunfa.cn/categories/%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/"/>
    
      <category term="Java设计模式" scheme="http://www.xuchunfa.cn/categories/%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>面试总结--Java并发编程</title>
    <link href="http://www.xuchunfa.cn/2019/02/18/%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93-Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    <id>http://www.xuchunfa.cn/2019/02/18/面试总结-Java并发编程/</id>
    <published>2019-02-18T11:48:38.000Z</published>
    <updated>2019-04-15T07:55:59.205Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>线程创建的方法？</p><pre><code>1.继承Thread重写run方法；2.实现Runnable接口，new Thread(接口实现)；3.实现Callable&lt;V&gt;接口重写call方法，传给FutureTask对象，FutureTask(Callable&lt;V&gt; callable)，最后创建 new Thread(FutureTask&lt;V&gt; future)；4.线程池；</code></pre></li></ol><p>1.一个线程打印奇数另一个线程打印偶数</p><pre><code>static class PrintOddAndEven implements Runnable{    private static final int NUMBERS = 20;    private static volatile int index = 1;    private int flag;    static Object lock = new Object();//static    public PrintOddAndEven(int flag) {        this.flag = flag;    }    @Override    public void run(){        while(index &lt; NUMBERS){            synchronized (lock){                while ((index &amp; 1) != flag){                    try {                        lock.wait();                    } catch (InterruptedException e) {                        e.printStackTrace();                    }                }                System.out.println(Thread.currentThread().getName()+&quot;: &quot;+index);                index++;                lock.notifyAll();//将等待队列中的所有线程移到同步队列中去            }        }    }}public static void main(String[] args){    Thread oddThread = new Thread(new PrintOddAndEven(1));    Thread evenThread = new Thread(new PrintOddAndEven(0));    oddThread.start();    evenThread.start();}</code></pre><ol><li>ReadWriteLock读写之间互斥吗？</li><li><p>说说ReentrantLock是基于哪个类的？说说队列同步器？</p><p> 2.1 AbstractQueuedSynchronizer(AQS):</p><pre><code>抽象队列同步器。用于管理同步状态、阻塞和唤醒线程，以及维护被阻塞线程的队列。</code></pre><p> 2.2 自定义同步器需要重写AQS的以下方法：</p><pre><code>1.protected boolean tryAcquire(int arg)：独占式的获取同步状态，并使用CAS设置同步状态；    1.1 state = 0:表示获取到锁；    1.2 state = 1:表示锁被占用；    1.3 state &gt; 1:表示当前线程重入到已经获取到的锁；2.protected boolean tryRelease(int arg)：独占式的释放同步状态；3.protected int tryAcquireShared(int arg)：共享式获取同步状态，返回值大于等于0，表示获取成功，在读写锁中会被重写；4.tryReleaseShared、isHeldExclusively（是否被当前线程独占）；</code></pre><p> 2.3 同步队列的源码解析：</p></li></ol><p><a href="http://www.xuchunfa.cn/2019/04/14/%E5%90%8C%E6%AD%A5%E9%98%9F%E5%88%97%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/">同步队列解析</a></p><ol start="3"><li><p>ReentrantLock 是可重入锁，什么是可重入锁？</p><p> 该锁能够支持一个线程对资源的重复加锁。</p></li></ol><ol start="4"><li><p>synchronized和lock的区别？</p><pre><code>1.synchronized是java关键字，Lock是一个接口；2.synchronized方法发生异常时会自动释放线程占用的锁，Lock需要显示调用unLock()方法释放锁；3.Lock可以在等待获取锁的过程中响应中断（即可中断线程），通过lockInterruptibly()实现能被中断的获取锁；4.Readwritelock提高了读操作的效率，在资源竞争激烈的情况下Lock的效率要比synchronized高；</code></pre></li></ol><ol start="2"><li>Semaphore拿到执行权的线程之间是否互斥？</li><li><p>写一个生产者消费者模式？</p><p> public class TestProducerConsumer {</p><p> private static final int cap = 3;<br> static Queue<integer>  queue = new LinkedList<integer>();<br> static Object lock = new Object();</integer></integer></p><p> static class Producer implements Runnable{</p><pre><code>private static int product;@Overridepublic void run() {    synchronized (lock){        while (queue.size() == cap){            try {                System.out.println(&quot;queue is full: &quot;+Thread.currentThread().getName()+&quot; is waitting&quot;);                lock.wait();            } catch (InterruptedException e) {                e.printStackTrace();            }        }        System.out.println(Thread.currentThread().getName()+&quot; is product: &quot;+product);        queue.offer(product++);        lock.notify();    }}</code></pre><p> }</p><p> static class Consumer implements Runnable{</p><pre><code>@Overridepublic void run() {    synchronized (lock){        while (queue.size() == 0){            try {                lock.wait();                System.out.println(&quot;queue is empty: &quot;+Thread.currentThread().getName()+&quot; is waitting&quot;);            } catch (InterruptedException e) {                e.printStackTrace();            }        }        int product = queue.poll();        System.out.println(Thread.currentThread().getName()+&quot; is consume: &quot;+product);        lock.notify();    }}</code></pre><p> }</p></li><li><p>写一个死锁？</p><p> public class DeadLock {<br> static class SynAddRunnable implements Runnable{</p><pre><code>private int a,b;public SynAddRunnable(int a,int b){    this.a = a;    this.b = b;}@Overridepublic void run() {    //数字范围在-128到127之间直接返回缓存好的对象    //所以会存在资源的竞争    synchronized (Integer.valueOf(a)){        synchronized (Integer.valueOf(b)){            System.out.println(a + b);        }    }}</code></pre><p> }<br> public static void main(String[] args) {</p><pre><code>for (int i = 0; i &lt; 1000; i++) {    new Thread(new SynAddRunnable(1,2)).start();    new Thread(new SynAddRunnable(2,1)).start();}</code></pre><p> }<br> }</p></li><li><p>死锁的产生的原因以及怎么预防？</p><pre><code>原因： 1.系统资源不足； 2.进程运行的推进顺序不合理； 3.资源分配不当；</code></pre><p> 四个必要条件：</p><pre><code>1.互斥条件：一个资源每次只能被一个进程使用；2.请求和保持条件：一个进程因请求资源而阻塞时，对已经获得的资源保持不放；3.不剥夺条件：进程已经获得的资源，在未使用之前不能强行剥夺；4.循环等待条件：若干进程之间形成了一种头尾相接循环等待资源的关系；</code></pre><p> 预防死锁：</p><pre><code>1.破环请求和保持条件和不剥夺条件：一次性申请所需要的全部资源；  破环循环等待条件：资源分层，得到上一层资源后才能申请下一层的资源；</code></pre><p> 解决死锁的策略：</p><pre><code>1.死锁预防：破坏四个必要条件；2.死锁避免：指进程每次申请资源时判断安不安全，例如银行家算法。3.死锁检测：事后措施；4.死锁解除：强行剥夺进程的资源；</code></pre></li></ol><ol start="5"><li><p>int a = 1; 是原子性操作吗？</p><pre><code>是</code></pre></li><li><p>新的任务提交到线程池，线程池是怎样处理？</p><p> <a href="http://www.xuchunfa.cn/2018/08/04/%E7%BA%BF%E7%A8%8B%E6%B1%A0/">线程池详解</a></p></li><li><p>synchronized底层实现原理？</p><pre><code>使用方式： 1.同步普通方法，锁的是当前对象； 2.同步静态方法，锁的是当前Class的对象; 3.同步块，锁的是（）内的对象；</code></pre><p> 原理；（重量级锁）</p><pre><code>1.首先synchronized用的锁是存放在对象头里面的，JVM基于进入和退出Monitor（监视器锁互斥）对象实现同步块和同步方法的；2.编译之后在同步代码块之前插入Monitorenter指令，同步代码块完成之后或异常之后插入Monitorexit指令；</code></pre></li><li><p>锁有哪几种？</p><p>公平锁/非公平锁、可重入锁、独享锁/共享锁（读写锁）、悲观锁/乐观锁、分段锁、自旋锁等；</p><p>1.偏向锁:为了在只有一个线程执行同步块时提高性能。</p><pre><code>优点：加锁和解锁不需要额外的消耗；缺点：线程间如果存在锁竞争会带来额外的锁撤销消耗；场景：一个线程访问的同步块；</code></pre><p>2.轻量级锁：为了在线程近乎交替执行同步块时提高性能；</p><pre><code>优点：竞争的线程不会阻塞；缺点：没得到锁的线程会通过自旋，消耗CPU；场景：追求响应时间、同步块执行时间短；</code></pre><p>3.重量级锁：</p><pre><code>优点：竞争线程不自旋不会消耗CPU；缺点：线程阻塞、响应时间缓慢；场景：追求吞吐量；</code></pre></li><li><p>volatile作用，指令重排相关？    </p></li></ol><p>参考：</p><p><a href="http://www.xuchunfa.cn/2018/07/24/volatile%E8%AF%AD%E4%B9%89%E5%92%8Cfinal%E8%AF%AD%E4%B9%89%E7%9A%84%E7%90%86%E8%A7%A3/">volatile理解</a></p><p><a href="https://www.itcodemonkey.com/article/1725.html" target="_blank" rel="noopener">小灰漫画volatile</a></p><pre><code>1.volatile变量在线程之间具有可见性；基于CPU的内存屏障实现的。2.volatile变量禁止指令重排；3.每个volatile写操作前插入StoreStore屏障，写操作之后插入StoreLoad屏障；4.每个volatile读操作前插入LoadLoad屏障，读操作之后插入LoadStore屏障；</code></pre><p>9.java内存模型？</p><p><img src="https://i.imgur.com/7yPyszl.png" alt=""></p><pre><code>1.JMM是一种规范，用于决解由于多线程通过共享内存（主存）进行通信时，存在本地内存数据不一致，编译器对代码指令重排等带来的问题。2.java并发编程中保证原子性、可见性和有序性的方法：    原子性：synchronized保证方法和代码块内的操作是原子性的。    可见性：synchronized、volatile和final关键字；    有序性：synchronized关键字；3.happens-before原则（8个）：    3.1 程序次序规则：单线程内顺序发生；    3.2 锁定规则：unlock操作先于对同一个锁的lock操作；    3.3 volatile规则：对volatile变量的写操作先于读操作；    3.4 传递规则:A先于B，B先于C，则A先于C；    3.5 线程启动规则：Thread对象的start()先于该线程的每一个动作；    3.6 线程中断规则：对线程interrupt()方法的调用先行发生于被中断线程的代码检测到中断事件的发生；    3.7 线程终结规则：线程中所有的操作都先行发生于线程的终止检测，我们可以通过Thread.join()方法结束、Thread.isAlive()的返回值手段检测到线程已经终止执行；    3.8 对象终结规则：一个对象的初始化完成先行发生于他的finalize()方法的开始；</code></pre><ol start="11"><li>线程执行过程中遇到异常会发生什么，怎样处理？</li><li>线程的状态？</li></ol><p><img src="https://i.imgur.com/zSkw6Xh.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;&lt;p&gt;线程创建的方法？&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1.继承Thread重写run方法；

2.实现Runnable接口，new Thread(接口实现)；

3.实现Callable&amp;lt;V&amp;gt;接口重写call方法，传给FutureTask对象，Fut
      
    
    </summary>
    
      <category term="面试总结" scheme="http://www.xuchunfa.cn/categories/%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/"/>
    
      <category term="Java并发编程" scheme="http://www.xuchunfa.cn/categories/%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
    
  </entry>
  
</feed>
