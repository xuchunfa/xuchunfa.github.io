<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Flying in the ocean of knowledge</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.xuchunfa.cn/"/>
  <updated>2018-08-04T13:26:45.308Z</updated>
  <id>http://www.xuchunfa.cn/</id>
  
  <author>
    <name>Xu chunfa</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>线程池</title>
    <link href="http://www.xuchunfa.cn/2018/08/04/%E7%BA%BF%E7%A8%8B%E6%B1%A0/"/>
    <id>http://www.xuchunfa.cn/2018/08/04/线程池/</id>
    <published>2018-08-04T12:12:47.000Z</published>
    <updated>2018-08-04T13:26:45.308Z</updated>
    
    <content type="html"><![CDATA[<h4 id="为什么要使用线程池？"><a href="#为什么要使用线程池？" class="headerlink" title="为什么要使用线程池？"></a>为什么要使用线程池？</h4><p>1.降低资源消耗。重复利用已经创建的线程。因为线程的创建和销毁是需要消耗java虚拟机内存的。</p><p>2.提高响应速度。任务不需要等待线程的创建(当然是在线程池中的线程还没完全被消耗完的情况下)</p><p>3.提高线程的可管理性。</p><h4 id="线程池执行流程？"><a href="#线程池执行流程？" class="headerlink" title="线程池执行流程？"></a>线程池执行流程？</h4><p><img src="https://i.imgur.com/U289xRb.png" alt=""></p><pre><code>public static void start(){    ServerSocket serverSocket = new ServerSocket(port);    Socket socket = null;    while ((socket = serverSocket.accept() != null)){        thread.execute(new HttpRequestHandler(socket));    }}分析：提交的任务将会被线程池里面的线程执行，而不是通过创建新的线程来执行。</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;为什么要使用线程池？&quot;&gt;&lt;a href=&quot;#为什么要使用线程池？&quot; class=&quot;headerlink&quot; title=&quot;为什么要使用线程池？&quot;&gt;&lt;/a&gt;为什么要使用线程池？&lt;/h4&gt;&lt;p&gt;1.降低资源消耗。重复利用已经创建的线程。因为线程的创建和销毁是需要消耗ja
      
    
    </summary>
    
      <category term="Java并发编程" scheme="http://www.xuchunfa.cn/categories/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
    
  </entry>
  
  <entry>
    <title>基数排序</title>
    <link href="http://www.xuchunfa.cn/2018/08/04/%E5%9F%BA%E6%95%B0%E6%8E%92%E5%BA%8F/"/>
    <id>http://www.xuchunfa.cn/2018/08/04/基数排序/</id>
    <published>2018-08-04T06:04:16.000Z</published>
    <updated>2018-08-04T06:29:30.225Z</updated>
    
    <content type="html"><![CDATA[<h4 id="桶的思想？"><a href="#桶的思想？" class="headerlink" title="桶的思想？"></a>桶的思想？</h4><p><img src="https://i.imgur.com/5NeTrG5.png" alt=""></p><pre><code>public class RadixSort {public static void radixSort(int[] a,int k){    int[] counter = new int[10];    int[][] container = new int[10][a.length];    int n = 1;    int t = 0;    while (n &lt; k){        for(int num : a){            int radix = (num/n)%10;            container[radix][counter[radix]] = num;            counter[radix]++;        }        for(int i = 0;i &lt; 10;i++){                if(counter[i] != 0){                    for(int j = 0;j&lt;counter[i];j++){                        a[t] = container[i][j];                        t++;                    }                }            counter[i] = 0;        }        t = 0;        n *= 10;    }}public static void main(String[] args){    int[] a = {1,21,32,45,687,89,43,44,95};    RadixSort.radixSort(a,1000);    System.out.println(Arrays.toString(a));}}</code></pre><p><strong>时间复杂度：</strong></p><pre><code>时间复杂度 = [放桶的时间(O(n)) + 取桶里面的元素(O(n))]*位数     = O(d*n) (d为常数)空间复杂度 = O(n * 10 + 10) = O(n)</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;桶的思想？&quot;&gt;&lt;a href=&quot;#桶的思想？&quot; class=&quot;headerlink&quot; title=&quot;桶的思想？&quot;&gt;&lt;/a&gt;桶的思想？&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/5NeTrG5.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;pr
      
    
    </summary>
    
      <category term="排序" scheme="http://www.xuchunfa.cn/categories/%E6%8E%92%E5%BA%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>计数排序</title>
    <link href="http://www.xuchunfa.cn/2018/08/04/%E8%AE%A1%E6%95%B0%E6%8E%92%E5%BA%8F/"/>
    <id>http://www.xuchunfa.cn/2018/08/04/计数排序/</id>
    <published>2018-08-04T04:32:23.000Z</published>
    <updated>2018-08-04T04:46:07.709Z</updated>
    
    <content type="html"><![CDATA[<p><strong>核心思想：</strong>哈希表的思想，确定元素在整个数组的排第几来确定它在最终排序数组中的位置。</p><pre><code>public class CountSort {//数组数字在0 ~ k之间public static int[] countSort(int[] a,int k){    int[] elementCounter = new int[k+1];    for(int i = 0;i&lt;a.length;i++){        elementCounter[a[i]]++;    }    //构造计数数组(即小于等于该元素的个数)    int preSum = elementCounter[0];    for(int j = 1;j&lt;elementCounter.length;j++){        elementCounter[j] = preSum + elementCounter[j];        preSum = elementCounter[j];    }    int[] result = new int[a.length];    //从原数组末尾开始遍历    for(int i = a.length-1;i&gt;=0;i--){        result[elementCounter[a[i]]-1] = a[i];        elementCounter[a[i]]--;    }    return result;}public static void main(String[] args){    int[] a = {6,5,4,3,2,1};    int[] result = new int[a.length];    result = CountSort.countSort(a,6);    System.out.println(Arrays.toString(result));}}</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;核心思想：&lt;/strong&gt;哈希表的思想，确定元素在整个数组的排第几来确定它在最终排序数组中的位置。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;public class CountSort {

//数组数字在0 ~ k之间
public static int[] co
      
    
    </summary>
    
      <category term="排序" scheme="http://www.xuchunfa.cn/categories/%E6%8E%92%E5%BA%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>希尔排序</title>
    <link href="http://www.xuchunfa.cn/2018/08/03/%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F/"/>
    <id>http://www.xuchunfa.cn/2018/08/03/希尔排序/</id>
    <published>2018-08-03T06:46:38.000Z</published>
    <updated>2018-08-03T06:49:56.265Z</updated>
    
    <content type="html"><![CDATA[<h4 id="希尔排序示意图"><a href="#希尔排序示意图" class="headerlink" title="希尔排序示意图"></a>希尔排序示意图</h4><p><img src="https://images2015.cnblogs.com/blog/1024555/201611/1024555-20161128110416068-1421707828.png" alt=""></p><pre><code>public class ShellSort {public static void shellSort(int[] a){    for(int increment = a.length/2;increment &gt; 0 ;increment /= 2){        for(int i = increment;i&lt;a.length;i++){            int j = i;            while (j - increment &gt;=0  &amp;&amp; a[j-increment] &gt; a[j]){                //交换排序                swap(a,j,j-increment);                j -= increment;        }        }    }}private static void swap(int[] a, int i, int j) {    int temp = a[i];    a[i] = a[j];    a[j] = temp;}public static void shellSort1(int[] a){    for(int increment = a.length/2;increment &gt; 0 ;increment /= 2){        for(int i = increment;i&lt;a.length;i++){            int j = i;            int temp = a[j];            //直接插入            while(j-increment &gt;= 0 &amp;&amp; a[j-increment] &gt; temp){                a[j] = a[j-increment];                j -= increment;            }            a[j] = temp;        }    }}public static void main(String[] args){    int[] a = {9,8,7,6,5,4,3,2,1};    ShellSort.shellSort1(a);    System.out.println(Arrays.toString(a));}}</code></pre><p>参考文档一：<a href="https://www.cnblogs.com/chengxiao/p/6104371.html" target="_blank" rel="noopener">https://www.cnblogs.com/chengxiao/p/6104371.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;希尔排序示意图&quot;&gt;&lt;a href=&quot;#希尔排序示意图&quot; class=&quot;headerlink&quot; title=&quot;希尔排序示意图&quot;&gt;&lt;/a&gt;希尔排序示意图&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;https://images2015.cnblogs.com/blog/1024
      
    
    </summary>
    
      <category term="排序" scheme="http://www.xuchunfa.cn/categories/%E6%8E%92%E5%BA%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>归并排序</title>
    <link href="http://www.xuchunfa.cn/2018/08/02/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/"/>
    <id>http://www.xuchunfa.cn/2018/08/02/归并排序/</id>
    <published>2018-08-02T06:40:42.000Z</published>
    <updated>2018-08-02T08:25:38.669Z</updated>
    
    <content type="html"><![CDATA[<p><strong>什么叫分治思想？</strong></p><p>分治法将问题分(divide)成一些小的问题然后递归求解，而治(conquer)的阶段则将分的阶段得到的各答案”修补”在一起，即分而治之</p><p><img src="https://images2015.cnblogs.com/blog/1024555/201612/1024555-20161218163120151-452283750.png" alt=""></p><pre><code>public class MergeSort {//临时数组public static void sort(int[] a){    int[] temp = new int[a.length];    mergeSort(a,0,a.length-1,temp);}//治的思想public static void merge(int[] a,int left,int mid,int right,int[] temp){    int i = left;    int j = mid + 1;    int k = 0;    while(i &lt;= mid &amp;&amp; j &lt;= right){        if(a[i] &lt; a[j]){            temp[k++] = a[i++];        }else{            temp[k++] = a[j++];        }    }    while (i &lt;= mid){        temp[k++] = a[i++];    }    while (j &lt;= right){        temp[k++] = a[j++];    }    k = 0;    while (left &lt;= right){        a[left++] = temp[k++];    }}//归并排序public static void mergeSort(int[] a,int left,int right,int[] temp){    if(a == null){        throw new RuntimeException(&quot;输入数组&quot;);    }    if(left &lt; 0 || left &gt;= a.length || right &lt; 0 || right &gt;= a.length ){        throw new RuntimeException(&quot;越界&quot;);    }    if(left &gt;= right)        return;    int mid = (left + right)/2;    //分    mergeSort(a,left,mid,temp);    mergeSort(a,mid+1,right,temp);    //治    merge(a,left,mid,right,temp);}public static void main(String[] args){    int[] a = {6,5,4,4,4,3,2,1};    sort(a);    System.out.println(Arrays.toString(a));}}</code></pre><p>参考文档一：<a href="https://www.cnblogs.com/chengxiao/p/6194356.html" target="_blank" rel="noopener">https://www.cnblogs.com/chengxiao/p/6194356.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;什么叫分治思想？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;分治法将问题分(divide)成一些小的问题然后递归求解，而治(conquer)的阶段则将分的阶段得到的各答案”修补”在一起，即分而治之&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2015
      
    
    </summary>
    
      <category term="排序" scheme="http://www.xuchunfa.cn/categories/%E6%8E%92%E5%BA%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>进程和线程分析</title>
    <link href="http://www.xuchunfa.cn/2018/08/02/%E8%BF%9B%E7%A8%8B%E5%92%8C%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://www.xuchunfa.cn/2018/08/02/进程和线程的区别/</id>
    <published>2018-08-02T05:36:27.000Z</published>
    <updated>2018-08-03T12:40:25.886Z</updated>
    
    <content type="html"><![CDATA[<h4 id="线程中Blocked-和-Waiting-状态的区别？"><a href="#线程中Blocked-和-Waiting-状态的区别？" class="headerlink" title="线程中Blocked 和 Waiting 状态的区别？"></a>线程中Blocked 和 Waiting 状态的区别？</h4><p><strong>Blocked:</strong>线程在等待监视器锁(例如synchronized方法或者块)或者线程在调用过对象的wait()方法后，重新被唤醒时(例如：notify()),此时会进入Blocked状态,试图获得调用对象的锁。</p><p><strong>Waiting:</strong><br>由于主动调用了以下方法而进入的状态：<br>1.Object.wait()<br>2.Thread.join()<br>3.LockSupport.park()</p><p><strong>Time_waiting:</strong><br>调用了以下方法：<br>1.Thread.sleep<br>2.Object.wait(long)<br>3.Thread.join(long)<br>4.LockSupport.parkNanos<br>5.LockSupport.parkUntil</p><h4 id="同步队列和等待队列的区别？"><a href="#同步队列和等待队列的区别？" class="headerlink" title="同步队列和等待队列的区别？"></a>同步队列和等待队列的区别？</h4><p><strong>同步队列：</strong>存放竞争同步资源的线程的引用。</p><p><strong>等待队列：</strong>存放着等待被唤醒的线程的引用。</p><pre><code>等待/通知的经典范式如下：等待方synchronized(对象){    while(条件不满足){        对象.wait()    }    处理逻辑}通知方synchronized(对象){    改变条件    对象.notifyAll()}</code></pre><hr><pre><code>等待超时模式如下：public synchronized Object get(long mills) throw InterruptedException{if(mills &lt;= 0){    while(result == null){        wait();    }     return result;}else{    long future = System.currentTimeMillis() + mills;    long remaining = mills;    while(result == null &amp;&amp; remaining &gt; 0){        wait(remaining);        remaining = future - System.currentTimeMillis();    }    result == null;    if(result != null){        return result;    }    return result;}</code></pre><h4 id="进程和线程的区别？"><a href="#进程和线程的区别？" class="headerlink" title="进程和线程的区别？"></a>进程和线程的区别？</h4><p><strong>进程：</strong>可以看成是每个运行中的程序。它可以拥有自己独立的资源。</p><p><strong>线程：</strong>操作系统调度的最小单元。线程是进程的一个实体，它们可以访问共享的内存变量。</p><p><strong>进程和线程的联系：</strong>一个进程里面可以创建多个线程，每个线程都拥有各自的计数器、堆栈和局部变量等。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;线程中Blocked-和-Waiting-状态的区别？&quot;&gt;&lt;a href=&quot;#线程中Blocked-和-Waiting-状态的区别？&quot; class=&quot;headerlink&quot; title=&quot;线程中Blocked 和 Waiting 状态的区别？&quot;&gt;&lt;/a&gt;线程中Bl
      
    
    </summary>
    
      <category term="Java并发编程" scheme="http://www.xuchunfa.cn/categories/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
    
  </entry>
  
  <entry>
    <title>堆排序</title>
    <link href="http://www.xuchunfa.cn/2018/07/29/%E5%A0%86%E6%8E%92%E5%BA%8F/"/>
    <id>http://www.xuchunfa.cn/2018/07/29/堆排序/</id>
    <published>2018-07-29T10:33:19.000Z</published>
    <updated>2018-07-29T15:14:08.962Z</updated>
    
    <content type="html"><![CDATA[<h4 id="堆排序？"><a href="#堆排序？" class="headerlink" title="堆排序？"></a>堆排序？</h4><pre><code>public class HeapSort {public static void heapSort(int[] a){    if(a == null){        throw new RuntimeException(&quot;输入数组&quot;);    }    int len = a.length;    //构建大顶堆    for(int i = len/2-1;i&gt;=0;i--){        createHeap(a,i,len);    }    for(int j = a.length-1;j&gt;0;j--){        swap(a,0,j);        createHeap(a,0,j);    }}private static void swap(int[] a, int i, int j) {    int temp = a[i];    a[i] = a[j];    a[j] = temp;}private static void createHeap(int[] a,int i,int len) {    int father = a[i];    int j;//j代表子结点坐标 i代表父结点坐标    while(2*i + 1 &lt; len){        j = 2*i + 1;        if(j + 1 &lt; len &amp;&amp; a[j] &lt; a[j+1] )            j++;        if(a[j] &gt; father){            a[i] = a[j];            i = j;        }else {            break;        }    }    //找到最终位置    a[i] = father;}public static void main(String[] args){    int[] a = {1,1,1};    HeapSort.heapSort(a);    System.out.println(Arrays.toString(a));}}</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;堆排序？&quot;&gt;&lt;a href=&quot;#堆排序？&quot; class=&quot;headerlink&quot; title=&quot;堆排序？&quot;&gt;&lt;/a&gt;堆排序？&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;public class HeapSort {

public static void heapSort(i
      
    
    </summary>
    
      <category term="排序" scheme="http://www.xuchunfa.cn/categories/%E6%8E%92%E5%BA%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>直接插入排序</title>
    <link href="http://www.xuchunfa.cn/2018/07/29/%E7%9B%B4%E6%8E%A5%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/"/>
    <id>http://www.xuchunfa.cn/2018/07/29/直接插入排序/</id>
    <published>2018-07-29T10:30:34.000Z</published>
    <updated>2018-07-29T10:33:02.808Z</updated>
    
    <content type="html"><![CDATA[<h4 id="直接插入排序？"><a href="#直接插入排序？" class="headerlink" title="直接插入排序？"></a>直接插入排序？</h4><pre><code>public class InsertSort {public static void insert(int[] a){    if(a == null){        throw new RuntimeException(&quot;输入数组&quot;);    }    if(a.length &lt;= 1){        return;    }    for(int j = 1;j&lt;a.length;j++){        int temp = a[j];        int i;        for(i = j-1;i&gt;=0 &amp;&amp; a[i]&gt;temp;i--){            a[i+1] = a[i];        }        //不满足上面for循环的话,元素不动        a[i+1] = temp;    }}public static void main(String[] args){    int[] a = {4,2,2,2,1,5,7,6};    InsertSort.insert(a);    System.out.println(Arrays.toString(a));}}</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;直接插入排序？&quot;&gt;&lt;a href=&quot;#直接插入排序？&quot; class=&quot;headerlink&quot; title=&quot;直接插入排序？&quot;&gt;&lt;/a&gt;直接插入排序？&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;public class InsertSort {

public static v
      
    
    </summary>
    
      <category term="排序" scheme="http://www.xuchunfa.cn/categories/%E6%8E%92%E5%BA%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>旋转数组中的最小值</title>
    <link href="http://www.xuchunfa.cn/2018/07/28/%E6%97%8B%E8%BD%AC%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%9C%80%E5%B0%8F%E5%80%BC/"/>
    <id>http://www.xuchunfa.cn/2018/07/28/旋转数组中的最小值/</id>
    <published>2018-07-28T13:37:21.000Z</published>
    <updated>2018-07-28T13:40:56.221Z</updated>
    
    <content type="html"><![CDATA[<h4 id="找出递增数组旋转后的最小值？"><a href="#找出递增数组旋转后的最小值？" class="headerlink" title="找出递增数组旋转后的最小值？"></a>找出递增数组旋转后的最小值？</h4><pre><code>public class RotateArray {//如果把排序数组的前0个元素搬到最后面,算法得不到正确结果public static int minElement2(int[] a){    if(a == null){        throw new RuntimeException(&quot;输入数组&quot;);    }    if(a.length == 0){        throw new RuntimeException(&quot;数组为空&quot;);    }    int low = 0;    int high = a.length-1;    int media;    while (low &lt; high){        if(high == low + 1){            return a[high];        }        media = (low + high)/2;        if(a[media] &gt;= a[low]){            low = media;        }else if(a[media] &lt;= a[high]){            high = media;        }    }    return a[high];}//解决了a = {1,2,3} 的问题public static int minElement1(int[] a){    if(a == null){        throw new RuntimeException(&quot;输入数组&quot;);    }    if(a.length == 0){        throw new RuntimeException(&quot;数组为空&quot;);    }    int low = 0;    int high = a.length-1;    int media = low;    while (a[low] &gt;= a[high]){        if(high == low + 1){            media = high;            break;        }        media = (low + high)/2;        if(a[media] &gt;= a[low]){            low = media;        }else if(a[media] &lt;= a[high]){            high = media;        }    }    return a[media];}//解决了 a = {0,1,1,1,1} --&gt; {1,0,1,1,1}的情况public static int minElement(int[] a){    if(a == null){        throw new RuntimeException(&quot;输入数组&quot;);    }    if(a.length == 0){        throw new RuntimeException(&quot;数组为空&quot;);    }    int low = 0;    int high = a.length-1;    int media = low;    while (a[low] &gt;= a[high]){        if(high == low + 1){            media = high;            break;        }        media = (low + high)/2;        //顺序查找        if(a[low] == a[high] &amp;&amp; a[low] == a[media]){            return fromBeginToEnd(a,low,high);        }        if(a[media] &gt;= a[low]){            low = media;        }else if(a[media] &lt;= a[high]){            high = media;        }    }    return a[media];}private static int fromBeginToEnd(int[] a,int start,int end) {    int min = a[start];    for(int i = start;i&lt;end;i++){        if(a[i] &lt; min){            min = a[i];        }    }    return min;}public static void main(String[] args){    int[] a = {1,1,1,0,1};    System.out.println(RotateArray.minElement(a));}}</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;找出递增数组旋转后的最小值？&quot;&gt;&lt;a href=&quot;#找出递增数组旋转后的最小值？&quot; class=&quot;headerlink&quot; title=&quot;找出递增数组旋转后的最小值？&quot;&gt;&lt;/a&gt;找出递增数组旋转后的最小值？&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;public class R
      
    
    </summary>
    
      <category term="数组" scheme="http://www.xuchunfa.cn/categories/%E6%95%B0%E7%BB%84/"/>
    
    
  </entry>
  
  <entry>
    <title>排序算法比较</title>
    <link href="http://www.xuchunfa.cn/2018/07/28/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E6%AF%94%E8%BE%83/"/>
    <id>http://www.xuchunfa.cn/2018/07/28/排序算法比较/</id>
    <published>2018-07-28T08:13:19.000Z</published>
    <updated>2018-08-04T04:51:34.645Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://itimetraveler.github.io/gallery/sort-algorithms/big-o.png" alt=""></p><p><strong>学习过程中一点点积累补充</strong></p><h4 id="什么叫做稳定性？"><a href="#什么叫做稳定性？" class="headerlink" title="什么叫做稳定性？"></a>什么叫做稳定性？</h4><p>稳定性是指：表示两个值相同的元素在排序前后是否有位置变化。如果前后位置变化，则排序算法是不稳定的，否则是稳定的。</p><ul><li><p>快排分析</p><p>  <strong>时间复杂度：</strong></p><p>  1.最优情况下：两边元素被划分的很均匀，递归次数等价于一颗二叉树的深度<a href="取下整的意思">logn</a>+1，第一次partition的时候需要和pivot比较n次</p><p>  时间复杂度：nlogn</p><p>  2.最差情况下：划分为了一颗斜着的树，递归次数为n-1,第一次划分还是得比较n次</p><p>  时间复杂度：n^2</p><p>  3.一般情况下：略</p><p>  时间复杂度：nlogn</p><p>  <strong>空间复杂度：</strong></p><p>  1.最优情况：因为递归调用会消耗空间，空间复杂度取决于栈的调用层数。</p><p>  空间复杂度：O(logn)</p><p>  2.最差情况：略</p><p>  空间复杂度：O(n)</p><p>  <strong>补充：</strong>快排是不稳定的。</p></li><li><p>直接插入排序</p><p>  <strong>时间复杂度：</strong></p><p>  1.最优情况：正序时，比较次数O(n),移动次数0次。</p><p>  时间复杂度：O(n)</p><p>  2.最坏情况：反序时，移动次数O(n^2),比较次数也是O(n^2)的。</p><p>  时间复杂度：O(n^2)</p><p>  平均复杂度:O(n^2)</p><p>  <strong>空间复杂度：</strong></p><p>  空间复杂度：O(1)</p><p>  <strong>补充：</strong>插入排序是稳定的。适用于有一定顺序的数据。</p></li><li><p>冒泡排序</p><p>  <strong>时间复杂度：</strong></p><p>  1.最优情况：优化后的冒泡排序，只进行了一轮比较，O(n-1)。</p><p>  时间复杂度：O(n)</p><p>  2.最坏情况：逆序，交换次数O(n^2)。</p><p>  时间复杂度:O(n^2)</p><p>  平均时间复杂度：O(n^2)</p><p>  <strong>空间复杂度：</strong>O(1)</p></li><li><p>简单选择排序</p><p>  <strong>时间复杂度：</strong></p><p>  1.最优情况：有序，交换次数0次，比较次数O(n^2)</p><p>  时间复杂度：O(n^2)</p><p>  2.最坏情况：逆序，交换次数O(n^2)，比较次数O(n^2)</p><p>  时间复杂度:O(n^2)</p><p>  平均时间复杂度：O(n^2)</p><p>  <strong>空间复杂度：</strong>O(1)</p></li><li><p>堆排序</p><p>  <strong>时间复杂度：</strong></p><p>  分析：</p><p>  初始化堆的过程时间：O(n)</p><p>  更改元素后重建时间：O(nlogn) = (n-1)logn = 循环次数*树的深度</p><p>  最好 = 最坏 = 平均时间复杂度 = O(nlogn)</p><p>  <strong>空间复杂度：</strong>O(1)</p></li><li><p>归并排序</p><p>  总时间 = 划分时间 + 合并时间</p><p>  <strong>时间复杂度：</strong></p><p>  最好 = 最坏 = 平均 = O(nlogn)</p><p>  <strong>空间复杂度：</strong></p><p>  O(n) = O(logn) + O(n)</p></li><li><p>希尔排序</p><p>  <strong>时间复杂度：</strong></p><p>  最坏：O(n^2)</p><p>  最好：O(n)</p><p>  平均：O(n^1.5)</p><p>  <strong>空间复杂度：</strong>O(1)</p></li></ul><p>-计数排序</p><pre><code>时间复杂度： O(n+K) = 遍历原数组 + 遍历计数数组 + 元素插入新数组       = O(n) + O(k) + O(n)空间复杂度：O(n+k)</code></pre><p>参考文档一：<a href="https://www.cnblogs.com/fengty90/p/3768827.html" target="_blank" rel="noopener">https://www.cnblogs.com/fengty90/p/3768827.html</a></p><p>参考文档二：<a href="https://blog.csdn.net/YuZhiHui_No1/article/details/44258297" target="_blank" rel="noopener">https://blog.csdn.net/YuZhiHui_No1/article/details/44258297</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://itimetraveler.github.io/gallery/sort-algorithms/big-o.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;学习过程中一点点积累补充&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&quot;什么叫
      
    
    </summary>
    
      <category term="排序" scheme="http://www.xuchunfa.cn/categories/%E6%8E%92%E5%BA%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>斐波拉契数列</title>
    <link href="http://www.xuchunfa.cn/2018/07/27/%E6%96%90%E6%B3%A2%E6%8B%89%E5%A5%91%E6%95%B0%E5%88%97/"/>
    <id>http://www.xuchunfa.cn/2018/07/27/斐波拉契数列/</id>
    <published>2018-07-27T11:43:48.000Z</published>
    <updated>2018-07-27T13:49:26.110Z</updated>
    
    <content type="html"><![CDATA[<h4 id="斐波拉契数列？"><a href="#斐波拉契数列？" class="headerlink" title="斐波拉契数列？"></a>斐波拉契数列？</h4><pre><code>public class Fibonacci {//效率差public static long fibonacci1(int n){    if(n == 0)        return 0;    if(n == 1)        return 1;    return fibonacci1(n-1) + fibonacci1(n-2);}public static long fibonacci(int n){    if(n == 0)        return 0;    if(n == 1)        return 1;    long one = 0;    long two = 1;    long three = 0;    for(int i = 2;i&lt;=n;i++){        three = one + two;        one = two;        two = three;    }    return three;}public static void main(String[] args){    System.out.println(Fibonacci.fibonacci1(50));}}</code></pre><h4 id="青蛙可以跳一级台阶和二级台阶-跳上-n-级台阶共有多少种跳法？"><a href="#青蛙可以跳一级台阶和二级台阶-跳上-n-级台阶共有多少种跳法？" class="headerlink" title="青蛙可以跳一级台阶和二级台阶,跳上 n 级台阶共有多少种跳法？"></a>青蛙可以跳一级台阶和二级台阶,跳上 n 级台阶共有多少种跳法？</h4><pre><code>public class FrogStep {public static long solution(int n) {    if (n == 0) {        throw new RuntimeException(&quot;输入自然数&quot;);    }    if (n == 1) {        return 1;    }    if (n == 2) {        return 2;    }    long one = 1;    long two = 2;    long three = 0;    for (int i = 3; i &lt;= n; i++) {        three = one + two;        one = two;        two = three;    }    return three;}public static void main(String[] args){    System.out.println(FrogStep.solution(100));}}</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;斐波拉契数列？&quot;&gt;&lt;a href=&quot;#斐波拉契数列？&quot; class=&quot;headerlink&quot; title=&quot;斐波拉契数列？&quot;&gt;&lt;/a&gt;斐波拉契数列？&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;public class Fibonacci {

//效率差
public sta
      
    
    </summary>
    
      <category term="策略类" scheme="http://www.xuchunfa.cn/categories/%E7%AD%96%E7%95%A5%E7%B1%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>栈和队列</title>
    <link href="http://www.xuchunfa.cn/2018/07/27/%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/"/>
    <id>http://www.xuchunfa.cn/2018/07/27/栈和队列/</id>
    <published>2018-07-27T11:39:06.000Z</published>
    <updated>2018-07-27T11:43:19.234Z</updated>
    
    <content type="html"><![CDATA[<h4 id="两个栈实现队列？"><a href="#两个栈实现队列？" class="headerlink" title="两个栈实现队列？"></a>两个栈实现队列？</h4><pre><code>public class StackToQueue&lt;T&gt; {private Stack&lt;T&gt; stack1 = new Stack&lt;T&gt;();private Stack&lt;T&gt; stack2 = new Stack&lt;T&gt;();public void appendTail(T element){    stack1.push(element);}public T deleteHead(){    if(stack2.size() &lt;= 0){        while(!stack1.empty()){            T element = stack1.pop();            stack2.push(element);        }    }    //说明stack1 也没元素了    if(stack2.isEmpty()){        throw new RuntimeException(&quot;队列为空&quot;);    }    T head = stack2.pop();    return head;}public static void main(String[] args){    StackToQueue&lt;Integer&gt; queue = new StackToQueue&lt;Integer&gt;();    queue.appendTail(1);    queue.appendTail(2);    queue.appendTail(3);    Integer a = queue.deleteHead();    queue.appendTail(4);    Integer b = queue.deleteHead();    System.out.println(b);}}</code></pre><h4 id="两个队列实现栈？"><a href="#两个队列实现栈？" class="headerlink" title="两个队列实现栈？"></a>两个队列实现栈？</h4><pre><code>public class StackToQueue&lt;T&gt; {private Stack&lt;T&gt; stack1 = new Stack&lt;T&gt;();private Stack&lt;T&gt; stack2 = new Stack&lt;T&gt;();public void appendTail(T element){    stack1.push(element);}public T deleteHead(){    if(stack2.size() &lt;= 0){        while(!stack1.empty()){            T element = stack1.pop();            stack2.push(element);        }    }    //说明stack1 也没元素了    if(stack2.isEmpty()){        throw new RuntimeException(&quot;队列为空&quot;);    }    T head = stack2.pop();    return head;}public static void main(String[] args){    StackToQueue&lt;Integer&gt; queue = new StackToQueue&lt;Integer&gt;();    queue.appendTail(1);    queue.appendTail(2);    queue.appendTail(3);    Integer a = queue.deleteHead();    queue.appendTail(4);    Integer b = queue.deleteHead();    System.out.println(b);}}</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;两个栈实现队列？&quot;&gt;&lt;a href=&quot;#两个栈实现队列？&quot; class=&quot;headerlink&quot; title=&quot;两个栈实现队列？&quot;&gt;&lt;/a&gt;两个栈实现队列？&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;public class StackToQueue&amp;lt;T&amp;gt; {


      
    
    </summary>
    
      <category term="栈和队列" scheme="http://www.xuchunfa.cn/categories/%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/"/>
    
    
  </entry>
  
  <entry>
    <title>二叉树的下一个结点</title>
    <link href="http://www.xuchunfa.cn/2018/07/24/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E4%B8%8B%E4%B8%80%E4%B8%AA%E7%BB%93%E7%82%B9/"/>
    <id>http://www.xuchunfa.cn/2018/07/24/二叉树的下一个结点/</id>
    <published>2018-07-24T14:16:23.000Z</published>
    <updated>2018-07-24T14:19:19.302Z</updated>
    
    <content type="html"><![CDATA[<h4 id="给定一个结点，找出中序遍历序列的下一个结点？"><a href="#给定一个结点，找出中序遍历序列的下一个结点？" class="headerlink" title="给定一个结点，找出中序遍历序列的下一个结点？"></a>给定一个结点，找出中序遍历序列的下一个结点？</h4><pre><code>public class ParentBinaryTree {ParentBinaryTreeNode root;public void createTree(ParentBinaryTreeNode node,int data){    if(this.root == null){        root = new ParentBinaryTreeNode(data);    }else {        //二叉查找树        if(data &lt; node.data){            if(node.left == null){                ParentBinaryTreeNode temp = new ParentBinaryTreeNode(data);                node.left = temp;                temp.parent = node;            }else {                createTree(node.left,data);            }        }else {            if(node.right == null){                ParentBinaryTreeNode temp = new ParentBinaryTreeNode(data);                node.right = temp;                temp.parent = node;            }else {                createTree(node.right,data);            }        }    }}//中序遍历,递归实现public void inOrder(ParentBinaryTreeNode node){    if(node == null)        return;    inOrder(node.left);    System.out.print(node.data + &quot; &quot;);    inOrder(node.right);}//找出中序遍历中的下一个点public ParentBinaryTreeNode searchNext(ParentBinaryTreeNode node,int data){    if(node == null){        throw new RuntimeException(&quot;空树&quot;);    }    ParentBinaryTreeNode dataNode = searchData(node,data);    ParentBinaryTreeNode next = null;    if(dataNode == null){        throw new RuntimeException(&quot;不存在该值&quot;);    }else{        //有右子树        if(dataNode.right != null){            ParentBinaryTreeNode temp = dataNode.right;            while (temp.left != null){                temp = temp.left;            }            next = temp;        }else if(dataNode.parent != null){//等于null说明是根节点            ParentBinaryTreeNode current =  dataNode;            ParentBinaryTreeNode parent = current.parent;            while (parent != null &amp;&amp; parent.right == current){                current = parent;                parent = parent.parent;            }            next = parent;//parent有可能为null        }    }    return next;}private ParentBinaryTreeNode searchData(ParentBinaryTreeNode node, int data) {    if(node == null){       return null;    }    if(node.data == data){        return node;    }else if(searchData(node.left,data) != null){        return searchData(node.left,data);    }else        return searchData(node.right,data);}public static void main(String[] args){    ParentBinaryTree tree = new ParentBinaryTree();    //for(int i = 2;i&lt;10;i++){    //    tree.createTree(tree.root,i);    //}    tree.createTree(tree.root,9);    tree.createTree(tree.root,5);    tree.createTree(tree.root,3);    tree.createTree(tree.root,7);    tree.createTree(tree.root,6);    tree.createTree(tree.root,8);    tree.createTree(tree.root,12);    tree.createTree(tree.root,10);    tree.createTree(tree.root,14);    tree.inOrder(tree.root);    System.out.println();    ParentBinaryTreeNode node = tree.searchNext(tree.root,5);    if(node != null){        System.out.println(node.data);    }else {        System.out.println(&quot;最后一个结点&quot;);    }}}</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;给定一个结点，找出中序遍历序列的下一个结点？&quot;&gt;&lt;a href=&quot;#给定一个结点，找出中序遍历序列的下一个结点？&quot; class=&quot;headerlink&quot; title=&quot;给定一个结点，找出中序遍历序列的下一个结点？&quot;&gt;&lt;/a&gt;给定一个结点，找出中序遍历序列的下一个结
      
    
    </summary>
    
      <category term="树" scheme="http://www.xuchunfa.cn/categories/%E6%A0%91/"/>
    
    
  </entry>
  
  <entry>
    <title>volatile语义理解</title>
    <link href="http://www.xuchunfa.cn/2018/07/24/volatile%E8%AF%AD%E4%B9%89%E7%90%86%E8%A7%A3/"/>
    <id>http://www.xuchunfa.cn/2018/07/24/volatile语义理解/</id>
    <published>2018-07-24T09:05:01.000Z</published>
    <updated>2018-07-25T02:54:46.302Z</updated>
    
    <content type="html"><![CDATA[<p><strong>volatile读：</strong>线程先把本地内存中的变量置为无效,然后直接去主内存中去读（宏观上volatile变量的写对volatile变量的读可见）。</p><p><strong>锁释放和获得：</strong>锁释放的内存语义和volatile的写操作相似，获得锁和volatile读操作相同。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;volatile读：&lt;/strong&gt;线程先把本地内存中的变量置为无效,然后直接去主内存中去读（宏观上volatile变量的写对volatile变量的读可见）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;锁释放和获得：&lt;/strong&gt;锁释放的内存语义和volatile
      
    
    </summary>
    
      <category term="Java并发编程" scheme="http://www.xuchunfa.cn/categories/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
    
  </entry>
  
  <entry>
    <title>前序中序后序构建二叉树</title>
    <link href="http://www.xuchunfa.cn/2018/07/24/%E5%89%8D%E5%BA%8F%E4%B8%AD%E5%BA%8F%E5%90%8E%E5%BA%8F%E6%9E%84%E5%BB%BA%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <id>http://www.xuchunfa.cn/2018/07/24/前序中序后序构建二叉树/</id>
    <published>2018-07-24T06:58:22.000Z</published>
    <updated>2018-07-24T08:26:16.443Z</updated>
    
    <content type="html"><![CDATA[<h4 id="根据前序和中序序列构建二叉树？根据中序和后序序列构建二叉树？"><a href="#根据前序和中序序列构建二叉树？根据中序和后序序列构建二叉树？" class="headerlink" title="根据前序和中序序列构建二叉树？根据中序和后序序列构建二叉树？"></a>根据前序和中序序列构建二叉树？根据中序和后序序列构建二叉树？</h4><p><strong>核心思想：</strong>递归创建，更新start和end坐标。</p><pre><code>public class RestructBinaryTree {private BinaryTreeNode root;//根据前序和中序构造二叉树public BinaryTreeNode preAndIn(int[] pre,int preStart,int preEnd,int[] in,int inStart,int inEnd){    if(pre == null || in == null || pre.length &lt;= 0 || in.length &lt;= 0){        throw new RuntimeException(&quot;序列数组长度需大于0&quot;);    }    if(preEnd &lt; preStart || inEnd &lt; inStart){        return null;    }    //第一个结点    BinaryTreeNode node = new BinaryTreeNode(pre[preStart]);    int i = 0;    for(;i&lt;in.length;i++){        if(node.data == in[i]){            node.left = preAndIn(pre,preStart+1,preStart+i-inStart,in,inStart,i-1);            node.right = preAndIn(pre,preStart+i-inStart+1,preEnd,in,i+1,inEnd);            break;        }    }    if(i == in.length){        throw new RuntimeException(&quot;两组序列不匹配&quot;);    }    return node;}//根据中序和后序构造二叉树public BinaryTreeNode inAndPost(int[] post,int postStart,int postEnd,int[] in,int inStart,int inEnd){    if(post == null || in == null || post.length &lt;= 0 || in.length &lt;= 0){        throw new RuntimeException(&quot;序列数组长度需大于0&quot;);    }    if(postEnd &lt; postStart || inEnd &lt; inStart){        return null;    }    //第一个结点    BinaryTreeNode node = new BinaryTreeNode(post[postEnd]);    int i = 0;    for(;i&lt;in.length;i++){        if(node.data == in[i]){            node.right = inAndPost(post,postEnd-inEnd+i,postEnd-1,in,i+1,inEnd);            node.left = inAndPost(post,postStart,postEnd-inEnd+i-1,in,inStart,i-1);            break;        }    }    if(i == in.length){        throw new RuntimeException(&quot;两组序列不匹配&quot;);    }    return node;}//先序遍历,递归实现public void preOrder(BinaryTreeNode node){    if (node == null)        return;    System.out.print(node.data + &quot; &quot;);    preOrder(node.left);    preOrder(node.right);}//后序遍历public void postOrder(BinaryTreeNode node) {    if (node == null)        return;    postOrder(node.left);    postOrder(node.right);    System.out.print(node.data + &quot; &quot;);}public static void main(String[] args){    RestructBinaryTree tree = new RestructBinaryTree();    int[] pre = {1,2,3,4};    int[] in = {4,3,2,1};    int[] post = {7,4,2,5,8,6,3,1};    //tree.root = tree.inAndPost(post,0,post.length-1,in,0,in.length-1);    tree.root = tree.preAndIn(pre,0,pre.length-1,in,0,in.length-1);    //tree.preOrder(tree.root);    tree.postOrder(tree.root); }}</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;根据前序和中序序列构建二叉树？根据中序和后序序列构建二叉树？&quot;&gt;&lt;a href=&quot;#根据前序和中序序列构建二叉树？根据中序和后序序列构建二叉树？&quot; class=&quot;headerlink&quot; title=&quot;根据前序和中序序列构建二叉树？根据中序和后序序列构建二叉树？&quot;&gt;
      
    
    </summary>
    
      <category term="树" scheme="http://www.xuchunfa.cn/categories/%E6%A0%91/"/>
    
    
  </entry>
  
  <entry>
    <title>java内存模型</title>
    <link href="http://www.xuchunfa.cn/2018/07/23/java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/"/>
    <id>http://www.xuchunfa.cn/2018/07/23/java内存模型/</id>
    <published>2018-07-23T12:12:59.000Z</published>
    <updated>2018-07-31T07:37:01.777Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>happens-before原则：</p><h4 id="怎么理解内存可见性？"><a href="#怎么理解内存可见性？" class="headerlink" title="怎么理解内存可见性？"></a>怎么理解内存可见性？</h4><p>  在单线程或者多线程之间，如果两个操作之间存在happen-before关系的话，那么其中一个操作如果对内存(JMM主存)变量进行操作(写变量),则对变量的操作结果,在内存中对另外那个操作可见，同时还会存在执行顺序的优先性，第一个操作优于第二个操作执行，叫内存可见性。</p><h4 id="happens-before规则有哪些？"><a href="#happens-before规则有哪些？" class="headerlink" title="happens-before规则有哪些？"></a>happens-before规则有哪些？</h4></li></ul><ol><li>程序顺序规则：但线程内，在不改变程序结果的情况下(可能会发生重排序),程序按顺序执行。</li><li>监视器锁规则：对一个锁的解锁(volatile写)优先于锁的加锁(volatile读)。</li><li>volatile变量规则：volatile写优先volatile读。</li><li>传递性：A happens-before B, Bhappens-before C则 A happens-before C。</li><li>start()原则：如果在线程A中执行ThreadB.start(),那么A线程的ThreadB.start()操作要先于线程B中的任意操作。</li><li>join()操作：线程A执行ThreadB.join()操作并成功返回,那么B中的任意操作都先于线程A从ThreadB.join()操作成功返回。</li></ol><p>举个例子：</p><p><img src="https://i.imgur.com/5HFiSBc.png" alt=""></p><p><strong>特点：</strong>happens-before保证了两个线程之间的内存可见性。</p><p>1.两个操作之间存在happens-before关系，并不意味着一定要按照happens-before原则制定的顺序来执行。如果重排序之后的执行结果与按照happens-before关系来执行的结果一致，那么这种重排序并不非法。</p><p>2.<strong>数据竞争：</strong>一个线程在读，一个线程在写，而且两个线程还没有同步保证。</p><p>3.<strong>线程通信：</strong>线程间交换信息，例如：共享内存和消息传递。</p><p>4.<strong>线程同步：</strong>控制线程间操作发生的顺序。</p><p>5.<strong>顺序一致性模型和JMM的比较：</strong></p><pre><code>(1)前者保证单线程内的操作按程序的顺序来执行,后者不能保证。(2)前者保证所有的线程只能看到一致的操作执行顺序,因为在顺序一致性模型中每个操作必须立即对所有线程可见,而在后者中，因为存在缓存的缘故，当数据写入到缓存中，还没刷新到主存中时，此时的写操作仅对该线程可见,其他线程不可见。</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;p&gt;happens-before原则：&lt;/p&gt;
&lt;h4 id=&quot;怎么理解内存可见性？&quot;&gt;&lt;a href=&quot;#怎么理解内存可见性？&quot; class=&quot;headerlink&quot; title=&quot;怎么理解内存可见性？&quot;&gt;&lt;/a&gt;怎么理解内存可见性？&lt;/h4&gt;&lt;p&gt;  在单
      
    
    </summary>
    
      <category term="Java并发编程" scheme="http://www.xuchunfa.cn/categories/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
    
  </entry>
  
  <entry>
    <title>二叉树的创建和遍历</title>
    <link href="http://www.xuchunfa.cn/2018/07/23/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%88%9B%E5%BB%BA%E5%92%8C%E9%81%8D%E5%8E%86/"/>
    <id>http://www.xuchunfa.cn/2018/07/23/二叉树的创建和遍历/</id>
    <published>2018-07-23T07:57:04.000Z</published>
    <updated>2018-07-23T08:00:37.409Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前序、中序和后序递归与非递归的遍历二叉树？"><a href="#前序、中序和后序递归与非递归的遍历二叉树？" class="headerlink" title="前序、中序和后序递归与非递归的遍历二叉树？"></a>前序、中序和后序递归与非递归的遍历二叉树？</h4><pre><code>public class BinaryTree {private BinaryTreeNode root;public boolean isEmpty(){    if(this.root == null)        return true;    return false;}public BinaryTreeNode getRoot() {    return root;}public void createBinaryTree(BinaryTreeNode node, int data){    if(root == null){        this.root = new BinaryTreeNode(data);    }else{        //创建二叉查找树        if(data &lt; node.data){            //构建左子树            if(node.left == null){                node.left = new BinaryTreeNode(data);            }else {                createBinaryTree(node.left,data);            }        }else {            //构建右子树            if(node.right == null){                node.right = new BinaryTreeNode(data);            }else {                createBinaryTree(node.right,data);            }        }    }}//先序遍历,递归实现public void preOrder(BinaryTreeNode node){    if (node == null)        return;    System.out.print(node.data + &quot; &quot;);    preOrder(node.left);    preOrder(node.right);}//先序遍历,非递归实现public void cyclePreOrder(BinaryTreeNode node){    BinaryTreeNode p = node;    Stack&lt;BinaryTreeNode&gt; stack = new Stack&lt;BinaryTreeNode&gt;();    if(p == null){        System.out.println(&quot;二叉树为空&quot;);    }    //根节点出栈后栈空了但 p != null    while (p != null || !stack.isEmpty()){        while (p != null){            System.out.print(p.data + &quot; &quot;);            stack.push(p);            p = p.left;        }        if(!stack.isEmpty()){            p = stack.pop();            p = p.right;        }    }}//中序遍历,递归实现public void inOrder(BinaryTreeNode node){    if(node == null)        return;    inOrder(node.left);    System.out.print(node.data + &quot; &quot;);    inOrder(node.right);}//中序遍历,非递归实现public void cycleInOrder(BinaryTreeNode node){    BinaryTreeNode p = node;    Stack&lt;BinaryTreeNode&gt; stack = new Stack&lt;BinaryTreeNode&gt;();    if(p == null){        System.out.println(&quot;二叉树为空&quot;);    }    //根节点出栈后栈空了但 p != null    while (p != null || !stack.isEmpty()){        while (p != null){            stack.push(p);            p = p.left;        }        if(!stack.isEmpty()){            p = stack.pop();            System.out.print(p.data + &quot; &quot;);            p = p.right;        }    }}//后序遍历,递归实现public void postOrder(BinaryTreeNode node) {    if (node == null)        return;    postOrder(node.left);    postOrder(node.right);    System.out.print(node.data + &quot; &quot;);}//后序遍历,非递归实现public void cyclePostOrder(BinaryTreeNode node){    BinaryTreeNode current;    BinaryTreeNode visited = null;    Stack&lt;BinaryTreeNode&gt; s = new Stack&lt;BinaryTreeNode&gt;();    s.push(node);    while (!s.isEmpty()){        //还不能出栈        current = s.peek();        if((current.left == null &amp;&amp; current.right == null) || (visited != null &amp;&amp; (current.left == visited || current.right == visited)) ){            current = s.pop();            System.out.print(current.data + &quot; &quot;);            visited = current;        }else {            if(current.right != null){                s.push(current.right);            }            if(current.left != null){                s.push(current.left);            }        }    }}public static void main(String[] args){    BinaryTree bt = new BinaryTree();    Random random = new Random();    //10个结点    for(int i = 0;i&lt;6;i++){        bt.createBinaryTree(bt.root,random.nextInt(10));    }    bt.postOrder(bt.root);    System.out.println();    bt.cyclePostOrder(bt.root);}}</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;前序、中序和后序递归与非递归的遍历二叉树？&quot;&gt;&lt;a href=&quot;#前序、中序和后序递归与非递归的遍历二叉树？&quot; class=&quot;headerlink&quot; title=&quot;前序、中序和后序递归与非递归的遍历二叉树？&quot;&gt;&lt;/a&gt;前序、中序和后序递归与非递归的遍历二叉树？&lt;/
      
    
    </summary>
    
      <category term="树" scheme="http://www.xuchunfa.cn/categories/%E6%A0%91/"/>
    
    
  </entry>
  
  <entry>
    <title>反转链表</title>
    <link href="http://www.xuchunfa.cn/2018/07/22/%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/"/>
    <id>http://www.xuchunfa.cn/2018/07/22/反转链表/</id>
    <published>2018-07-22T11:44:48.000Z</published>
    <updated>2018-07-22T11:54:55.982Z</updated>
    
    <content type="html"><![CDATA[<h4 id="反转链表？"><a href="#反转链表？" class="headerlink" title="反转链表？"></a>反转链表？</h4><pre><code>public class VerseLinkPrint {private ListNode head;    private ListNode q;//添加链表节点   public void add(int data){    ListNode node = new ListNode(data);    if(this.head == null){        this.head = node;    }else {        this.head.addNode(node);    }}//从头到尾打印链表节点    public void print(){    if(this.head == null){        System.out.println(&quot;链表为空&quot;);    }else {        this.head.printNode();        System.out.println();    }}//非递归实现反转链表   public void versePrint(){if(head == null){    System.out.println(&quot;链表为空&quot;);    return;}//已经改变的链表的结构ListNode p = head.next;ListNode q = null;head.next = null;while (p != null){    q = p.next;    p.next = head;    head = p;    p = q;}print();}//递归实现反转链表   public void verseRecursive(ListNode p){if(p == null)    return;verseRecursive(p.next);if(p.next == null){    head = p;    q = p;}p.next = null;q.next = p;q = q.next;}public static void main(String[] args){    VerseLinkPrint link = new VerseLinkPrint();    link.add(1);    link.add(2);    link.add(3);    link.verseRecursive(link.head);    link.print();    }}</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;反转链表？&quot;&gt;&lt;a href=&quot;#反转链表？&quot; class=&quot;headerlink&quot; title=&quot;反转链表？&quot;&gt;&lt;/a&gt;反转链表？&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;public class VerseLinkPrint {

private ListNode he
      
    
    </summary>
    
      <category term="链表" scheme="http://www.xuchunfa.cn/categories/%E9%93%BE%E8%A1%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>从尾到头打印链表</title>
    <link href="http://www.xuchunfa.cn/2018/07/22/%E4%BB%8E%E5%B0%BE%E5%88%B0%E5%A4%B4%E6%89%93%E5%8D%B0%E9%93%BE%E8%A1%A8/"/>
    <id>http://www.xuchunfa.cn/2018/07/22/从尾到头打印链表/</id>
    <published>2018-07-22T10:53:03.000Z</published>
    <updated>2018-07-22T11:55:51.480Z</updated>
    
    <content type="html"><![CDATA[<h4 id="从尾到头打印链表？"><a href="#从尾到头打印链表？" class="headerlink" title="从尾到头打印链表？"></a>从尾到头打印链表？</h4><p><strong>核心思想：</strong>栈和递归。</p><pre><code>public class VerseLink {private ListNode head;//添加链表节点public void add(int data){    ListNode node = new ListNode(data);    if(this.head == null){        this.head = node;    }else {        this.head.addNode(node);    }}//从头到尾打印链表节点public void print(){    if(this.head == null){        System.out.println(&quot;链表为空&quot;);    }else {        this.head.printNode();        System.out.println();    }}//从尾到头打印链表节点(常规方法) 时间复杂度(O(n)) 空间复杂度(O(1))public void versePrint(){    if(head == null){        System.out.println(&quot;链表为空&quot;);        return;    }    ListNode p = head.next;    ListNode q = null;    head.next = null;    while (p != null){        q = p.next;        p.next = head;        head = p;        p = q;    }    print();}//栈实现 时间复杂度:O(n) 空间复杂度:O(n)public void versePrint1(){    Stack&lt;Integer&gt; stack = new Stack&lt;Integer&gt;();    ListNode p = head;    if(p == null){        System.out.println(&quot;链表为空&quot;);        return;    }    while (p != null){        stack.push(p.data);        p = p.next;    }    while (!stack.empty()){        System.out.print(stack.pop()+&quot;--&gt;&quot;);    }}//递归实现public void versePrint2(ListNode p){    if(p == null){        return;    }    versePrint2(p.next);    System.out.print(p.data+&quot;--&gt;&quot;);}public static void main(String[] args){    VerseLink link = new VerseLink();    link.add(1);    link.add(2);    link.add(3);    link.versePrint2(link.head);}}</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;从尾到头打印链表？&quot;&gt;&lt;a href=&quot;#从尾到头打印链表？&quot; class=&quot;headerlink&quot; title=&quot;从尾到头打印链表？&quot;&gt;&lt;/a&gt;从尾到头打印链表？&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;核心思想：&lt;/strong&gt;栈和递归。&lt;/p&gt;
&lt;pre&gt;&lt;code
      
    
    </summary>
    
      <category term="链表" scheme="http://www.xuchunfa.cn/categories/%E9%93%BE%E8%A1%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>链表中倒数第k个结点</title>
    <link href="http://www.xuchunfa.cn/2018/07/22/%E9%93%BE%E8%A1%A8%E4%B8%AD%E5%80%92%E6%95%B0%E7%AC%ACk%E4%B8%AA%E7%BB%93%E7%82%B9/"/>
    <id>http://www.xuchunfa.cn/2018/07/22/链表中倒数第k个结点/</id>
    <published>2018-07-22T06:29:00.000Z</published>
    <updated>2018-07-22T11:56:03.226Z</updated>
    
    <content type="html"><![CDATA[<h4 id="求链表中的倒数第k个结点？"><a href="#求链表中的倒数第k个结点？" class="headerlink" title="求链表中的倒数第k个结点？"></a>求链表中的倒数第k个结点？</h4><pre><code>public class Link {private ListNode head;class ListNode{    private int data;    ListNode next;    public ListNode(int data) {        this.data = data;        this.next = null;    }    public void addNode(ListNode newNode){        //相当于尾插法        if(this.next == null){            this.next = newNode;        }else {            this.next.addNode(newNode);        }    }    public void printNode(){        System.out.print(this.data + &quot;--&gt;&quot;);        if(this.next != null){            this.next.printNode();        }        }    }    //添加链表节点    public void add(int data){    ListNode node = new ListNode(data);        if(this.head == null){            this.head = node;        }else {            this.head.addNode(node);        }    }    //打印链表节点        public void print(){    if(this.head == null){        System.out.println(&quot;链表为空&quot;);    }else {        this.head.printNode();        System.out.println();    }    }    //链表中的倒数第 K 个结点    public ListNode FindKthToTail(ListNode head,int k){    int len = 0;    int i = 0;    ListNode counter = head;    ListNode p = head;    ListNode pre = head;    if(k &lt;= 0){        System.out.println(&quot;请输入自然数k！&quot;);        //-1代表非正常退出        System.exit(-1);    }    if(head == null) {        System.out.println(&quot;链表不能为空！&quot;);        System.exit(-1);    }    while(counter != null){        len++;        counter = counter.next;    }    if(k &gt; len){        System.out.println(&quot;k值大于了链表长度！&quot;);        System.exit(-1);    }    //先走k步    while (i &lt; k){        pre = pre.next;        i++;    }    while (pre != null){        p = p.next;        pre = pre.next;    }    return p;    }    public static void main(String[] args){    Link link = new Link();    link.add(1);    link.add(2);    link.add(3);    link.print();    ListNode node = link.FindKthToTail(link.head,4);    node.next = null;    node.printNode();    }    }</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;求链表中的倒数第k个结点？&quot;&gt;&lt;a href=&quot;#求链表中的倒数第k个结点？&quot; class=&quot;headerlink&quot; title=&quot;求链表中的倒数第k个结点？&quot;&gt;&lt;/a&gt;求链表中的倒数第k个结点？&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;public class Link 
      
    
    </summary>
    
      <category term="链表" scheme="http://www.xuchunfa.cn/categories/%E9%93%BE%E8%A1%A8/"/>
    
    
  </entry>
  
</feed>
